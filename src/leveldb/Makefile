# copyright (c) 2011 the leveldb authors. all rights reserved.
# use of this source code is governed by a bsd-style license that can be
# found in the license file. see the authors file for names of contributors.

#-----------------------------------------------
# uncomment exactly one of the lines labelled (a), (b), and (c) below
# to switch between compilation modes.

opt ?= -o2 -dndebug       # (a) production use (optimized mode)
# opt ?= -g2              # (b) debug mode, w/ full line-level debugging symbols
# opt ?= -o2 -g2 -dndebug # (c) profiling mode: opt, but w/debugging symbols
#-----------------------------------------------

# detect what platform we're building on
$(shell cc=$(cc) cxx=$(cxx) target_os=$(target_os) \
    ./build_detect_platform build_config.mk ./)
# this file is generated by the previous line to set build flags and sources
include build_config.mk

cflags += -i. -i./include $(platform_ccflags) $(opt)
cxxflags += -i. -i./include $(platform_cxxflags) $(opt)

ldflags += $(platform_ldflags)
libs += $(platform_libs)

libobjects = $(sources:.cc=.o)
memenvobjects = $(memenv_sources:.cc=.o)

testutil = ./util/testutil.o
testharness = ./util/testharness.o $(testutil)

tests = \
	arena_test \
	autocompact_test \
	bloom_test \
	c_test \
	cache_test \
	coding_test \
	corruption_test \
	crc32c_test \
	db_test \
	dbformat_test \
	env_test \
	filename_test \
	filter_block_test \
	issue178_test \
	issue200_test \
	log_test \
	memenv_test \
	skiplist_test \
	table_test \
	version_edit_test \
	version_set_test \
	write_batch_test

programs = db_bench leveldbutil $(tests)
benchmarks = db_bench_sqlite3 db_bench_tree_db

library = libleveldb.a
memenvlibrary = libmemenv.a

default: all

# should we build shared libraries?
ifneq ($(platform_shared_ext),)

ifneq ($(platform_shared_versioned),true)
shared1 = libleveldb.$(platform_shared_ext)
shared2 = $(shared1)
shared3 = $(shared1)
shared = $(shared1)
else
# update db.h if you change these.
shared_major = 1
shared_minor = 14
shared1 = libleveldb.$(platform_shared_ext)
shared2 = $(shared1).$(shared_major)
shared3 = $(shared1).$(shared_major).$(shared_minor)
shared = $(shared1) $(shared2) $(shared3)
$(shared1): $(shared3)
	ln -fs $(shared3) $(shared1)
$(shared2): $(shared3)
	ln -fs $(shared3) $(shared2)
endif

$(shared3):
	$(cxx) $(ldflags) $(platform_shared_ldflags)$(shared2) $(cxxflags) $(platform_shared_cflags) $(sources) -o $(shared3) $(libs)

endif  # platform_shared_ext

all: $(shared) $(library)

check: all $(programs) $(tests)
	for t in $(tests); do echo "***** running $$t"; ./$$t || exit 1; done

clean:
	-rm -f $(programs) $(benchmarks) $(library) $(shared) $(memenvlibrary) */*.o */*/*.o ios-x86/*/*.o ios-arm/*/*.o build_config.mk
	-rm -rf ios-x86/* ios-arm/*

$(library): $(libobjects)
	rm -f $@
	$(ar) -rs $@ $(libobjects)

db_bench: db/db_bench.o $(libobjects) $(testutil)
	$(cxx) $(ldflags) db/db_bench.o $(libobjects) $(testutil) -o $@ $(libs)

db_bench_sqlite3: doc/bench/db_bench_sqlite3.o $(libobjects) $(testutil)
	$(cxx) $(ldflags) doc/bench/db_bench_sqlite3.o $(libobjects) $(testutil) -o $@ -lsqlite3 $(libs)

db_bench_tree_db: doc/bench/db_bench_tree_db.o $(libobjects) $(testutil)
	$(cxx) $(ldflags) doc/bench/db_bench_tree_db.o $(libobjects) $(testutil) -o $@ -lkyotocabinet $(libs)

leveldbutil: db/leveldb_main.o $(libobjects)
	$(cxx) $(ldflags) db/leveldb_main.o $(libobjects) -o $@ $(libs)

arena_test: util/arena_test.o $(libobjects) $(testharness)
	$(cxx) $(ldflags) util/arena_test.o $(libobjects) $(testharness) -o $@ $(libs)

autocompact_test: db/autocompact_test.o $(libobjects) $(testharness)
	$(cxx) $(ldflags) db/autocompact_test.o $(libobjects) $(testharness) -o $@ $(libs)

bloom_test: util/bloom_test.o $(libobjects) $(testharness)
	$(cxx) $(ldflags) util/bloom_test.o $(libobjects) $(testharness) -o $@ $(libs)

c_test: db/c_test.o $(libobjects) $(testharness)
	$(cxx) $(ldflags) db/c_test.o $(libobjects) $(testharness) -o $@ $(libs)

cache_test: util/cache_test.o $(libobjects) $(testharness)
	$(cxx) $(ldflags) util/cache_test.o $(libobjects) $(testharness) -o $@ $(libs)

coding_test: util/coding_test.o $(libobjects) $(testharness)
	$(cxx) $(ldflags) util/coding_test.o $(libobjects) $(testharness) -o $@ $(libs)

corruption_test: db/corruption_test.o $(libobjects) $(testharness)
	$(cxx) $(ldflags) db/corruption_test.o $(libobjects) $(testharness) -o $@ $(libs)

crc32c_test: util/crc32c_test.o $(libobjects) $(testharness)
	$(cxx) $(ldflags) util/crc32c_test.o $(libobjects) $(testharness) -o $@ $(libs)

db_test: db/db_test.o $(libobjects) $(testharness)
	$(cxx) $(ldflags) db/db_test.o $(libobjects) $(testharness) -o $@ $(libs)

dbformat_test: db/dbformat_test.o $(libobjects) $(testharness)
	$(cxx) $(ldflags) db/dbformat_test.o $(libobjects) $(testharness) -o $@ $(libs)

env_test: util/env_test.o $(libobjects) $(testharness)
	$(cxx) $(ldflags) util/env_test.o $(libobjects) $(testharness) -o $@ $(libs)

filename_test: db/filename_test.o $(libobjects) $(testharness)
	$(cxx) $(ldflags) db/filename_test.o $(libobjects) $(testharness) -o $@ $(libs)

filter_block_test: table/filter_block_test.o $(libobjects) $(testharness)
	$(cxx) $(ldflags) table/filter_block_test.o $(libobjects) $(testharness) -o $@ $(libs)

issue178_test: issues/issue178_test.o $(libobjects) $(testharness)
	$(cxx) $(ldflags) issues/issue178_test.o $(libobjects) $(testharness) -o $@ $(libs)

issue200_test: issues/issue200_test.o $(libobjects) $(testharness)
	$(cxx) $(ldflags) issues/issue200_test.o $(libobjects) $(testharness) -o $@ $(libs)

log_test: db/log_test.o $(libobjects) $(testharness)
	$(cxx) $(ldflags) db/log_test.o $(libobjects) $(testharness) -o $@ $(libs)

table_test: table/table_test.o $(libobjects) $(testharness)
	$(cxx) $(ldflags) table/table_test.o $(libobjects) $(testharness) -o $@ $(libs)

skiplist_test: db/skiplist_test.o $(libobjects) $(testharness)
	$(cxx) $(ldflags) db/skiplist_test.o $(libobjects) $(testharness) -o $@ $(libs)

version_edit_test: db/version_edit_test.o $(libobjects) $(testharness)
	$(cxx) $(ldflags) db/version_edit_test.o $(libobjects) $(testharness) -o $@ $(libs)

version_set_test: db/version_set_test.o $(libobjects) $(testharness)
	$(cxx) $(ldflags) db/version_set_test.o $(libobjects) $(testharness) -o $@ $(libs)

write_batch_test: db/write_batch_test.o $(libobjects) $(testharness)
	$(cxx) $(ldflags) db/write_batch_test.o $(libobjects) $(testharness) -o $@ $(libs)

$(memenvlibrary) : $(memenvobjects)
	rm -f $@
	$(ar) -rs $@ $(memenvobjects)

memenv_test : helpers/memenv/memenv_test.o $(memenvlibrary) $(library) $(testharness)
	$(cxx) $(ldflags) helpers/memenv/memenv_test.o $(memenvlibrary) $(library) $(testharness) -o $@ $(libs)

ifeq ($(platform), ios)
# for ios, create universal object files to be used on both the simulator and
# a device.
platformsroot=/applications/xcode.app/contents/developer/platforms
simulatorroot=$(platformsroot)/iphonesimulator.platform/developer
deviceroot=$(platformsroot)/iphoneos.platform/developer
iosversion=$(shell defaults read $(platformsroot)/iphoneos.platform/version cfbundleshortversionstring)

.cc.o:
	mkdir -p ios-x86/$(dir $@)
	$(cxx) $(cxxflags) -isysroot $(simulatorroot)/sdks/iphonesimulator$(iosversion).sdk -arch i686 -c $< -o ios-x86/$@
	mkdir -p ios-arm/$(dir $@)
	xcrun -sdk iphoneos $(cxx) $(cxxflags) -isysroot $(deviceroot)/sdks/iphoneos$(iosversion).sdk -arch armv6 -arch armv7 -c $< -o ios-arm/$@
	lipo ios-x86/$@ ios-arm/$@ -create -output $@

.c.o:
	mkdir -p ios-x86/$(dir $@)
	$(cc) $(cflags) -isysroot $(simulatorroot)/sdks/iphonesimulator$(iosversion).sdk -arch i686 -c $< -o ios-x86/$@
	mkdir -p ios-arm/$(dir $@)
	xcrun -sdk iphoneos $(cc) $(cflags) -isysroot $(deviceroot)/sdks/iphoneos$(iosversion).sdk -arch armv6 -arch armv7 -c $< -o ios-arm/$@
	lipo ios-x86/$@ ios-arm/$@ -create -output $@

else
.cc.o:
	$(cxx) $(cxxflags) -c $< -o $@

.c.o:
	$(cc) $(cflags) -c $< -o $@
endif
