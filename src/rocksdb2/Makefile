# copyright (c) 2011 the leveldb authors. all rights reserved.
# use of this source code is governed by a bsd-style license that can be
# found in the license file. see the authors file for names of contributors.

# inherit some settings from environment variables, if available

#-----------------------------------------------

ifneq ($(makecmdgoals),dbg)
opt += -o2 -fno-omit-frame-pointer -momit-leaf-frame-pointer
else
# intentionally left blank
endif

ifeq ($(makecmdgoals),shared_lib)
opt += -dndebug
endif

ifeq ($(makecmdgoals),static_lib)
opt += -dndebug
endif

#-----------------------------------------------

# detect what platform we're building on
$(shell (export rocksdb_root="$(curdir)"; "$(curdir)/build_tools/build_detect_platform" "$(curdir)/build_config.mk"))
# this file is generated by the previous line to set build flags and sources
include build_config.mk

ifneq ($(platform), ios)
cflags += -g
cxxflags += -g
else
# no debug info for ios, that will make our library big
opt += -dndebug
endif

# asan doesn't work well with jemalloc. if we're compiling with asan, we should use regular malloc.
ifdef compile_with_asan
	# asan compile flags
	exec_ldflags += -fsanitize=address
	platform_ccflags += -fsanitize=address
	platform_cxxflags += -fsanitize=address
else
	# if we're not compiling with asan, use jemalloc
	exec_ldflags := $(jemalloc_lib) $(exec_ldflags)
	platform_cxxflags += $(jemalloc_include) -dhave_jemalloc
	platform_ccflags += $(jemalloc_include) -dhave_jemalloc
endif

#-------------------------------------------------
# make install related stuff
install_path ?= /usr/local

uninstall:
	@rm -rf $(install_path)/include/rocksdb
	@rm -rf $(install_path)/lib/$(library)
	@rm -rf $(install_path)/lib/$(shared)

install:
	@install -d $(install_path)/lib
	@for header_dir in `find "include/rocksdb" -type d`; do \
		install -d $(install_path)/$$header_dir; \
	done
	@for header in `find "include/rocksdb" -type f -name *.h`; do \
		install -c -m 644 $$header $(install_path)/$$header; \
	done
	@[ ! -e $(library) ] || install -c -m 644 $(library) $(install_path)/lib
	@[ ! -e $(shared) ] || install -c -m 644 $(shared) $(install_path)/lib
#-------------------------------------------------

warning_flags = -wall -werror -wsign-compare
cflags += $(warning_flags) -i. -i./include $(platform_ccflags) $(opt)
cxxflags += $(warning_flags) -i. -i./include $(platform_cxxflags) $(opt) -woverloaded-virtual

ldflags += $(platform_ldflags)

libobjects = $(sources:.cc=.o)
libobjects += $(sourcescpp:.cpp=.o)
memenvobjects = $(memenv_sources:.cc=.o)

testutil = ./util/testutil.o
testharness = ./util/testharness.o $(testutil)
benchharness = ./util/benchharness.o
valgrind_error = 2
valgrind_dir = build_tools/valgrind_logs
valgrind_ver := $(join $(valgrind_ver),valgrind)
valgrind_opts = --error-exitcode=$(valgrind_error) --leak-check=full

tests = \
	db_test \
	db_iter_test \
	block_hash_index_test \
	autovector_test \
	column_family_test \
	table_properties_collector_test \
	arena_test \
	auto_roll_logger_test \
	benchharness_test \
	block_test \
	bloom_test \
	dynamic_bloom_test \
	c_test \
	cache_test \
	coding_test \
	corruption_test \
	crc32c_test \
	dbformat_test \
	env_test \
	blob_store_test \
	filelock_test \
	filename_test \
	filter_block_test \
	histogram_test \
	log_test \
	manual_compaction_test \
	memenv_test \
	merge_test \
	redis_test \
	reduce_levels_test \
	plain_table_db_test \
	prefix_test \
	simple_table_db_test \
	skiplist_test \
	stringappend_test \
	ttl_test \
	backupable_db_test \
	document_db_test \
	json_document_test \
	spatial_db_test \
	version_edit_test \
	version_set_test \
	file_indexer_test \
	write_batch_test\
	deletefile_test \
	table_test \
	thread_local_test \
	geodb_test \
	rate_limiter_test \
	options_test \
	cuckoo_table_builder_test \
	cuckoo_table_reader_test \
	cuckoo_table_db_test \
	write_batch_with_index_test

tools = \
        sst_dump \
	db_sanity_test \
        db_stress \
        ldb \
	db_repl_stress \
  options_test \
	blob_store_bench

programs = db_bench signal_test table_reader_bench log_and_apply_bench $(tools)

# the library name is configurable since we are maintaining libraries of both
# debug/release mode.
ifeq ($(libname),)
        libname=librocksdb
endif
library = ${libname}.a
memenvlibrary = libmemenv.a

default: all

#-----------------------------------------------
# create platform independent shared libraries.
#-----------------------------------------------
ifneq ($(platform_shared_ext),)

ifneq ($(platform_shared_versioned),true)
shared1 = ${libname}.$(platform_shared_ext)
shared2 = $(shared1)
shared3 = $(shared1)
shared = $(shared1)
else
# update db.h if you change these.
shared_major = 3
shared_minor = 5
shared1 = ${libname}.$(platform_shared_ext)
shared2 = $(shared1).$(shared_major)
shared3 = $(shared1).$(shared_major).$(shared_minor)
shared = $(shared1) $(shared2) $(shared3)
$(shared1): $(shared3)
	ln -fs $(shared3) $(shared1)
$(shared2): $(shared3)
	ln -fs $(shared3) $(shared2)
endif

$(shared3):
	$(cxx) $(platform_shared_ldflags)$(shared2) $(cxxflags) $(platform_shared_cflags) $(sources) $(ldflags) -o $@

endif  # platform_shared_ext

.phony: blackbox_crash_test check clean coverage crash_test ldb_tests \
	release tags valgrind_check whitebox_crash_test format static_lib shared_lib all \
	dbg

all: $(library) $(programs) $(tests)

static_lib: $(library)

shared_lib: $(shared)

dbg: $(library) $(programs) $(tests)

# creates static library and programs
release:
	$(make) clean
	opt="-dndebug -o2" $(make) static_lib $(programs) -j32

coverage:
	$(make) clean
	coverageflags="-fprofile-arcs -ftest-coverage" ldflags+="-lgcov" $(make) all check -j32
	(cd coverage; ./coverage_test.sh)
	# delete intermediate files
	find . -type f -regex ".*\.\(\(gcda\)\|\(gcno\)\)" -exec rm {} \;

check: $(tests) ldb
	for t in $(tests); do echo "***** running $$t"; ./$$t || exit 1; done
	python tools/ldb_test.py

ldb_tests: ldb
	python tools/ldb_test.py

crash_test: whitebox_crash_test blackbox_crash_test

blackbox_crash_test: db_stress
	python -u tools/db_crashtest.py

whitebox_crash_test: db_stress
	python -u tools/db_crashtest2.py

asan_check:
	$(make) clean
	compile_with_asan=1 $(make) check -j32
	$(make) clean

asan_crash_test:
	$(make) clean
	compile_with_asan=1 $(make) crash_test
	$(make) clean

valgrind_check: all $(programs) $(tests)
	mkdir -p $(valgrind_dir)
	echo tests that have valgrind errors > $(valgrind_dir)/valgrind_failed_tests; \
	echo times in seconds taken by tests on valgrind > $(valgrind_dir)/valgrind_tests_times; \
	for t in $(filter-out skiplist_test,$(tests)); do \
		stime=`date '+%s'`; \
		$(valgrind_ver) $(valgrind_opts) ./$$t; \
		if [ $$? -eq $(valgrind_error) ] ; then \
			echo $$t >> $(valgrind_dir)/valgrind_failed_tests; \
		fi; \
		etime=`date '+%s'`; \
		echo $$t $$((etime - stime)) >> $(valgrind_dir)/valgrind_tests_times; \
	done

unity.cc:
	$(shell (export rocksdb_root="$(curdir)"; "$(curdir)/build_tools/unity" "$(curdir)/unity.cc"))

unity: unity.cc unity.o
	$(cxx) unity.o $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

clean:
	-rm -f $(programs) $(tests) $(library) $(shared) $(memenvlibrary) build_config.mk unity.cc
	-rm -rf ios-x86/* ios-arm/*
	-find . -name "*.[od]" -exec rm {} \;
	-find . -type f -regex ".*\.\(\(gcda\)\|\(gcno\)\)" -exec rm {} \;
tags:
	ctags * -r
	cscope -b `find . -name '*.cc'` `find . -name '*.h'`

format:
	build_tools/format-diff.sh

# ---------------------------------------------------------------------------
# 	unit tests and tools
# ---------------------------------------------------------------------------
$(library): $(libobjects)
	rm -f $@
	$(ar) -rs $@ $(libobjects)

db_bench: db/db_bench.o $(libobjects) $(testutil)
	$(cxx) db/db_bench.o $(libobjects) $(testutil) $(exec_ldflags) -o $@  $(ldflags) $(coverageflags)

block_hash_index_test: table/block_hash_index_test.o $(libobjects) $(testharness)
	 $(cxx) table/block_hash_index_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

db_stress: tools/db_stress.o $(libobjects) $(testutil)
	$(cxx) tools/db_stress.o $(libobjects) $(testutil) $(exec_ldflags) -o $@  $(ldflags) $(coverageflags)

db_sanity_test: tools/db_sanity_test.o $(libobjects) $(testutil)
	$(cxx) tools/db_sanity_test.o $(libobjects) $(testutil) $(exec_ldflags) -o $@  $(ldflags) $(coverageflags)

db_repl_stress: tools/db_repl_stress.o $(libobjects) $(testutil)
	$(cxx) tools/db_repl_stress.o $(libobjects) $(testutil) $(exec_ldflags) -o $@  $(ldflags) $(coverageflags)

blob_store_bench: tools/blob_store_bench.o $(libobjects) $(testutil)
	$(cxx) tools/blob_store_bench.o $(libobjects) $(testutil) $(exec_ldflags) -o $@  $(ldflags) $(coverageflags)

signal_test: util/signal_test.o $(libobjects)
	$(cxx) util/signal_test.o $(libobjects) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

arena_test: util/arena_test.o $(libobjects) $(testharness)
	$(cxx) util/arena_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

autovector_test: util/autovector_test.o $(libobjects) $(testharness)
	$(cxx) util/autovector_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

column_family_test: db/column_family_test.o $(libobjects) $(testharness)
	$(cxx) db/column_family_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

table_properties_collector_test: db/table_properties_collector_test.o $(libobjects) $(testharness)
	$(cxx) db/table_properties_collector_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

bloom_test: util/bloom_test.o $(libobjects) $(testharness)
	$(cxx) util/bloom_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

dynamic_bloom_test: util/dynamic_bloom_test.o $(libobjects) $(testharness)
	$(cxx) util/dynamic_bloom_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

c_test: db/c_test.o $(libobjects) $(testharness)
	$(cxx) db/c_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

cache_test: util/cache_test.o $(libobjects) $(testharness)
	$(cxx) util/cache_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

coding_test: util/coding_test.o $(libobjects) $(testharness)
	$(cxx) util/coding_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

blob_store_test: util/blob_store_test.o $(libobjects) $(testharness) $(testutil)
	$(cxx) util/blob_store_test.o $(libobjects) $(testharness) $(exec_ldflags) -o$@ $(ldflags) $(coverageflags)

stringappend_test: utilities/merge_operators/string_append/stringappend_test.o $(libobjects) $(testharness)
	$(cxx) utilities/merge_operators/string_append/stringappend_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

redis_test: utilities/redis/redis_lists_test.o $(libobjects) $(testharness)
	$(cxx) utilities/redis/redis_lists_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

benchharness_test: util/benchharness_test.o $(libobjects) $(testharness) $(benchharness)
	$(cxx) util/benchharness_test.o $(libobjects) $(testharness) $(benchharness) $(exec_ldflags) -o$@ $(ldflags) $(coverageflags)

histogram_test: util/histogram_test.o $(libobjects) $(testharness)
	$(cxx) util/histogram_test.o $(libobjects) $(testharness) $(exec_ldflags) -o$@ $(ldflags) $(coverageflags)

thread_local_test: util/thread_local_test.o $(libobjects) $(testharness)
	$(cxx) util/thread_local_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

corruption_test: db/corruption_test.o $(libobjects) $(testharness)
	$(cxx) db/corruption_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

crc32c_test: util/crc32c_test.o $(libobjects) $(testharness)
	$(cxx) util/crc32c_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

db_test: db/db_test.o $(libobjects) $(testharness)
	$(cxx) db/db_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

db_iter_test: db/db_iter_test.o $(libobjects) $(testharness)
	$(cxx) db/db_iter_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

log_write_bench: util/log_write_bench.o $(libobjects) $(testharness)
	$(cxx) util/log_write_bench.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags) -pg

plain_table_db_test: db/plain_table_db_test.o $(libobjects) $(testharness)
	$(cxx) db/plain_table_db_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

simple_table_db_test: db/simple_table_db_test.o $(libobjects) $(testharness)
	$(cxx) db/simple_table_db_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

table_reader_bench: table/table_reader_bench.o $(libobjects) $(testharness)
	$(cxx) table/table_reader_bench.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags) -pg

log_and_apply_bench: db/log_and_apply_bench.o $(libobjects) $(testharness) $(benchharness)
	$(cxx) db/log_and_apply_bench.o $(libobjects) $(testharness) $(benchharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags) -pg

perf_context_test: db/perf_context_test.o $(libobjects) $(testharness)
	$(cxx) db/perf_context_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags)

prefix_test: db/prefix_test.o $(libobjects) $(testharness)
	$(cxx) db/prefix_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags)

backupable_db_test: utilities/backupable/backupable_db_test.o $(libobjects) $(testharness)
	$(cxx) utilities/backupable/backupable_db_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@  $(ldflags) $(coverageflags)

document_db_test: utilities/document/document_db_test.o $(libobjects) $(testharness)
	$(cxx) utilities/document/document_db_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@  $(ldflags) $(coverageflags)

json_document_test: utilities/document/json_document_test.o $(libobjects) $(testharness)
	$(cxx) utilities/document/json_document_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@  $(ldflags) $(coverageflags)

spatial_db_test: utilities/spatialdb/spatial_db_test.o $(libobjects) $(testharness)
	$(cxx) utilities/spatialdb/spatial_db_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@  $(ldflags) $(coverageflags)

ttl_test: utilities/ttl/ttl_test.o $(libobjects) $(testharness)
	$(cxx) utilities/ttl/ttl_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@  $(ldflags) $(coverageflags)

write_batch_with_index_test: utilities/write_batch_with_index/write_batch_with_index_test.o $(libobjects) $(testharness)
	$(cxx) utilities/write_batch_with_index/write_batch_with_index_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@  $(ldflags) $(coverageflags)

dbformat_test: db/dbformat_test.o $(libobjects) $(testharness)
	$(cxx) db/dbformat_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

env_test: util/env_test.o $(libobjects) $(testharness)
	$(cxx) util/env_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

rate_limiter_test: util/rate_limiter_test.o $(libobjects) $(testharness)
	$(cxx) util/rate_limiter_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

filename_test: db/filename_test.o $(libobjects) $(testharness)
	$(cxx) db/filename_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

filter_block_test: table/filter_block_test.o $(libobjects) $(testharness)
	$(cxx) table/filter_block_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

log_test: db/log_test.o $(libobjects) $(testharness)
	$(cxx) db/log_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

table_test: table/table_test.o $(libobjects) $(testharness)
	$(cxx) table/table_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

block_test: table/block_test.o $(libobjects) $(testharness)
	$(cxx) table/block_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

skiplist_test: db/skiplist_test.o $(libobjects) $(testharness)
	$(cxx) db/skiplist_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

version_edit_test: db/version_edit_test.o $(libobjects) $(testharness)
	$(cxx) db/version_edit_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

version_set_test: db/version_set_test.o $(libobjects) $(testharness)
	$(cxx) db/version_set_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

file_indexer_test : db/file_indexer_test.o $(libobjects) $(testharness)
	$(cxx) db/file_indexer_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

reduce_levels_test: tools/reduce_levels_test.o $(libobjects) $(testharness)
	$(cxx) tools/reduce_levels_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

write_batch_test: db/write_batch_test.o $(libobjects) $(testharness)
	$(cxx) db/write_batch_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

merge_test: db/merge_test.o $(libobjects) $(testharness)
	$(cxx) db/merge_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

deletefile_test: db/deletefile_test.o $(libobjects) $(testharness)
	$(cxx) db/deletefile_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags)

geodb_test: utilities/geodb/geodb_test.o $(libobjects) $(testharness)
	$(cxx) utilities/geodb/geodb_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

cuckoo_table_builder_test: table/cuckoo_table_builder_test.o $(libobjects) $(testharness)
	$(cxx) table/cuckoo_table_builder_test.o  $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

cuckoo_table_reader_test: table/cuckoo_table_reader_test.o $(libobjects) $(testharness) $(benchharness)
	$(cxx) table/cuckoo_table_reader_test.o  $(libobjects) $(testharness) $(benchharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

cuckoo_table_db_test: db/cuckoo_table_db_test.o $(libobjects) $(testharness)
	$(cxx) db/cuckoo_table_db_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

options_test: util/options_test.o $(libobjects) $(testharness)
	$(cxx) util/options_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

$(memenvlibrary) : $(memenvobjects)
	rm -f $@
	$(ar) -rs $@ $(memenvobjects)

memenv_test : helpers/memenv/memenv_test.o $(memenvobjects) $(libobjects) $(testharness)
	$(cxx) helpers/memenv/memenv_test.o $(memenvobjects) $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

manual_compaction_test: util/manual_compaction_test.o $(libobjects) $(testharness)
	$(cxx) util/manual_compaction_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

rocksdb_shell: tools/shell/shellcontext.o tools/shell/shellstate.o tools/shell/leveldbshell.o tools/shell/dbclientproxy.o tools/shell/shellcontext.h tools/shell/shellstate.h tools/shell/dbclientproxy.h $(libobjects)
	$(cxx) tools/shell/shellcontext.o tools/shell/shellstate.o tools/shell/leveldbshell.o tools/shell/dbclientproxy.o $(libobjects) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

dbclientproxy_test: tools/shell/test/dbclientproxytest.o tools/shell/dbclientproxy.o $(library)
	$(cxx) tools/shell/test/dbclientproxytest.o tools/shell/dbclientproxy.o $(library) $(exec_ldflags) $(exec_ldflags) -o $@  $(ldflags) $(coverageflags)

filelock_test: util/filelock_test.o $(libobjects) $(testharness)
	$(cxx) util/filelock_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

auto_roll_logger_test: util/auto_roll_logger_test.o $(libobjects) $(testharness)
	$(cxx) util/auto_roll_logger_test.o $(libobjects) $(testharness) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

sst_dump: tools/sst_dump.o $(libobjects)
	$(cxx) tools/sst_dump.o $(libobjects) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

ldb: tools/ldb.o $(libobjects)
	$(cxx) tools/ldb.o $(libobjects) $(exec_ldflags) -o $@ $(ldflags) $(coverageflags)

# ---------------------------------------------------------------------------
# jni stuff
# ---------------------------------------------------------------------------

jni_native_sources = ./java/rocksjni/*.cc
java_include = -i$(java_home)/include/ -i$(java_home)/include/linux
rocksdbjnilib = librocksdbjni.so
rocksdb_jar = rocksdbjni.jar

ifeq ($(platform), os_macosx)
rocksdbjnilib = librocksdbjni.jnilib
java_include = -i/system/library/frameworks/javavm.framework/headers/
endif

rocksdbjava:
	opt="-fpic -dndebug -o2" $(make) $(library) -j32
	cd java;$(make) java;
	rm -f ./java/$(rocksdbjnilib)
	$(cxx) $(cxxflags) -i./java/. $(java_include) -shared -fpic -o ./java/$(rocksdbjnilib) $(jni_native_sources) $(libobjects) $(java_ldflags) $(coverageflags)
	cd java;jar -cf $(rocksdb_jar) org/rocksdb/*.class org/rocksdb/util/*.class history*.md $(rocksdbjnilib)

jclean:
	cd java;$(make) clean;
	rm -f $(rocksdbjnilib)

jtest:
	cd java;$(make) sample;$(make) test;

jdb_bench:
	cd java;$(make) db_bench;

# ---------------------------------------------------------------------------
#  	platform-specific compilation
# ---------------------------------------------------------------------------

ifeq ($(platform), ios)
# for ios, create universal object files to be used on both the simulator and
# a device.
platformsroot=/applications/xcode.app/contents/developer/platforms
simulatorroot=$(platformsroot)/iphonesimulator.platform/developer
deviceroot=$(platformsroot)/iphoneos.platform/developer
iosversion=$(shell defaults read $(platformsroot)/iphoneos.platform/version cfbundleshortversionstring)

.cc.o:
	mkdir -p ios-x86/$(dir $@)
	$(cxx) $(cxxflags) -isysroot $(simulatorroot)/sdks/iphonesimulator$(iosversion).sdk -arch i686 -arch x86_64 -c $< -o ios-x86/$@
	mkdir -p ios-arm/$(dir $@)
	xcrun -sdk iphoneos $(cxx) $(cxxflags) -isysroot $(deviceroot)/sdks/iphoneos$(iosversion).sdk -arch armv6 -arch armv7 -arch armv7s -arch arm64 -c $< -o ios-arm/$@
	lipo ios-x86/$@ ios-arm/$@ -create -output $@

.c.o:
	mkdir -p ios-x86/$(dir $@)
	$(cc) $(cflags) -isysroot $(simulatorroot)/sdks/iphonesimulator$(iosversion).sdk -arch i686 -arch x86_64 -c $< -o ios-x86/$@
	mkdir -p ios-arm/$(dir $@)
	xcrun -sdk iphoneos $(cc) $(cflags) -isysroot $(deviceroot)/sdks/iphoneos$(iosversion).sdk -arch armv6 -arch armv7 -arch armv7s -arch arm64 -c $< -o ios-arm/$@
	lipo ios-x86/$@ ios-arm/$@ -create -output $@

else
.cc.o:
	$(cxx) $(cxxflags) -c $< -o $@ $(coverageflags)

.c.o:
	$(cc) $(cflags) -c $< -o $@
endif

# ---------------------------------------------------------------------------
#  	source files dependencies detection
# ---------------------------------------------------------------------------

# add proper dependency support so changing a .h file forces a .cc file to
# rebuild.

# the .d file indicates .cc file's dependencies on .h files. we generate such
# dependency by g++'s -mm option, whose output is a make dependency rule.
# the sed command makes sure the "target" file in the generated .d file has
# the correct path prefix.
%.d: %.cc
	$(cxx) $(cxxflags) $(platform_shared_cflags) -mm $< -o $@
ifeq ($(platform), os_macosx)
	@sed -i '' -e 's,.*:,$*.o:,' $@
else
	@sed -i -e 's,.*:,$*.o:,' $@
endif

depfiles = $(filter-out util/build_version.d,$(sources:.cc=.d))

depend: $(depfiles)

# if the make goal is either "clean" or "format", we shouldn't
# try to import the *.d files.
# todo(kailiu) the unfamiliarity of make's conditions leads to the ugly
# working solution.
ifneq ($(makecmdgoals),clean)
ifneq ($(makecmdgoals),format)
ifneq ($(makecmdgoals),jclean)
ifneq ($(makecmdgoals),jtest)
-include $(depfiles)
endif
endif
endif
endif
