// copyright 2011 google inc. all rights reserved.
// author: sesse@google.com (steinar h. gunderson)
//
// redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * neither the name of google inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// this software is provided by the copyright holders and contributors
// "as is" and any express or implied warranties, including, but not
// limited to, the implied warranties of merchantability and fitness for
// a particular purpose are disclaimed. in no event shall the copyright
// owner or contributors be liable for any direct, indirect, incidental,
// special, exemplary, or consequential damages (including, but not
// limited to, procurement of substitute goods or services; loss of use,
// data, or profits; or business interruption) however caused and on any
// theory of liability, whether in contract, strict liability, or tort
// (including negligence or otherwise) arising in any way out of the use
// of this software, even if advised of the possibility of such damage.
//
// various type stubs for the open-source version of snappy.
//
// this file cannot include config.h, as it is included from snappy.h,
// which is a public header. instead, snappy-stubs-public.h is generated by
// from snappy-stubs-public.h.in at configure time.

#ifndef util_snappy_opensource_snappy_stubs_public_h_
#define util_snappy_opensource_snappy_stubs_public_h_

#if @ac_cv_have_stdint_h@
#include <stdint.h>
#endif

#if @ac_cv_have_stddef_h@
#include <stddef.h>
#endif

#if @ac_cv_have_sys_uio_h@
#include <sys/uio.h>
#endif

#define snappy_major @snappy_major@
#define snappy_minor @snappy_minor@
#define snappy_patchlevel @snappy_patchlevel@
#define snappy_version \
    ((snappy_major << 16) | (snappy_minor << 8) | snappy_patchlevel)

#include <string>

namespace snappy {

#if @ac_cv_have_stdint_h@
typedef int8_t int8;
typedef uint8_t uint8;
typedef int16_t int16;
typedef uint16_t uint16;
typedef int32_t int32;
typedef uint32_t uint32;
typedef int64_t int64;
typedef uint64_t uint64;
#else
typedef signed char int8;
typedef unsigned char uint8;
typedef short int16;
typedef unsigned short uint16;
typedef int int32;
typedef unsigned int uint32;
typedef long long int64;
typedef unsigned long long uint64;
#endif

typedef std::string string;

#define disallow_copy_and_assign(typename) \
  typename(const typename&);               \
  void operator=(const typename&)

#if !@ac_cv_have_sys_uio_h@
// windows does not have an iovec type, yet the concept is universally useful.
// it is simple to define it ourselves, so we put it inside our own namespace.
struct iovec {
	void* iov_base;
	size_t iov_len;
};
#endif

}  // namespace snappy

#endif  // util_snappy_opensource_snappy_stubs_public_h_
