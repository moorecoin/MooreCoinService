//------------------------------------------------------------------------------
/*
    this file is part of rippled: https://github.com/ripple/rippled
    copyright (c) 2012, 2013 ripple labs inc.

    permission to use, copy, modify, and/or distribute this software for any
    purpose  with  or without fee is hereby granted, provided that the above
    copyright notice and this permission notice appear in all copies.

    the  software is provided "as is" and the author disclaims all warranties
    with  regard  to  this  software  including  all  implied  warranties  of
    merchantability  and  fitness. in no event shall the author be liable for
    any  special ,  direct, indirect, or consequential damages or any damages
    whatsoever  resulting  from  loss  of use, data or profits, whether in an
    action  of  contract, negligence or other tortious action, arising out of
    or in connection with the use or performance of this software.
*/
//==============================================================================

#ifndef ripple_overlay_message_h_included
#define ripple_overlay_message_h_included

#include "ripple.pb.h"
#include <boost/asio/buffer.hpp>
#include <boost/asio/buffers_iterator.hpp>
#include <algorithm>
#include <cstdint>
#include <iterator>
#include <memory>
#include <beast/cxx14/type_traits.h> // <type_traits>

namespace ripple {

// vfalco note if we forward declare message and write out shared_ptr
//             instead of using the in-class typedef, we can remove the entire
//             ripple.pb.h from the main headers.
//

// packaging of messages into length/type-prepended buffers
// ready for transmission.
//
// message implements simple "packing" of protocol buffers messages into
// a string prepended by a header specifying the message length.
// messagetype should be a message class generated by the protobuf compiler.
//

class message : public std::enable_shared_from_this <message>
{
public:
    typedef std::shared_ptr<message> pointer;

public:
    /** number of bytes in a message header.
    */
    static size_t const kheaderbytes = 6;

    message (::google::protobuf::message const& message, int type);

    /** retrieve the packed message data. */
    std::vector <uint8_t> const&
    getbuffer () const
    {
        return mbuffer;
    }

    /** determine bytewise equality. */
    bool operator == (message const& other) const;

    /** calculate the length of a packed message. */
    /** @{ */
    static unsigned getlength (std::vector <uint8_t> const& buf);

    template <class fwditer>
    static
    std::enable_if_t<std::is_same<typename
        fwditer::value_type, std::uint8_t>::value, std::size_t>
    size (fwditer first, fwditer last)
    {
        if (std::distance(first, last) <
                message::kheaderbytes)
            return 0;
        std::size_t n;
        n  = std::size_t{*first++} << 24;
        n += std::size_t{*first++} << 16;
        n += std::size_t{*first++} <<  8;
        n += std::size_t{*first};
        return n;
    }

    template <class buffersequence>
    static
    std::size_t
    size (buffersequence const& buffers)
    {
        return size(buffers_begin(buffers),
            buffers_end(buffers));
    }
    /** @} */

    /** determine the type of a packed message. */
    /** @{ */
    static int gettype (std::vector <uint8_t> const& buf);

    template <class fwditer>
    static
    std::enable_if_t<std::is_same<typename
        fwditer::value_type, std::uint8_t>::value, int>
    type (fwditer first, fwditer last)
    {
        if (std::distance(first, last) <
                message::kheaderbytes)
            return 0;
        return (int{*std::next(first, 4)} << 8) |
            *std::next(first, 5);
    }

    template <class buffersequence>
    static
    int
    type (buffersequence const& buffers)
    {
        return type(buffers_begin(buffers),
            buffers_end(buffers));
    }
    /** @} */

private:
    template <class buffersequence, class value = std::uint8_t>
    static
    boost::asio::buffers_iterator<buffersequence, value>
    buffers_begin (buffersequence const& buffers)
    {
        return boost::asio::buffers_iterator<
            buffersequence, value>::begin (buffers);
    }

    template <class buffersequence, class value = std::uint8_t>
    static
    boost::asio::buffers_iterator<buffersequence, value>
    buffers_end (buffersequence const& buffers)
    {
        return boost::asio::buffers_iterator<
            buffersequence, value>::end (buffers);
    }

        // encodes the size and type into a header at the beginning of buf
    //
    void encodeheader (unsigned size, int type);

    std::vector <uint8_t> mbuffer;
};

}

#endif


