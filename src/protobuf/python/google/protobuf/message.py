# protocol buffers - google's data interchange format
# copyright 2008 google inc.  all rights reserved.
# http://code.google.com/p/protobuf/
#
# redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#     * redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#     * neither the name of google inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# this software is provided by the copyright holders and contributors
# "as is" and any express or implied warranties, including, but not
# limited to, the implied warranties of merchantability and fitness for
# a particular purpose are disclaimed. in no event shall the copyright
# owner or contributors be liable for any direct, indirect, incidental,
# special, exemplary, or consequential damages (including, but not
# limited to, procurement of substitute goods or services; loss of use,
# data, or profits; or business interruption) however caused and on any
# theory of liability, whether in contract, strict liability, or tort
# (including negligence or otherwise) arising in any way out of the use
# of this software, even if advised of the possibility of such damage.

# todo(robinson): we should just make these methods all "pure-virtual" and move
# all implementation out, into reflection.py for now.


"""contains an abstract base class for protocol messages."""

__author__ = 'robinson@google.com (will robinson)'


class error(exception): pass
class decodeerror(error): pass
class encodeerror(error): pass


class message(object):

  """abstract base class for protocol messages.

  protocol message classes are almost always generated by the protocol
  compiler.  these generated types subclass message and implement the methods
  shown below.

  todo(robinson): link to an html document here.

  todo(robinson): document that instances of this class will also
  have an extensions attribute with __getitem__ and __setitem__.
  again, not sure how to best convey this.

  todo(robinson): document that the class must also have a static
    registerextension(extension_field) method.
    not sure how to best express at this point.
  """

  # todo(robinson): document these fields and methods.

  __slots__ = []

  descriptor = none

  def __deepcopy__(self, memo=none):
    clone = type(self)()
    clone.mergefrom(self)
    return clone

  def __eq__(self, other_msg):
    """recursively compares two messages by value and structure."""
    raise notimplementederror

  def __ne__(self, other_msg):
    # can't just say self != other_msg, since that would infinitely recurse. :)
    return not self == other_msg

  def __hash__(self):
    raise typeerror('unhashable object')

  def __str__(self):
    """outputs a human-readable representation of the message."""
    raise notimplementederror

  def __unicode__(self):
    """outputs a human-readable representation of the message."""
    raise notimplementederror

  def mergefrom(self, other_msg):
    """merges the contents of the specified message into current message.

    this method merges the contents of the specified message into the current
    message. singular fields that are set in the specified message overwrite
    the corresponding fields in the current message. repeated fields are
    appended. singular sub-messages and groups are recursively merged.

    args:
      other_msg: message to merge into the current message.
    """
    raise notimplementederror

  def copyfrom(self, other_msg):
    """copies the content of the specified message into the current message.

    the method clears the current message and then merges the specified
    message using mergefrom.

    args:
      other_msg: message to copy into the current one.
    """
    if self is other_msg:
      return
    self.clear()
    self.mergefrom(other_msg)

  def clear(self):
    """clears all data that was set in the message."""
    raise notimplementederror

  def setinparent(self):
    """mark this as present in the parent.

    this normally happens automatically when you assign a field of a
    sub-message, but sometimes you want to make the sub-message
    present while keeping it empty.  if you find yourself using this,
    you may want to reconsider your design."""
    raise notimplementederror

  def isinitialized(self):
    """checks if the message is initialized.

    returns:
      the method returns true if the message is initialized (i.e. all of its
      required fields are set).
    """
    raise notimplementederror

  # todo(robinson): mergefromstring() should probably return none and be
  # implemented in terms of a helper that returns the # of bytes read.  our
  # deserialization routines would use the helper when recursively
  # deserializing, but the end user would almost always just want the no-return
  # mergefromstring().

  def mergefromstring(self, serialized):
    """merges serialized protocol buffer data into this message.

    when we find a field in |serialized| that is already present
    in this message:
      - if it's a "repeated" field, we append to the end of our list.
      - else, if it's a scalar, we overwrite our field.
      - else, (it's a nonrepeated composite), we recursively merge
        into the existing composite.

    todo(robinson): document handling of unknown fields.

    args:
      serialized: any object that allows us to call buffer(serialized)
        to access a string of bytes using the buffer interface.

    todo(robinson): when we switch to a helper, this will return none.

    returns:
      the number of bytes read from |serialized|.
      for non-group messages, this will always be len(serialized),
      but for messages which are actually groups, this will
      generally be less than len(serialized), since we must
      stop when we reach an end_group tag.  note that if
      we *do* stop because of an end_group tag, the number
      of bytes returned does not include the bytes
      for the end_group tag information.
    """
    raise notimplementederror

  def parsefromstring(self, serialized):
    """like mergefromstring(), except we clear the object first."""
    self.clear()
    self.mergefromstring(serialized)

  def serializetostring(self):
    """serializes the protocol message to a binary string.

    returns:
      a binary string representation of the message if all of the required
      fields in the message are set (i.e. the message is initialized).

    raises:
      message.encodeerror if the message isn't initialized.
    """
    raise notimplementederror

  def serializepartialtostring(self):
    """serializes the protocol message to a binary string.

    this method is similar to serializetostring but doesn't check if the
    message is initialized.

    returns:
      a string representation of the partial message.
    """
    raise notimplementederror

  # todo(robinson): decide whether we like these better
  # than auto-generated has_foo() and clear_foo() methods
  # on the instances themselves.  this way is less consistent
  # with c++, but it makes reflection-type access easier and
  # reduces the number of magically autogenerated things.
  #
  # todo(robinson): be sure to document (and test) exactly
  # which field names are accepted here.  are we case-sensitive?
  # what do we do with fields that share names with python keywords
  # like 'lambda' and 'yield'?
  #
  # nnorwitz says:
  # """
  # typically (in python), an underscore is appended to names that are
  # keywords. so they would become lambda_ or yield_.
  # """
  def listfields(self):
    """returns a list of (fielddescriptor, value) tuples for all
    fields in the message which are not empty.  a singular field is non-empty
    if hasfield() would return true, and a repeated field is non-empty if
    it contains at least one element.  the fields are ordered by field
    number"""
    raise notimplementederror

  def hasfield(self, field_name):
    """checks if a certain field is set for the message. note if the
    field_name is not defined in the message descriptor, valueerror will be
    raised."""
    raise notimplementederror

  def clearfield(self, field_name):
    raise notimplementederror

  def hasextension(self, extension_handle):
    raise notimplementederror

  def clearextension(self, extension_handle):
    raise notimplementederror

  def bytesize(self):
    """returns the serialized size of this message.
    recursively calls bytesize() on all contained messages.
    """
    raise notimplementederror

  def _setlistener(self, message_listener):
    """internal method used by the protocol message implementation.
    clients should not call this directly.

    sets a listener that this message will call on certain state transitions.

    the purpose of this method is to register back-edges from children to
    parents at runtime, for the purpose of setting "has" bits and
    byte-size-dirty bits in the parent and ancestor objects whenever a child or
    descendant object is modified.

    if the client wants to disconnect this message from the object tree, she
    explicitly sets callback to none.

    if message_listener is none, unregisters any existing listener.  otherwise,
    message_listener must implement the messagelistener interface in
    internal/message_listener.py, and we discard any listener registered
    via a previous _setlistener() call.
    """
    raise notimplementederror

  def __getstate__(self):
    """support the pickle protocol."""
    return dict(serialized=self.serializepartialtostring())

  def __setstate__(self, state):
    """support the pickle protocol."""
    self.__init__()
    self.parsefromstring(state['serialized'])
