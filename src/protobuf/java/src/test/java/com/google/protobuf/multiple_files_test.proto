// protocol buffers - google's data interchange format
// copyright 2008 google inc.  all rights reserved.
// http://code.google.com/p/protobuf/
//
// redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * neither the name of google inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// this software is provided by the copyright holders and contributors
// "as is" and any express or implied warranties, including, but not
// limited to, the implied warranties of merchantability and fitness for
// a particular purpose are disclaimed. in no event shall the copyright
// owner or contributors be liable for any direct, indirect, incidental,
// special, exemplary, or consequential damages (including, but not
// limited to, procurement of substitute goods or services; loss of use,
// data, or profits; or business interruption) however caused and on any
// theory of liability, whether in contract, strict liability, or tort
// (including negligence or otherwise) arising in any way out of the use
// of this software, even if advised of the possibility of such damage.

// author: kenton@google.com (kenton varda)
//
// a proto file which tests the java_multiple_files option.


// some generic_services option(s) added automatically.
// see:  http://go/proto2-generic-services-default
option java_generic_services = true;   // auto-added

import "google/protobuf/unittest.proto";

package protobuf_unittest;

option java_multiple_files = true;
option java_outer_classname = "multiplefilestestproto";

message messagewithnoouter {
  message nestedmessage {
    optional int32 i = 1;
  }
  enum nestedenum {
    baz = 3;
  }
  optional nestedmessage nested = 1;
  repeated testalltypes foreign = 2;
  optional nestedenum nested_enum = 3;
  optional enumwithnoouter foreign_enum = 4;
}

enum enumwithnoouter {
  foo = 1;
  bar = 2;
}

service servicewithnoouter {
  rpc foo(messagewithnoouter) returns(testalltypes);
}

extend testallextensions {
  optional int32 extension_with_outer = 1234567;
}
