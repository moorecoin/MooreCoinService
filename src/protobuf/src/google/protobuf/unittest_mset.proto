// protocol buffers - google's data interchange format
// copyright 2008 google inc.  all rights reserved.
// http://code.google.com/p/protobuf/
//
// redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * neither the name of google inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// this software is provided by the copyright holders and contributors
// "as is" and any express or implied warranties, including, but not
// limited to, the implied warranties of merchantability and fitness for
// a particular purpose are disclaimed. in no event shall the copyright
// owner or contributors be liable for any direct, indirect, incidental,
// special, exemplary, or consequential damages (including, but not
// limited to, procurement of substitute goods or services; loss of use,
// data, or profits; or business interruption) however caused and on any
// theory of liability, whether in contract, strict liability, or tort
// (including negligence or otherwise) arising in any way out of the use
// of this software, even if advised of the possibility of such damage.

// author: kenton@google.com (kenton varda)
//  based on original protocol buffers design by
//  sanjay ghemawat, jeff dean, and others.
//
// this file contains messages for testing message_set_wire_format.

package protobuf_unittest;

option optimize_for = speed;

// a message with message_set_wire_format.
message testmessageset {
  option message_set_wire_format = true;
  extensions 4 to max;
}

message testmessagesetcontainer {
  optional testmessageset message_set = 1;
}

message testmessagesetextension1 {
  extend testmessageset {
    optional testmessagesetextension1 message_set_extension = 1545008;
  }
  optional int32 i = 15;
}

message testmessagesetextension2 {
  extend testmessageset {
    optional testmessagesetextension2 message_set_extension = 1547769;
  }
  optional string str = 25;
}

// messageset wire format is equivalent to this.
message rawmessageset {
  repeated group item = 1 {
    required int32 type_id = 2;
    required bytes message = 3;
  }
}

