// generated by the protocol buffer compiler.  do not edit!
// source: google/protobuf/descriptor.proto

#define internal_suppress_protobuf_field_deprecation
#include "google/protobuf/descriptor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace protobuf {

namespace {

const ::google::protobuf::descriptor* filedescriptorset_descriptor_ = null;
const ::google::protobuf::internal::generatedmessagereflection*
  filedescriptorset_reflection_ = null;
const ::google::protobuf::descriptor* filedescriptorproto_descriptor_ = null;
const ::google::protobuf::internal::generatedmessagereflection*
  filedescriptorproto_reflection_ = null;
const ::google::protobuf::descriptor* descriptorproto_descriptor_ = null;
const ::google::protobuf::internal::generatedmessagereflection*
  descriptorproto_reflection_ = null;
const ::google::protobuf::descriptor* descriptorproto_extensionrange_descriptor_ = null;
const ::google::protobuf::internal::generatedmessagereflection*
  descriptorproto_extensionrange_reflection_ = null;
const ::google::protobuf::descriptor* fielddescriptorproto_descriptor_ = null;
const ::google::protobuf::internal::generatedmessagereflection*
  fielddescriptorproto_reflection_ = null;
const ::google::protobuf::enumdescriptor* fielddescriptorproto_type_descriptor_ = null;
const ::google::protobuf::enumdescriptor* fielddescriptorproto_label_descriptor_ = null;
const ::google::protobuf::descriptor* enumdescriptorproto_descriptor_ = null;
const ::google::protobuf::internal::generatedmessagereflection*
  enumdescriptorproto_reflection_ = null;
const ::google::protobuf::descriptor* enumvaluedescriptorproto_descriptor_ = null;
const ::google::protobuf::internal::generatedmessagereflection*
  enumvaluedescriptorproto_reflection_ = null;
const ::google::protobuf::descriptor* servicedescriptorproto_descriptor_ = null;
const ::google::protobuf::internal::generatedmessagereflection*
  servicedescriptorproto_reflection_ = null;
const ::google::protobuf::descriptor* methoddescriptorproto_descriptor_ = null;
const ::google::protobuf::internal::generatedmessagereflection*
  methoddescriptorproto_reflection_ = null;
const ::google::protobuf::descriptor* fileoptions_descriptor_ = null;
const ::google::protobuf::internal::generatedmessagereflection*
  fileoptions_reflection_ = null;
const ::google::protobuf::enumdescriptor* fileoptions_optimizemode_descriptor_ = null;
const ::google::protobuf::descriptor* messageoptions_descriptor_ = null;
const ::google::protobuf::internal::generatedmessagereflection*
  messageoptions_reflection_ = null;
const ::google::protobuf::descriptor* fieldoptions_descriptor_ = null;
const ::google::protobuf::internal::generatedmessagereflection*
  fieldoptions_reflection_ = null;
const ::google::protobuf::enumdescriptor* fieldoptions_ctype_descriptor_ = null;
const ::google::protobuf::descriptor* enumoptions_descriptor_ = null;
const ::google::protobuf::internal::generatedmessagereflection*
  enumoptions_reflection_ = null;
const ::google::protobuf::descriptor* enumvalueoptions_descriptor_ = null;
const ::google::protobuf::internal::generatedmessagereflection*
  enumvalueoptions_reflection_ = null;
const ::google::protobuf::descriptor* serviceoptions_descriptor_ = null;
const ::google::protobuf::internal::generatedmessagereflection*
  serviceoptions_reflection_ = null;
const ::google::protobuf::descriptor* methodoptions_descriptor_ = null;
const ::google::protobuf::internal::generatedmessagereflection*
  methodoptions_reflection_ = null;
const ::google::protobuf::descriptor* uninterpretedoption_descriptor_ = null;
const ::google::protobuf::internal::generatedmessagereflection*
  uninterpretedoption_reflection_ = null;
const ::google::protobuf::descriptor* uninterpretedoption_namepart_descriptor_ = null;
const ::google::protobuf::internal::generatedmessagereflection*
  uninterpretedoption_namepart_reflection_ = null;
const ::google::protobuf::descriptor* sourcecodeinfo_descriptor_ = null;
const ::google::protobuf::internal::generatedmessagereflection*
  sourcecodeinfo_reflection_ = null;
const ::google::protobuf::descriptor* sourcecodeinfo_location_descriptor_ = null;
const ::google::protobuf::internal::generatedmessagereflection*
  sourcecodeinfo_location_reflection_ = null;

}  // namespace


void protobuf_assigndesc_google_2fprotobuf_2fdescriptor_2eproto() {
  protobuf_adddesc_google_2fprotobuf_2fdescriptor_2eproto();
  const ::google::protobuf::filedescriptor* file =
    ::google::protobuf::descriptorpool::generated_pool()->findfilebyname(
      "google/protobuf/descriptor.proto");
  google_check(file != null);
  filedescriptorset_descriptor_ = file->message_type(0);
  static const int filedescriptorset_offsets_[1] = {
    google_protobuf_generated_message_field_offset(filedescriptorset, file_),
  };
  filedescriptorset_reflection_ =
    new ::google::protobuf::internal::generatedmessagereflection(
      filedescriptorset_descriptor_,
      filedescriptorset::default_instance_,
      filedescriptorset_offsets_,
      google_protobuf_generated_message_field_offset(filedescriptorset, _has_bits_[0]),
      google_protobuf_generated_message_field_offset(filedescriptorset, _unknown_fields_),
      -1,
      ::google::protobuf::descriptorpool::generated_pool(),
      ::google::protobuf::messagefactory::generated_factory(),
      sizeof(filedescriptorset));
  filedescriptorproto_descriptor_ = file->message_type(1);
  static const int filedescriptorproto_offsets_[11] = {
    google_protobuf_generated_message_field_offset(filedescriptorproto, name_),
    google_protobuf_generated_message_field_offset(filedescriptorproto, package_),
    google_protobuf_generated_message_field_offset(filedescriptorproto, dependency_),
    google_protobuf_generated_message_field_offset(filedescriptorproto, public_dependency_),
    google_protobuf_generated_message_field_offset(filedescriptorproto, weak_dependency_),
    google_protobuf_generated_message_field_offset(filedescriptorproto, message_type_),
    google_protobuf_generated_message_field_offset(filedescriptorproto, enum_type_),
    google_protobuf_generated_message_field_offset(filedescriptorproto, service_),
    google_protobuf_generated_message_field_offset(filedescriptorproto, extension_),
    google_protobuf_generated_message_field_offset(filedescriptorproto, options_),
    google_protobuf_generated_message_field_offset(filedescriptorproto, source_code_info_),
  };
  filedescriptorproto_reflection_ =
    new ::google::protobuf::internal::generatedmessagereflection(
      filedescriptorproto_descriptor_,
      filedescriptorproto::default_instance_,
      filedescriptorproto_offsets_,
      google_protobuf_generated_message_field_offset(filedescriptorproto, _has_bits_[0]),
      google_protobuf_generated_message_field_offset(filedescriptorproto, _unknown_fields_),
      -1,
      ::google::protobuf::descriptorpool::generated_pool(),
      ::google::protobuf::messagefactory::generated_factory(),
      sizeof(filedescriptorproto));
  descriptorproto_descriptor_ = file->message_type(2);
  static const int descriptorproto_offsets_[7] = {
    google_protobuf_generated_message_field_offset(descriptorproto, name_),
    google_protobuf_generated_message_field_offset(descriptorproto, field_),
    google_protobuf_generated_message_field_offset(descriptorproto, extension_),
    google_protobuf_generated_message_field_offset(descriptorproto, nested_type_),
    google_protobuf_generated_message_field_offset(descriptorproto, enum_type_),
    google_protobuf_generated_message_field_offset(descriptorproto, extension_range_),
    google_protobuf_generated_message_field_offset(descriptorproto, options_),
  };
  descriptorproto_reflection_ =
    new ::google::protobuf::internal::generatedmessagereflection(
      descriptorproto_descriptor_,
      descriptorproto::default_instance_,
      descriptorproto_offsets_,
      google_protobuf_generated_message_field_offset(descriptorproto, _has_bits_[0]),
      google_protobuf_generated_message_field_offset(descriptorproto, _unknown_fields_),
      -1,
      ::google::protobuf::descriptorpool::generated_pool(),
      ::google::protobuf::messagefactory::generated_factory(),
      sizeof(descriptorproto));
  descriptorproto_extensionrange_descriptor_ = descriptorproto_descriptor_->nested_type(0);
  static const int descriptorproto_extensionrange_offsets_[2] = {
    google_protobuf_generated_message_field_offset(descriptorproto_extensionrange, start_),
    google_protobuf_generated_message_field_offset(descriptorproto_extensionrange, end_),
  };
  descriptorproto_extensionrange_reflection_ =
    new ::google::protobuf::internal::generatedmessagereflection(
      descriptorproto_extensionrange_descriptor_,
      descriptorproto_extensionrange::default_instance_,
      descriptorproto_extensionrange_offsets_,
      google_protobuf_generated_message_field_offset(descriptorproto_extensionrange, _has_bits_[0]),
      google_protobuf_generated_message_field_offset(descriptorproto_extensionrange, _unknown_fields_),
      -1,
      ::google::protobuf::descriptorpool::generated_pool(),
      ::google::protobuf::messagefactory::generated_factory(),
      sizeof(descriptorproto_extensionrange));
  fielddescriptorproto_descriptor_ = file->message_type(3);
  static const int fielddescriptorproto_offsets_[8] = {
    google_protobuf_generated_message_field_offset(fielddescriptorproto, name_),
    google_protobuf_generated_message_field_offset(fielddescriptorproto, number_),
    google_protobuf_generated_message_field_offset(fielddescriptorproto, label_),
    google_protobuf_generated_message_field_offset(fielddescriptorproto, type_),
    google_protobuf_generated_message_field_offset(fielddescriptorproto, type_name_),
    google_protobuf_generated_message_field_offset(fielddescriptorproto, extendee_),
    google_protobuf_generated_message_field_offset(fielddescriptorproto, default_value_),
    google_protobuf_generated_message_field_offset(fielddescriptorproto, options_),
  };
  fielddescriptorproto_reflection_ =
    new ::google::protobuf::internal::generatedmessagereflection(
      fielddescriptorproto_descriptor_,
      fielddescriptorproto::default_instance_,
      fielddescriptorproto_offsets_,
      google_protobuf_generated_message_field_offset(fielddescriptorproto, _has_bits_[0]),
      google_protobuf_generated_message_field_offset(fielddescriptorproto, _unknown_fields_),
      -1,
      ::google::protobuf::descriptorpool::generated_pool(),
      ::google::protobuf::messagefactory::generated_factory(),
      sizeof(fielddescriptorproto));
  fielddescriptorproto_type_descriptor_ = fielddescriptorproto_descriptor_->enum_type(0);
  fielddescriptorproto_label_descriptor_ = fielddescriptorproto_descriptor_->enum_type(1);
  enumdescriptorproto_descriptor_ = file->message_type(4);
  static const int enumdescriptorproto_offsets_[3] = {
    google_protobuf_generated_message_field_offset(enumdescriptorproto, name_),
    google_protobuf_generated_message_field_offset(enumdescriptorproto, value_),
    google_protobuf_generated_message_field_offset(enumdescriptorproto, options_),
  };
  enumdescriptorproto_reflection_ =
    new ::google::protobuf::internal::generatedmessagereflection(
      enumdescriptorproto_descriptor_,
      enumdescriptorproto::default_instance_,
      enumdescriptorproto_offsets_,
      google_protobuf_generated_message_field_offset(enumdescriptorproto, _has_bits_[0]),
      google_protobuf_generated_message_field_offset(enumdescriptorproto, _unknown_fields_),
      -1,
      ::google::protobuf::descriptorpool::generated_pool(),
      ::google::protobuf::messagefactory::generated_factory(),
      sizeof(enumdescriptorproto));
  enumvaluedescriptorproto_descriptor_ = file->message_type(5);
  static const int enumvaluedescriptorproto_offsets_[3] = {
    google_protobuf_generated_message_field_offset(enumvaluedescriptorproto, name_),
    google_protobuf_generated_message_field_offset(enumvaluedescriptorproto, number_),
    google_protobuf_generated_message_field_offset(enumvaluedescriptorproto, options_),
  };
  enumvaluedescriptorproto_reflection_ =
    new ::google::protobuf::internal::generatedmessagereflection(
      enumvaluedescriptorproto_descriptor_,
      enumvaluedescriptorproto::default_instance_,
      enumvaluedescriptorproto_offsets_,
      google_protobuf_generated_message_field_offset(enumvaluedescriptorproto, _has_bits_[0]),
      google_protobuf_generated_message_field_offset(enumvaluedescriptorproto, _unknown_fields_),
      -1,
      ::google::protobuf::descriptorpool::generated_pool(),
      ::google::protobuf::messagefactory::generated_factory(),
      sizeof(enumvaluedescriptorproto));
  servicedescriptorproto_descriptor_ = file->message_type(6);
  static const int servicedescriptorproto_offsets_[3] = {
    google_protobuf_generated_message_field_offset(servicedescriptorproto, name_),
    google_protobuf_generated_message_field_offset(servicedescriptorproto, method_),
    google_protobuf_generated_message_field_offset(servicedescriptorproto, options_),
  };
  servicedescriptorproto_reflection_ =
    new ::google::protobuf::internal::generatedmessagereflection(
      servicedescriptorproto_descriptor_,
      servicedescriptorproto::default_instance_,
      servicedescriptorproto_offsets_,
      google_protobuf_generated_message_field_offset(servicedescriptorproto, _has_bits_[0]),
      google_protobuf_generated_message_field_offset(servicedescriptorproto, _unknown_fields_),
      -1,
      ::google::protobuf::descriptorpool::generated_pool(),
      ::google::protobuf::messagefactory::generated_factory(),
      sizeof(servicedescriptorproto));
  methoddescriptorproto_descriptor_ = file->message_type(7);
  static const int methoddescriptorproto_offsets_[4] = {
    google_protobuf_generated_message_field_offset(methoddescriptorproto, name_),
    google_protobuf_generated_message_field_offset(methoddescriptorproto, input_type_),
    google_protobuf_generated_message_field_offset(methoddescriptorproto, output_type_),
    google_protobuf_generated_message_field_offset(methoddescriptorproto, options_),
  };
  methoddescriptorproto_reflection_ =
    new ::google::protobuf::internal::generatedmessagereflection(
      methoddescriptorproto_descriptor_,
      methoddescriptorproto::default_instance_,
      methoddescriptorproto_offsets_,
      google_protobuf_generated_message_field_offset(methoddescriptorproto, _has_bits_[0]),
      google_protobuf_generated_message_field_offset(methoddescriptorproto, _unknown_fields_),
      -1,
      ::google::protobuf::descriptorpool::generated_pool(),
      ::google::protobuf::messagefactory::generated_factory(),
      sizeof(methoddescriptorproto));
  fileoptions_descriptor_ = file->message_type(8);
  static const int fileoptions_offsets_[10] = {
    google_protobuf_generated_message_field_offset(fileoptions, java_package_),
    google_protobuf_generated_message_field_offset(fileoptions, java_outer_classname_),
    google_protobuf_generated_message_field_offset(fileoptions, java_multiple_files_),
    google_protobuf_generated_message_field_offset(fileoptions, java_generate_equals_and_hash_),
    google_protobuf_generated_message_field_offset(fileoptions, optimize_for_),
    google_protobuf_generated_message_field_offset(fileoptions, go_package_),
    google_protobuf_generated_message_field_offset(fileoptions, cc_generic_services_),
    google_protobuf_generated_message_field_offset(fileoptions, java_generic_services_),
    google_protobuf_generated_message_field_offset(fileoptions, py_generic_services_),
    google_protobuf_generated_message_field_offset(fileoptions, uninterpreted_option_),
  };
  fileoptions_reflection_ =
    new ::google::protobuf::internal::generatedmessagereflection(
      fileoptions_descriptor_,
      fileoptions::default_instance_,
      fileoptions_offsets_,
      google_protobuf_generated_message_field_offset(fileoptions, _has_bits_[0]),
      google_protobuf_generated_message_field_offset(fileoptions, _unknown_fields_),
      google_protobuf_generated_message_field_offset(fileoptions, _extensions_),
      ::google::protobuf::descriptorpool::generated_pool(),
      ::google::protobuf::messagefactory::generated_factory(),
      sizeof(fileoptions));
  fileoptions_optimizemode_descriptor_ = fileoptions_descriptor_->enum_type(0);
  messageoptions_descriptor_ = file->message_type(9);
  static const int messageoptions_offsets_[3] = {
    google_protobuf_generated_message_field_offset(messageoptions, message_set_wire_format_),
    google_protobuf_generated_message_field_offset(messageoptions, no_standard_descriptor_accessor_),
    google_protobuf_generated_message_field_offset(messageoptions, uninterpreted_option_),
  };
  messageoptions_reflection_ =
    new ::google::protobuf::internal::generatedmessagereflection(
      messageoptions_descriptor_,
      messageoptions::default_instance_,
      messageoptions_offsets_,
      google_protobuf_generated_message_field_offset(messageoptions, _has_bits_[0]),
      google_protobuf_generated_message_field_offset(messageoptions, _unknown_fields_),
      google_protobuf_generated_message_field_offset(messageoptions, _extensions_),
      ::google::protobuf::descriptorpool::generated_pool(),
      ::google::protobuf::messagefactory::generated_factory(),
      sizeof(messageoptions));
  fieldoptions_descriptor_ = file->message_type(10);
  static const int fieldoptions_offsets_[7] = {
    google_protobuf_generated_message_field_offset(fieldoptions, ctype_),
    google_protobuf_generated_message_field_offset(fieldoptions, packed_),
    google_protobuf_generated_message_field_offset(fieldoptions, lazy_),
    google_protobuf_generated_message_field_offset(fieldoptions, deprecated_),
    google_protobuf_generated_message_field_offset(fieldoptions, experimental_map_key_),
    google_protobuf_generated_message_field_offset(fieldoptions, weak_),
    google_protobuf_generated_message_field_offset(fieldoptions, uninterpreted_option_),
  };
  fieldoptions_reflection_ =
    new ::google::protobuf::internal::generatedmessagereflection(
      fieldoptions_descriptor_,
      fieldoptions::default_instance_,
      fieldoptions_offsets_,
      google_protobuf_generated_message_field_offset(fieldoptions, _has_bits_[0]),
      google_protobuf_generated_message_field_offset(fieldoptions, _unknown_fields_),
      google_protobuf_generated_message_field_offset(fieldoptions, _extensions_),
      ::google::protobuf::descriptorpool::generated_pool(),
      ::google::protobuf::messagefactory::generated_factory(),
      sizeof(fieldoptions));
  fieldoptions_ctype_descriptor_ = fieldoptions_descriptor_->enum_type(0);
  enumoptions_descriptor_ = file->message_type(11);
  static const int enumoptions_offsets_[2] = {
    google_protobuf_generated_message_field_offset(enumoptions, allow_alias_),
    google_protobuf_generated_message_field_offset(enumoptions, uninterpreted_option_),
  };
  enumoptions_reflection_ =
    new ::google::protobuf::internal::generatedmessagereflection(
      enumoptions_descriptor_,
      enumoptions::default_instance_,
      enumoptions_offsets_,
      google_protobuf_generated_message_field_offset(enumoptions, _has_bits_[0]),
      google_protobuf_generated_message_field_offset(enumoptions, _unknown_fields_),
      google_protobuf_generated_message_field_offset(enumoptions, _extensions_),
      ::google::protobuf::descriptorpool::generated_pool(),
      ::google::protobuf::messagefactory::generated_factory(),
      sizeof(enumoptions));
  enumvalueoptions_descriptor_ = file->message_type(12);
  static const int enumvalueoptions_offsets_[1] = {
    google_protobuf_generated_message_field_offset(enumvalueoptions, uninterpreted_option_),
  };
  enumvalueoptions_reflection_ =
    new ::google::protobuf::internal::generatedmessagereflection(
      enumvalueoptions_descriptor_,
      enumvalueoptions::default_instance_,
      enumvalueoptions_offsets_,
      google_protobuf_generated_message_field_offset(enumvalueoptions, _has_bits_[0]),
      google_protobuf_generated_message_field_offset(enumvalueoptions, _unknown_fields_),
      google_protobuf_generated_message_field_offset(enumvalueoptions, _extensions_),
      ::google::protobuf::descriptorpool::generated_pool(),
      ::google::protobuf::messagefactory::generated_factory(),
      sizeof(enumvalueoptions));
  serviceoptions_descriptor_ = file->message_type(13);
  static const int serviceoptions_offsets_[1] = {
    google_protobuf_generated_message_field_offset(serviceoptions, uninterpreted_option_),
  };
  serviceoptions_reflection_ =
    new ::google::protobuf::internal::generatedmessagereflection(
      serviceoptions_descriptor_,
      serviceoptions::default_instance_,
      serviceoptions_offsets_,
      google_protobuf_generated_message_field_offset(serviceoptions, _has_bits_[0]),
      google_protobuf_generated_message_field_offset(serviceoptions, _unknown_fields_),
      google_protobuf_generated_message_field_offset(serviceoptions, _extensions_),
      ::google::protobuf::descriptorpool::generated_pool(),
      ::google::protobuf::messagefactory::generated_factory(),
      sizeof(serviceoptions));
  methodoptions_descriptor_ = file->message_type(14);
  static const int methodoptions_offsets_[1] = {
    google_protobuf_generated_message_field_offset(methodoptions, uninterpreted_option_),
  };
  methodoptions_reflection_ =
    new ::google::protobuf::internal::generatedmessagereflection(
      methodoptions_descriptor_,
      methodoptions::default_instance_,
      methodoptions_offsets_,
      google_protobuf_generated_message_field_offset(methodoptions, _has_bits_[0]),
      google_protobuf_generated_message_field_offset(methodoptions, _unknown_fields_),
      google_protobuf_generated_message_field_offset(methodoptions, _extensions_),
      ::google::protobuf::descriptorpool::generated_pool(),
      ::google::protobuf::messagefactory::generated_factory(),
      sizeof(methodoptions));
  uninterpretedoption_descriptor_ = file->message_type(15);
  static const int uninterpretedoption_offsets_[7] = {
    google_protobuf_generated_message_field_offset(uninterpretedoption, name_),
    google_protobuf_generated_message_field_offset(uninterpretedoption, identifier_value_),
    google_protobuf_generated_message_field_offset(uninterpretedoption, positive_int_value_),
    google_protobuf_generated_message_field_offset(uninterpretedoption, negative_int_value_),
    google_protobuf_generated_message_field_offset(uninterpretedoption, double_value_),
    google_protobuf_generated_message_field_offset(uninterpretedoption, string_value_),
    google_protobuf_generated_message_field_offset(uninterpretedoption, aggregate_value_),
  };
  uninterpretedoption_reflection_ =
    new ::google::protobuf::internal::generatedmessagereflection(
      uninterpretedoption_descriptor_,
      uninterpretedoption::default_instance_,
      uninterpretedoption_offsets_,
      google_protobuf_generated_message_field_offset(uninterpretedoption, _has_bits_[0]),
      google_protobuf_generated_message_field_offset(uninterpretedoption, _unknown_fields_),
      -1,
      ::google::protobuf::descriptorpool::generated_pool(),
      ::google::protobuf::messagefactory::generated_factory(),
      sizeof(uninterpretedoption));
  uninterpretedoption_namepart_descriptor_ = uninterpretedoption_descriptor_->nested_type(0);
  static const int uninterpretedoption_namepart_offsets_[2] = {
    google_protobuf_generated_message_field_offset(uninterpretedoption_namepart, name_part_),
    google_protobuf_generated_message_field_offset(uninterpretedoption_namepart, is_extension_),
  };
  uninterpretedoption_namepart_reflection_ =
    new ::google::protobuf::internal::generatedmessagereflection(
      uninterpretedoption_namepart_descriptor_,
      uninterpretedoption_namepart::default_instance_,
      uninterpretedoption_namepart_offsets_,
      google_protobuf_generated_message_field_offset(uninterpretedoption_namepart, _has_bits_[0]),
      google_protobuf_generated_message_field_offset(uninterpretedoption_namepart, _unknown_fields_),
      -1,
      ::google::protobuf::descriptorpool::generated_pool(),
      ::google::protobuf::messagefactory::generated_factory(),
      sizeof(uninterpretedoption_namepart));
  sourcecodeinfo_descriptor_ = file->message_type(16);
  static const int sourcecodeinfo_offsets_[1] = {
    google_protobuf_generated_message_field_offset(sourcecodeinfo, location_),
  };
  sourcecodeinfo_reflection_ =
    new ::google::protobuf::internal::generatedmessagereflection(
      sourcecodeinfo_descriptor_,
      sourcecodeinfo::default_instance_,
      sourcecodeinfo_offsets_,
      google_protobuf_generated_message_field_offset(sourcecodeinfo, _has_bits_[0]),
      google_protobuf_generated_message_field_offset(sourcecodeinfo, _unknown_fields_),
      -1,
      ::google::protobuf::descriptorpool::generated_pool(),
      ::google::protobuf::messagefactory::generated_factory(),
      sizeof(sourcecodeinfo));
  sourcecodeinfo_location_descriptor_ = sourcecodeinfo_descriptor_->nested_type(0);
  static const int sourcecodeinfo_location_offsets_[4] = {
    google_protobuf_generated_message_field_offset(sourcecodeinfo_location, path_),
    google_protobuf_generated_message_field_offset(sourcecodeinfo_location, span_),
    google_protobuf_generated_message_field_offset(sourcecodeinfo_location, leading_comments_),
    google_protobuf_generated_message_field_offset(sourcecodeinfo_location, trailing_comments_),
  };
  sourcecodeinfo_location_reflection_ =
    new ::google::protobuf::internal::generatedmessagereflection(
      sourcecodeinfo_location_descriptor_,
      sourcecodeinfo_location::default_instance_,
      sourcecodeinfo_location_offsets_,
      google_protobuf_generated_message_field_offset(sourcecodeinfo_location, _has_bits_[0]),
      google_protobuf_generated_message_field_offset(sourcecodeinfo_location, _unknown_fields_),
      -1,
      ::google::protobuf::descriptorpool::generated_pool(),
      ::google::protobuf::messagefactory::generated_factory(),
      sizeof(sourcecodeinfo_location));
}

namespace {

google_protobuf_declare_once(protobuf_assigndescriptors_once_);
inline void protobuf_assigndescriptorsonce() {
  ::google::protobuf::googleonceinit(&protobuf_assigndescriptors_once_,
                 &protobuf_assigndesc_google_2fprotobuf_2fdescriptor_2eproto);
}

void protobuf_registertypes(const ::std::string&) {
  protobuf_assigndescriptorsonce();
  ::google::protobuf::messagefactory::internalregistergeneratedmessage(
    filedescriptorset_descriptor_, &filedescriptorset::default_instance());
  ::google::protobuf::messagefactory::internalregistergeneratedmessage(
    filedescriptorproto_descriptor_, &filedescriptorproto::default_instance());
  ::google::protobuf::messagefactory::internalregistergeneratedmessage(
    descriptorproto_descriptor_, &descriptorproto::default_instance());
  ::google::protobuf::messagefactory::internalregistergeneratedmessage(
    descriptorproto_extensionrange_descriptor_, &descriptorproto_extensionrange::default_instance());
  ::google::protobuf::messagefactory::internalregistergeneratedmessage(
    fielddescriptorproto_descriptor_, &fielddescriptorproto::default_instance());
  ::google::protobuf::messagefactory::internalregistergeneratedmessage(
    enumdescriptorproto_descriptor_, &enumdescriptorproto::default_instance());
  ::google::protobuf::messagefactory::internalregistergeneratedmessage(
    enumvaluedescriptorproto_descriptor_, &enumvaluedescriptorproto::default_instance());
  ::google::protobuf::messagefactory::internalregistergeneratedmessage(
    servicedescriptorproto_descriptor_, &servicedescriptorproto::default_instance());
  ::google::protobuf::messagefactory::internalregistergeneratedmessage(
    methoddescriptorproto_descriptor_, &methoddescriptorproto::default_instance());
  ::google::protobuf::messagefactory::internalregistergeneratedmessage(
    fileoptions_descriptor_, &fileoptions::default_instance());
  ::google::protobuf::messagefactory::internalregistergeneratedmessage(
    messageoptions_descriptor_, &messageoptions::default_instance());
  ::google::protobuf::messagefactory::internalregistergeneratedmessage(
    fieldoptions_descriptor_, &fieldoptions::default_instance());
  ::google::protobuf::messagefactory::internalregistergeneratedmessage(
    enumoptions_descriptor_, &enumoptions::default_instance());
  ::google::protobuf::messagefactory::internalregistergeneratedmessage(
    enumvalueoptions_descriptor_, &enumvalueoptions::default_instance());
  ::google::protobuf::messagefactory::internalregistergeneratedmessage(
    serviceoptions_descriptor_, &serviceoptions::default_instance());
  ::google::protobuf::messagefactory::internalregistergeneratedmessage(
    methodoptions_descriptor_, &methodoptions::default_instance());
  ::google::protobuf::messagefactory::internalregistergeneratedmessage(
    uninterpretedoption_descriptor_, &uninterpretedoption::default_instance());
  ::google::protobuf::messagefactory::internalregistergeneratedmessage(
    uninterpretedoption_namepart_descriptor_, &uninterpretedoption_namepart::default_instance());
  ::google::protobuf::messagefactory::internalregistergeneratedmessage(
    sourcecodeinfo_descriptor_, &sourcecodeinfo::default_instance());
  ::google::protobuf::messagefactory::internalregistergeneratedmessage(
    sourcecodeinfo_location_descriptor_, &sourcecodeinfo_location::default_instance());
}

}  // namespace

void protobuf_shutdownfile_google_2fprotobuf_2fdescriptor_2eproto() {
  delete filedescriptorset::default_instance_;
  delete filedescriptorset_reflection_;
  delete filedescriptorproto::default_instance_;
  delete filedescriptorproto_reflection_;
  delete descriptorproto::default_instance_;
  delete descriptorproto_reflection_;
  delete descriptorproto_extensionrange::default_instance_;
  delete descriptorproto_extensionrange_reflection_;
  delete fielddescriptorproto::default_instance_;
  delete fielddescriptorproto_reflection_;
  delete enumdescriptorproto::default_instance_;
  delete enumdescriptorproto_reflection_;
  delete enumvaluedescriptorproto::default_instance_;
  delete enumvaluedescriptorproto_reflection_;
  delete servicedescriptorproto::default_instance_;
  delete servicedescriptorproto_reflection_;
  delete methoddescriptorproto::default_instance_;
  delete methoddescriptorproto_reflection_;
  delete fileoptions::default_instance_;
  delete fileoptions_reflection_;
  delete messageoptions::default_instance_;
  delete messageoptions_reflection_;
  delete fieldoptions::default_instance_;
  delete fieldoptions_reflection_;
  delete enumoptions::default_instance_;
  delete enumoptions_reflection_;
  delete enumvalueoptions::default_instance_;
  delete enumvalueoptions_reflection_;
  delete serviceoptions::default_instance_;
  delete serviceoptions_reflection_;
  delete methodoptions::default_instance_;
  delete methodoptions_reflection_;
  delete uninterpretedoption::default_instance_;
  delete uninterpretedoption_reflection_;
  delete uninterpretedoption_namepart::default_instance_;
  delete uninterpretedoption_namepart_reflection_;
  delete sourcecodeinfo::default_instance_;
  delete sourcecodeinfo_reflection_;
  delete sourcecodeinfo_location::default_instance_;
  delete sourcecodeinfo_location_reflection_;
}

void protobuf_adddesc_google_2fprotobuf_2fdescriptor_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  google_protobuf_verify_version;

  ::google::protobuf::descriptorpool::internaladdgeneratedfile(
    "\n google/protobuf/descriptor.proto\022\017goog"
    "le.protobuf\"g\n\021filedescriptorset\0222\n\004file"
    "\030\001 \003(\0132$.google.protobuf.filedescriptorp"
    "roto\"\313\003\n\023filedescriptorproto\022\014\n\004name\030\001 \001"
    "(\t\022\017\n\007package\030\002 \001(\t\022\022\n\ndependency\030\003 \003(\t\022"
    "\031\n\021public_dependency\030\n \003(\005\022\027\n\017weak_depen"
    "dency\030\013 \003(\005\0226\n\014message_type\030\004 \003(\0132 .goog"
    "le.protobuf.descriptorproto\0227\n\tenum_type"
    "\030\005 \003(\0132$.google.protobuf.enumdescriptorp"
    "roto\0228\n\007service\030\006 \003(\0132\'.google.protobuf."
    "servicedescriptorproto\0228\n\textension\030\007 \003("
    "\0132%.google.protobuf.fielddescriptorproto"
    "\022-\n\007options\030\010 \001(\0132\034.google.protobuf.file"
    "options\0229\n\020source_code_info\030\t \001(\0132\037.goog"
    "le.protobuf.sourcecodeinfo\"\251\003\n\017descripto"
    "rproto\022\014\n\004name\030\001 \001(\t\0224\n\005field\030\002 \003(\0132%.go"
    "ogle.protobuf.fielddescriptorproto\0228\n\tex"
    "tension\030\006 \003(\0132%.google.protobuf.fielddes"
    "criptorproto\0225\n\013nested_type\030\003 \003(\0132 .goog"
    "le.protobuf.descriptorproto\0227\n\tenum_type"
    "\030\004 \003(\0132$.google.protobuf.enumdescriptorp"
    "roto\022h\n\017extension_range\030\005 \003(\0132/.google.p"
    "rotobuf.descriptorproto.extensionrange\0220"
    "\n\007options\030\007 \001(\0132\037.google.protobuf.messag"
    "eoptions\032,\n\016extensionrange\022\r\n\005start\030\001 \001("
    "\005\022\013\n\003end\030\002 \001(\005\"\224\005\n\024fielddescriptorproto\022"
    "\014\n\004name\030\001 \001(\t\022\016\n\006number\030\003 \001(\005\022:\n\005label\030\004"
    " \001(\0162+.google.protobuf.fielddescriptorpr"
    "oto.label\0228\n\004type\030\005 \001(\0162*.google.protobu"
    "f.fielddescriptorproto.type\022\021\n\ttype_name"
    "\030\006 \001(\t\022\020\n\010extendee\030\002 \001(\t\022\025\n\rdefault_valu"
    "e\030\007 \001(\t\022.\n\007options\030\010 \001(\0132\035.google.protob"
    "uf.fieldoptions\"\266\002\n\004type\022\017\n\013type_double\020"
    "\001\022\016\n\ntype_float\020\002\022\016\n\ntype_int64\020\003\022\017\n\013typ"
    "e_uint64\020\004\022\016\n\ntype_int32\020\005\022\020\n\014type_fixed"
    "64\020\006\022\020\n\014type_fixed32\020\007\022\r\n\ttype_bool\020\010\022\017\n"
    "\013type_string\020\t\022\016\n\ntype_group\020\n\022\020\n\014type_m"
    "essage\020\013\022\016\n\ntype_bytes\020\014\022\017\n\013type_uint32\020"
    "\r\022\r\n\ttype_enum\020\016\022\021\n\rtype_sfixed32\020\017\022\021\n\rt"
    "ype_sfixed64\020\020\022\017\n\013type_sint32\020\021\022\017\n\013type_"
    "sint64\020\022\"c\n\005label\022\022\n\016label_optional\020\001\022\022\n"
    "\016label_required\020\002\022\022\n\016label_repeated\020\003\"\214\001"
    "\n\023enumdescriptorproto\022\014\n\004name\030\001 \001(\t\0228\n\005v"
    "alue\030\002 \003(\0132).google.protobuf.enumvaluede"
    "scriptorproto\022-\n\007options\030\003 \001(\0132\034.google."
    "protobuf.enumoptions\"l\n\030enumvaluedescrip"
    "torproto\022\014\n\004name\030\001 \001(\t\022\016\n\006number\030\002 \001(\005\0222"
    "\n\007options\030\003 \001(\0132!.google.protobuf.enumva"
    "lueoptions\"\220\001\n\026servicedescriptorproto\022\014\n"
    "\004name\030\001 \001(\t\0226\n\006method\030\002 \003(\0132&.google.pro"
    "tobuf.methoddescriptorproto\0220\n\007options\030\003"
    " \001(\0132\037.google.protobuf.serviceoptions\"\177\n"
    "\025methoddescriptorproto\022\014\n\004name\030\001 \001(\t\022\022\n\n"
    "input_type\030\002 \001(\t\022\023\n\013output_type\030\003 \001(\t\022/\n"
    "\007options\030\004 \001(\0132\036.google.protobuf.methodo"
    "ptions\"\351\003\n\013fileoptions\022\024\n\014java_package\030\001"
    " \001(\t\022\034\n\024java_outer_classname\030\010 \001(\t\022\"\n\023ja"
    "va_multiple_files\030\n \001(\010:\005false\022,\n\035java_g"
    "enerate_equals_and_hash\030\024 \001(\010:\005false\022f\n\014"
    "optimize_for\030\t \001(\0162).google.protobuf.fil"
    "eoptions.optimizemode:\005speed\022\022\n\ngo_packa"
    "ge\030\013 \001(\t\022\"\n\023cc_generic_services\030\020 \001(\010:\005f"
    "alse\022$\n\025java_generic_services\030\021 \001(\010:\005fal"
    "se\022\"\n\023py_generic_services\030\022 \001(\010:\005false\022c"
    "\n\024uninterpreted_option\030\347\007 \003(\0132$.google.p"
    "rotobuf.uninterpretedoption\":\n\014optimizem"
    "ode\022\t\n\005speed\020\001\022\r\n\tcode_size\020\002\022\020\n\014lite_ru"
    "ntime\020\003*\t\010\350\007\020\200\200\200\200\002\"\270\001\n\016messageoptions\022&\n"
    "\027message_set_wire_format\030\001 \001(\010:\005false\022.\n"
    "\037no_standard_descriptor_accessor\030\002 \001(\010:\005"
    "false\022c\n\024uninterpreted_option\030\347\007 \003(\0132$.g"
    "oogle.protobuf.uninterpretedoption*\t\010\350\007\020"
    "\200\200\200\200\002\"\276\002\n\014fieldoptions\022:\n\005ctype\030\001 \001(\0162#."
    "google.protobuf.fieldoptions.ctype:\006stri"
    "ng\022\016\n\006packed\030\002 \001(\010\022\023\n\004lazy\030\005 \001(\010:\005false\022"
    "\031\n\ndeprecated\030\003 \001(\010:\005false\022\034\n\024experiment"
    "al_map_key\030\t \001(\t\022\023\n\004weak\030\n \001(\010:\005false\022c\n"
    "\024uninterpreted_option\030\347\007 \003(\0132$.google.pr"
    "otobuf.uninterpretedoption\"/\n\005ctype\022\n\n\006s"
    "tring\020\000\022\010\n\004cord\020\001\022\020\n\014string_piece\020\002*\t\010\350\007"
    "\020\200\200\200\200\002\"x\n\013enumoptions\022\031\n\013allow_alias\030\002 \001"
    "(\010:\004true\022c\n\024uninterpreted_option\030\347\007 \003(\0132"
    "$.google.protobuf.uninterpretedoption*\t\010"
    "\350\007\020\200\200\200\200\002\"b\n\020enumvalueoptions\022c\n\024uninterp"
    "reted_option\030\347\007 \003(\0132$.google.protobuf.un"
    "interpretedoption*\t\010\350\007\020\200\200\200\200\002\"`\n\016serviceo"
    "ptions\022c\n\024uninterpreted_option\030\347\007 \003(\0132$."
    "google.protobuf.uninterpretedoption*\t\010\350\007"
    "\020\200\200\200\200\002\"_\n\rmethodoptions\022c\n\024uninterpreted"
    "_option\030\347\007 \003(\0132$.google.protobuf.uninter"
    "pretedoption*\t\010\350\007\020\200\200\200\200\002\"\236\002\n\023uninterprete"
    "doption\022;\n\004name\030\002 \003(\0132-.google.protobuf."
    "uninterpretedoption.namepart\022\030\n\020identifi"
    "er_value\030\003 \001(\t\022\032\n\022positive_int_value\030\004 \001"
    "(\004\022\032\n\022negative_int_value\030\005 \001(\003\022\024\n\014double"
    "_value\030\006 \001(\001\022\024\n\014string_value\030\007 \001(\014\022\027\n\017ag"
    "gregate_value\030\010 \001(\t\0323\n\010namepart\022\021\n\tname_"
    "part\030\001 \002(\t\022\024\n\014is_extension\030\002 \002(\010\"\261\001\n\016sou"
    "rcecodeinfo\022:\n\010location\030\001 \003(\0132(.google.p"
    "rotobuf.sourcecodeinfo.location\032c\n\010locat"
    "ion\022\020\n\004path\030\001 \003(\005b\002\020\001\022\020\n\004span\030\002 \003(\005b\002\020\001\022"
    "\030\n\020leading_comments\030\003 \001(\t\022\031\n\021trailing_co"
    "mments\030\004 \001(\tb)\n\023com.google.protobufb\020des"
    "criptorprotosh\001", 4135);
  ::google::protobuf::messagefactory::internalregistergeneratedfile(
    "google/protobuf/descriptor.proto", &protobuf_registertypes);
  filedescriptorset::default_instance_ = new filedescriptorset();
  filedescriptorproto::default_instance_ = new filedescriptorproto();
  descriptorproto::default_instance_ = new descriptorproto();
  descriptorproto_extensionrange::default_instance_ = new descriptorproto_extensionrange();
  fielddescriptorproto::default_instance_ = new fielddescriptorproto();
  enumdescriptorproto::default_instance_ = new enumdescriptorproto();
  enumvaluedescriptorproto::default_instance_ = new enumvaluedescriptorproto();
  servicedescriptorproto::default_instance_ = new servicedescriptorproto();
  methoddescriptorproto::default_instance_ = new methoddescriptorproto();
  fileoptions::default_instance_ = new fileoptions();
  messageoptions::default_instance_ = new messageoptions();
  fieldoptions::default_instance_ = new fieldoptions();
  enumoptions::default_instance_ = new enumoptions();
  enumvalueoptions::default_instance_ = new enumvalueoptions();
  serviceoptions::default_instance_ = new serviceoptions();
  methodoptions::default_instance_ = new methodoptions();
  uninterpretedoption::default_instance_ = new uninterpretedoption();
  uninterpretedoption_namepart::default_instance_ = new uninterpretedoption_namepart();
  sourcecodeinfo::default_instance_ = new sourcecodeinfo();
  sourcecodeinfo_location::default_instance_ = new sourcecodeinfo_location();
  filedescriptorset::default_instance_->initasdefaultinstance();
  filedescriptorproto::default_instance_->initasdefaultinstance();
  descriptorproto::default_instance_->initasdefaultinstance();
  descriptorproto_extensionrange::default_instance_->initasdefaultinstance();
  fielddescriptorproto::default_instance_->initasdefaultinstance();
  enumdescriptorproto::default_instance_->initasdefaultinstance();
  enumvaluedescriptorproto::default_instance_->initasdefaultinstance();
  servicedescriptorproto::default_instance_->initasdefaultinstance();
  methoddescriptorproto::default_instance_->initasdefaultinstance();
  fileoptions::default_instance_->initasdefaultinstance();
  messageoptions::default_instance_->initasdefaultinstance();
  fieldoptions::default_instance_->initasdefaultinstance();
  enumoptions::default_instance_->initasdefaultinstance();
  enumvalueoptions::default_instance_->initasdefaultinstance();
  serviceoptions::default_instance_->initasdefaultinstance();
  methodoptions::default_instance_->initasdefaultinstance();
  uninterpretedoption::default_instance_->initasdefaultinstance();
  uninterpretedoption_namepart::default_instance_->initasdefaultinstance();
  sourcecodeinfo::default_instance_->initasdefaultinstance();
  sourcecodeinfo_location::default_instance_->initasdefaultinstance();
  ::google::protobuf::internal::onshutdown(&protobuf_shutdownfile_google_2fprotobuf_2fdescriptor_2eproto);
}

// force adddescriptors() to be called at static initialization time.
struct staticdescriptorinitializer_google_2fprotobuf_2fdescriptor_2eproto {
  staticdescriptorinitializer_google_2fprotobuf_2fdescriptor_2eproto() {
    protobuf_adddesc_google_2fprotobuf_2fdescriptor_2eproto();
  }
} static_descriptor_initializer_google_2fprotobuf_2fdescriptor_2eproto_;

// ===================================================================

#ifndef _msc_ver
const int filedescriptorset::kfilefieldnumber;
#endif  // !_msc_ver

filedescriptorset::filedescriptorset()
  : ::google::protobuf::message() {
  sharedctor();
}

void filedescriptorset::initasdefaultinstance() {
}

filedescriptorset::filedescriptorset(const filedescriptorset& from)
  : ::google::protobuf::message() {
  sharedctor();
  mergefrom(from);
}

void filedescriptorset::sharedctor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

filedescriptorset::~filedescriptorset() {
  shareddtor();
}

void filedescriptorset::shareddtor() {
  if (this != default_instance_) {
  }
}

void filedescriptorset::setcachedsize(int size) const {
  google_safe_concurrent_writes_begin();
  _cached_size_ = size;
  google_safe_concurrent_writes_end();
}
const ::google::protobuf::descriptor* filedescriptorset::descriptor() {
  protobuf_assigndescriptorsonce();
  return filedescriptorset_descriptor_;
}

const filedescriptorset& filedescriptorset::default_instance() {
  if (default_instance_ == null) protobuf_adddesc_google_2fprotobuf_2fdescriptor_2eproto();
  return *default_instance_;
}

filedescriptorset* filedescriptorset::default_instance_ = null;

filedescriptorset* filedescriptorset::new() const {
  return new filedescriptorset;
}

void filedescriptorset::clear() {
  file_.clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool filedescriptorset::mergepartialfromcodedstream(
    ::google::protobuf::io::codedinputstream* input) {
#define do_(expression) if (!(expression)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->readtag()) != 0) {
    switch (::google::protobuf::internal::wireformatlite::gettagfieldnumber(tag)) {
      // repeated .google.protobuf.filedescriptorproto file = 1;
      case 1: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_file:
          do_(::google::protobuf::internal::wireformatlite::readmessagenovirtual(
                input, add_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(10)) goto parse_file;
        if (input->expectatend()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_end_group) {
          return true;
        }
        do_(::google::protobuf::internal::wireformat::skipfield(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef do_
}

void filedescriptorset::serializewithcachedsizes(
    ::google::protobuf::io::codedoutputstream* output) const {
  // repeated .google.protobuf.filedescriptorproto file = 1;
  for (int i = 0; i < this->file_size(); i++) {
    ::google::protobuf::internal::wireformatlite::writemessagemaybetoarray(
      1, this->file(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::wireformat::serializeunknownfields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* filedescriptorset::serializewithcachedsizestoarray(
    ::google::protobuf::uint8* target) const {
  // repeated .google.protobuf.filedescriptorproto file = 1;
  for (int i = 0; i < this->file_size(); i++) {
    target = ::google::protobuf::internal::wireformatlite::
      writemessagenovirtualtoarray(
        1, this->file(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::wireformat::serializeunknownfieldstoarray(
        unknown_fields(), target);
  }
  return target;
}

int filedescriptorset::bytesize() const {
  int total_size = 0;

  // repeated .google.protobuf.filedescriptorproto file = 1;
  total_size += 1 * this->file_size();
  for (int i = 0; i < this->file_size(); i++) {
    total_size +=
      ::google::protobuf::internal::wireformatlite::messagesizenovirtual(
        this->file(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::wireformat::computeunknownfieldssize(
        unknown_fields());
  }
  google_safe_concurrent_writes_begin();
  _cached_size_ = total_size;
  google_safe_concurrent_writes_end();
  return total_size;
}

void filedescriptorset::mergefrom(const ::google::protobuf::message& from) {
  google_check_ne(&from, this);
  const filedescriptorset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const filedescriptorset*>(
      &from);
  if (source == null) {
    ::google::protobuf::internal::reflectionops::merge(from, this);
  } else {
    mergefrom(*source);
  }
}

void filedescriptorset::mergefrom(const filedescriptorset& from) {
  google_check_ne(&from, this);
  file_.mergefrom(from.file_);
  mutable_unknown_fields()->mergefrom(from.unknown_fields());
}

void filedescriptorset::copyfrom(const ::google::protobuf::message& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

void filedescriptorset::copyfrom(const filedescriptorset& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

bool filedescriptorset::isinitialized() const {

  for (int i = 0; i < file_size(); i++) {
    if (!this->file(i).isinitialized()) return false;
  }
  return true;
}

void filedescriptorset::swap(filedescriptorset* other) {
  if (other != this) {
    file_.swap(&other->file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::metadata filedescriptorset::getmetadata() const {
  protobuf_assigndescriptorsonce();
  ::google::protobuf::metadata metadata;
  metadata.descriptor = filedescriptorset_descriptor_;
  metadata.reflection = filedescriptorset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _msc_ver
const int filedescriptorproto::knamefieldnumber;
const int filedescriptorproto::kpackagefieldnumber;
const int filedescriptorproto::kdependencyfieldnumber;
const int filedescriptorproto::kpublicdependencyfieldnumber;
const int filedescriptorproto::kweakdependencyfieldnumber;
const int filedescriptorproto::kmessagetypefieldnumber;
const int filedescriptorproto::kenumtypefieldnumber;
const int filedescriptorproto::kservicefieldnumber;
const int filedescriptorproto::kextensionfieldnumber;
const int filedescriptorproto::koptionsfieldnumber;
const int filedescriptorproto::ksourcecodeinfofieldnumber;
#endif  // !_msc_ver

filedescriptorproto::filedescriptorproto()
  : ::google::protobuf::message() {
  sharedctor();
}

void filedescriptorproto::initasdefaultinstance() {
  options_ = const_cast< ::google::protobuf::fileoptions*>(&::google::protobuf::fileoptions::default_instance());
  source_code_info_ = const_cast< ::google::protobuf::sourcecodeinfo*>(&::google::protobuf::sourcecodeinfo::default_instance());
}

filedescriptorproto::filedescriptorproto(const filedescriptorproto& from)
  : ::google::protobuf::message() {
  sharedctor();
  mergefrom(from);
}

void filedescriptorproto::sharedctor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kemptystring);
  package_ = const_cast< ::std::string*>(&::google::protobuf::internal::kemptystring);
  options_ = null;
  source_code_info_ = null;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

filedescriptorproto::~filedescriptorproto() {
  shareddtor();
}

void filedescriptorproto::shareddtor() {
  if (name_ != &::google::protobuf::internal::kemptystring) {
    delete name_;
  }
  if (package_ != &::google::protobuf::internal::kemptystring) {
    delete package_;
  }
  if (this != default_instance_) {
    delete options_;
    delete source_code_info_;
  }
}

void filedescriptorproto::setcachedsize(int size) const {
  google_safe_concurrent_writes_begin();
  _cached_size_ = size;
  google_safe_concurrent_writes_end();
}
const ::google::protobuf::descriptor* filedescriptorproto::descriptor() {
  protobuf_assigndescriptorsonce();
  return filedescriptorproto_descriptor_;
}

const filedescriptorproto& filedescriptorproto::default_instance() {
  if (default_instance_ == null) protobuf_adddesc_google_2fprotobuf_2fdescriptor_2eproto();
  return *default_instance_;
}

filedescriptorproto* filedescriptorproto::default_instance_ = null;

filedescriptorproto* filedescriptorproto::new() const {
  return new filedescriptorproto;
}

void filedescriptorproto::clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kemptystring) {
        name_->clear();
      }
    }
    if (has_package()) {
      if (package_ != &::google::protobuf::internal::kemptystring) {
        package_->clear();
      }
    }
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (has_options()) {
      if (options_ != null) options_->::google::protobuf::fileoptions::clear();
    }
    if (has_source_code_info()) {
      if (source_code_info_ != null) source_code_info_->::google::protobuf::sourcecodeinfo::clear();
    }
  }
  dependency_.clear();
  public_dependency_.clear();
  weak_dependency_.clear();
  message_type_.clear();
  enum_type_.clear();
  service_.clear();
  extension_.clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool filedescriptorproto::mergepartialfromcodedstream(
    ::google::protobuf::io::codedinputstream* input) {
#define do_(expression) if (!(expression)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->readtag()) != 0) {
    switch (::google::protobuf::internal::wireformatlite::gettagfieldnumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
          do_(::google::protobuf::internal::wireformatlite::readstring(
                input, this->mutable_name()));
          ::google::protobuf::internal::wireformat::verifyutf8string(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::wireformat::parse);
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(18)) goto parse_package;
        break;
      }

      // optional string package = 2;
      case 2: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_package:
          do_(::google::protobuf::internal::wireformatlite::readstring(
                input, this->mutable_package()));
          ::google::protobuf::internal::wireformat::verifyutf8string(
            this->package().data(), this->package().length(),
            ::google::protobuf::internal::wireformat::parse);
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(26)) goto parse_dependency;
        break;
      }

      // repeated string dependency = 3;
      case 3: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_dependency:
          do_(::google::protobuf::internal::wireformatlite::readstring(
                input, this->add_dependency()));
          ::google::protobuf::internal::wireformat::verifyutf8string(
            this->dependency(this->dependency_size() - 1).data(),
            this->dependency(this->dependency_size() - 1).length(),
            ::google::protobuf::internal::wireformat::parse);
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(26)) goto parse_dependency;
        if (input->expecttag(34)) goto parse_message_type;
        break;
      }

      // repeated .google.protobuf.descriptorproto message_type = 4;
      case 4: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_message_type:
          do_(::google::protobuf::internal::wireformatlite::readmessagenovirtual(
                input, add_message_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(34)) goto parse_message_type;
        if (input->expecttag(42)) goto parse_enum_type;
        break;
      }

      // repeated .google.protobuf.enumdescriptorproto enum_type = 5;
      case 5: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_enum_type:
          do_(::google::protobuf::internal::wireformatlite::readmessagenovirtual(
                input, add_enum_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(42)) goto parse_enum_type;
        if (input->expecttag(50)) goto parse_service;
        break;
      }

      // repeated .google.protobuf.servicedescriptorproto service = 6;
      case 6: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_service:
          do_(::google::protobuf::internal::wireformatlite::readmessagenovirtual(
                input, add_service()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(50)) goto parse_service;
        if (input->expecttag(58)) goto parse_extension;
        break;
      }

      // repeated .google.protobuf.fielddescriptorproto extension = 7;
      case 7: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_extension:
          do_(::google::protobuf::internal::wireformatlite::readmessagenovirtual(
                input, add_extension()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(58)) goto parse_extension;
        if (input->expecttag(66)) goto parse_options;
        break;
      }

      // optional .google.protobuf.fileoptions options = 8;
      case 8: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_options:
          do_(::google::protobuf::internal::wireformatlite::readmessagenovirtual(
               input, mutable_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(74)) goto parse_source_code_info;
        break;
      }

      // optional .google.protobuf.sourcecodeinfo source_code_info = 9;
      case 9: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_source_code_info:
          do_(::google::protobuf::internal::wireformatlite::readmessagenovirtual(
               input, mutable_source_code_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(80)) goto parse_public_dependency;
        break;
      }

      // repeated int32 public_dependency = 10;
      case 10: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_varint) {
         parse_public_dependency:
          do_((::google::protobuf::internal::wireformatlite::readrepeatedprimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::wireformatlite::type_int32>(
                 1, 80, input, this->mutable_public_dependency())));
        } else if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag)
                   == ::google::protobuf::internal::wireformatlite::
                      wiretype_length_delimited) {
          do_((::google::protobuf::internal::wireformatlite::readpackedprimitivenoinline<
                   ::google::protobuf::int32, ::google::protobuf::internal::wireformatlite::type_int32>(
                 input, this->mutable_public_dependency())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(80)) goto parse_public_dependency;
        if (input->expecttag(88)) goto parse_weak_dependency;
        break;
      }

      // repeated int32 weak_dependency = 11;
      case 11: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_varint) {
         parse_weak_dependency:
          do_((::google::protobuf::internal::wireformatlite::readrepeatedprimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::wireformatlite::type_int32>(
                 1, 88, input, this->mutable_weak_dependency())));
        } else if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag)
                   == ::google::protobuf::internal::wireformatlite::
                      wiretype_length_delimited) {
          do_((::google::protobuf::internal::wireformatlite::readpackedprimitivenoinline<
                   ::google::protobuf::int32, ::google::protobuf::internal::wireformatlite::type_int32>(
                 input, this->mutable_weak_dependency())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(88)) goto parse_weak_dependency;
        if (input->expectatend()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_end_group) {
          return true;
        }
        do_(::google::protobuf::internal::wireformat::skipfield(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef do_
}

void filedescriptorproto::serializewithcachedsizes(
    ::google::protobuf::io::codedoutputstream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::wireformat::serialize);
    ::google::protobuf::internal::wireformatlite::writestring(
      1, this->name(), output);
  }

  // optional string package = 2;
  if (has_package()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->package().data(), this->package().length(),
      ::google::protobuf::internal::wireformat::serialize);
    ::google::protobuf::internal::wireformatlite::writestring(
      2, this->package(), output);
  }

  // repeated string dependency = 3;
  for (int i = 0; i < this->dependency_size(); i++) {
  ::google::protobuf::internal::wireformat::verifyutf8string(
    this->dependency(i).data(), this->dependency(i).length(),
    ::google::protobuf::internal::wireformat::serialize);
    ::google::protobuf::internal::wireformatlite::writestring(
      3, this->dependency(i), output);
  }

  // repeated .google.protobuf.descriptorproto message_type = 4;
  for (int i = 0; i < this->message_type_size(); i++) {
    ::google::protobuf::internal::wireformatlite::writemessagemaybetoarray(
      4, this->message_type(i), output);
  }

  // repeated .google.protobuf.enumdescriptorproto enum_type = 5;
  for (int i = 0; i < this->enum_type_size(); i++) {
    ::google::protobuf::internal::wireformatlite::writemessagemaybetoarray(
      5, this->enum_type(i), output);
  }

  // repeated .google.protobuf.servicedescriptorproto service = 6;
  for (int i = 0; i < this->service_size(); i++) {
    ::google::protobuf::internal::wireformatlite::writemessagemaybetoarray(
      6, this->service(i), output);
  }

  // repeated .google.protobuf.fielddescriptorproto extension = 7;
  for (int i = 0; i < this->extension_size(); i++) {
    ::google::protobuf::internal::wireformatlite::writemessagemaybetoarray(
      7, this->extension(i), output);
  }

  // optional .google.protobuf.fileoptions options = 8;
  if (has_options()) {
    ::google::protobuf::internal::wireformatlite::writemessagemaybetoarray(
      8, this->options(), output);
  }

  // optional .google.protobuf.sourcecodeinfo source_code_info = 9;
  if (has_source_code_info()) {
    ::google::protobuf::internal::wireformatlite::writemessagemaybetoarray(
      9, this->source_code_info(), output);
  }

  // repeated int32 public_dependency = 10;
  for (int i = 0; i < this->public_dependency_size(); i++) {
    ::google::protobuf::internal::wireformatlite::writeint32(
      10, this->public_dependency(i), output);
  }

  // repeated int32 weak_dependency = 11;
  for (int i = 0; i < this->weak_dependency_size(); i++) {
    ::google::protobuf::internal::wireformatlite::writeint32(
      11, this->weak_dependency(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::wireformat::serializeunknownfields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* filedescriptorproto::serializewithcachedsizestoarray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::wireformat::serialize);
    target =
      ::google::protobuf::internal::wireformatlite::writestringtoarray(
        1, this->name(), target);
  }

  // optional string package = 2;
  if (has_package()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->package().data(), this->package().length(),
      ::google::protobuf::internal::wireformat::serialize);
    target =
      ::google::protobuf::internal::wireformatlite::writestringtoarray(
        2, this->package(), target);
  }

  // repeated string dependency = 3;
  for (int i = 0; i < this->dependency_size(); i++) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->dependency(i).data(), this->dependency(i).length(),
      ::google::protobuf::internal::wireformat::serialize);
    target = ::google::protobuf::internal::wireformatlite::
      writestringtoarray(3, this->dependency(i), target);
  }

  // repeated .google.protobuf.descriptorproto message_type = 4;
  for (int i = 0; i < this->message_type_size(); i++) {
    target = ::google::protobuf::internal::wireformatlite::
      writemessagenovirtualtoarray(
        4, this->message_type(i), target);
  }

  // repeated .google.protobuf.enumdescriptorproto enum_type = 5;
  for (int i = 0; i < this->enum_type_size(); i++) {
    target = ::google::protobuf::internal::wireformatlite::
      writemessagenovirtualtoarray(
        5, this->enum_type(i), target);
  }

  // repeated .google.protobuf.servicedescriptorproto service = 6;
  for (int i = 0; i < this->service_size(); i++) {
    target = ::google::protobuf::internal::wireformatlite::
      writemessagenovirtualtoarray(
        6, this->service(i), target);
  }

  // repeated .google.protobuf.fielddescriptorproto extension = 7;
  for (int i = 0; i < this->extension_size(); i++) {
    target = ::google::protobuf::internal::wireformatlite::
      writemessagenovirtualtoarray(
        7, this->extension(i), target);
  }

  // optional .google.protobuf.fileoptions options = 8;
  if (has_options()) {
    target = ::google::protobuf::internal::wireformatlite::
      writemessagenovirtualtoarray(
        8, this->options(), target);
  }

  // optional .google.protobuf.sourcecodeinfo source_code_info = 9;
  if (has_source_code_info()) {
    target = ::google::protobuf::internal::wireformatlite::
      writemessagenovirtualtoarray(
        9, this->source_code_info(), target);
  }

  // repeated int32 public_dependency = 10;
  for (int i = 0; i < this->public_dependency_size(); i++) {
    target = ::google::protobuf::internal::wireformatlite::
      writeint32toarray(10, this->public_dependency(i), target);
  }

  // repeated int32 weak_dependency = 11;
  for (int i = 0; i < this->weak_dependency_size(); i++) {
    target = ::google::protobuf::internal::wireformatlite::
      writeint32toarray(11, this->weak_dependency(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::wireformat::serializeunknownfieldstoarray(
        unknown_fields(), target);
  }
  return target;
}

int filedescriptorproto::bytesize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::stringsize(
          this->name());
    }

    // optional string package = 2;
    if (has_package()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::stringsize(
          this->package());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional .google.protobuf.fileoptions options = 8;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::messagesizenovirtual(
          this->options());
    }

    // optional .google.protobuf.sourcecodeinfo source_code_info = 9;
    if (has_source_code_info()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::messagesizenovirtual(
          this->source_code_info());
    }

  }
  // repeated string dependency = 3;
  total_size += 1 * this->dependency_size();
  for (int i = 0; i < this->dependency_size(); i++) {
    total_size += ::google::protobuf::internal::wireformatlite::stringsize(
      this->dependency(i));
  }

  // repeated int32 public_dependency = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->public_dependency_size(); i++) {
      data_size += ::google::protobuf::internal::wireformatlite::
        int32size(this->public_dependency(i));
    }
    total_size += 1 * this->public_dependency_size() + data_size;
  }

  // repeated int32 weak_dependency = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->weak_dependency_size(); i++) {
      data_size += ::google::protobuf::internal::wireformatlite::
        int32size(this->weak_dependency(i));
    }
    total_size += 1 * this->weak_dependency_size() + data_size;
  }

  // repeated .google.protobuf.descriptorproto message_type = 4;
  total_size += 1 * this->message_type_size();
  for (int i = 0; i < this->message_type_size(); i++) {
    total_size +=
      ::google::protobuf::internal::wireformatlite::messagesizenovirtual(
        this->message_type(i));
  }

  // repeated .google.protobuf.enumdescriptorproto enum_type = 5;
  total_size += 1 * this->enum_type_size();
  for (int i = 0; i < this->enum_type_size(); i++) {
    total_size +=
      ::google::protobuf::internal::wireformatlite::messagesizenovirtual(
        this->enum_type(i));
  }

  // repeated .google.protobuf.servicedescriptorproto service = 6;
  total_size += 1 * this->service_size();
  for (int i = 0; i < this->service_size(); i++) {
    total_size +=
      ::google::protobuf::internal::wireformatlite::messagesizenovirtual(
        this->service(i));
  }

  // repeated .google.protobuf.fielddescriptorproto extension = 7;
  total_size += 1 * this->extension_size();
  for (int i = 0; i < this->extension_size(); i++) {
    total_size +=
      ::google::protobuf::internal::wireformatlite::messagesizenovirtual(
        this->extension(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::wireformat::computeunknownfieldssize(
        unknown_fields());
  }
  google_safe_concurrent_writes_begin();
  _cached_size_ = total_size;
  google_safe_concurrent_writes_end();
  return total_size;
}

void filedescriptorproto::mergefrom(const ::google::protobuf::message& from) {
  google_check_ne(&from, this);
  const filedescriptorproto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const filedescriptorproto*>(
      &from);
  if (source == null) {
    ::google::protobuf::internal::reflectionops::merge(from, this);
  } else {
    mergefrom(*source);
  }
}

void filedescriptorproto::mergefrom(const filedescriptorproto& from) {
  google_check_ne(&from, this);
  dependency_.mergefrom(from.dependency_);
  public_dependency_.mergefrom(from.public_dependency_);
  weak_dependency_.mergefrom(from.weak_dependency_);
  message_type_.mergefrom(from.message_type_);
  enum_type_.mergefrom(from.enum_type_);
  service_.mergefrom(from.service_);
  extension_.mergefrom(from.extension_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_package()) {
      set_package(from.package());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_options()) {
      mutable_options()->::google::protobuf::fileoptions::mergefrom(from.options());
    }
    if (from.has_source_code_info()) {
      mutable_source_code_info()->::google::protobuf::sourcecodeinfo::mergefrom(from.source_code_info());
    }
  }
  mutable_unknown_fields()->mergefrom(from.unknown_fields());
}

void filedescriptorproto::copyfrom(const ::google::protobuf::message& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

void filedescriptorproto::copyfrom(const filedescriptorproto& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

bool filedescriptorproto::isinitialized() const {

  for (int i = 0; i < message_type_size(); i++) {
    if (!this->message_type(i).isinitialized()) return false;
  }
  for (int i = 0; i < enum_type_size(); i++) {
    if (!this->enum_type(i).isinitialized()) return false;
  }
  for (int i = 0; i < service_size(); i++) {
    if (!this->service(i).isinitialized()) return false;
  }
  for (int i = 0; i < extension_size(); i++) {
    if (!this->extension(i).isinitialized()) return false;
  }
  if (has_options()) {
    if (!this->options().isinitialized()) return false;
  }
  return true;
}

void filedescriptorproto::swap(filedescriptorproto* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(package_, other->package_);
    dependency_.swap(&other->dependency_);
    public_dependency_.swap(&other->public_dependency_);
    weak_dependency_.swap(&other->weak_dependency_);
    message_type_.swap(&other->message_type_);
    enum_type_.swap(&other->enum_type_);
    service_.swap(&other->service_);
    extension_.swap(&other->extension_);
    std::swap(options_, other->options_);
    std::swap(source_code_info_, other->source_code_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::metadata filedescriptorproto::getmetadata() const {
  protobuf_assigndescriptorsonce();
  ::google::protobuf::metadata metadata;
  metadata.descriptor = filedescriptorproto_descriptor_;
  metadata.reflection = filedescriptorproto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _msc_ver
const int descriptorproto_extensionrange::kstartfieldnumber;
const int descriptorproto_extensionrange::kendfieldnumber;
#endif  // !_msc_ver

descriptorproto_extensionrange::descriptorproto_extensionrange()
  : ::google::protobuf::message() {
  sharedctor();
}

void descriptorproto_extensionrange::initasdefaultinstance() {
}

descriptorproto_extensionrange::descriptorproto_extensionrange(const descriptorproto_extensionrange& from)
  : ::google::protobuf::message() {
  sharedctor();
  mergefrom(from);
}

void descriptorproto_extensionrange::sharedctor() {
  _cached_size_ = 0;
  start_ = 0;
  end_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

descriptorproto_extensionrange::~descriptorproto_extensionrange() {
  shareddtor();
}

void descriptorproto_extensionrange::shareddtor() {
  if (this != default_instance_) {
  }
}

void descriptorproto_extensionrange::setcachedsize(int size) const {
  google_safe_concurrent_writes_begin();
  _cached_size_ = size;
  google_safe_concurrent_writes_end();
}
const ::google::protobuf::descriptor* descriptorproto_extensionrange::descriptor() {
  protobuf_assigndescriptorsonce();
  return descriptorproto_extensionrange_descriptor_;
}

const descriptorproto_extensionrange& descriptorproto_extensionrange::default_instance() {
  if (default_instance_ == null) protobuf_adddesc_google_2fprotobuf_2fdescriptor_2eproto();
  return *default_instance_;
}

descriptorproto_extensionrange* descriptorproto_extensionrange::default_instance_ = null;

descriptorproto_extensionrange* descriptorproto_extensionrange::new() const {
  return new descriptorproto_extensionrange;
}

void descriptorproto_extensionrange::clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    start_ = 0;
    end_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool descriptorproto_extensionrange::mergepartialfromcodedstream(
    ::google::protobuf::io::codedinputstream* input) {
#define do_(expression) if (!(expression)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->readtag()) != 0) {
    switch (::google::protobuf::internal::wireformatlite::gettagfieldnumber(tag)) {
      // optional int32 start = 1;
      case 1: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_varint) {
          do_((::google::protobuf::internal::wireformatlite::readprimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::wireformatlite::type_int32>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(16)) goto parse_end;
        break;
      }

      // optional int32 end = 2;
      case 2: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_varint) {
         parse_end:
          do_((::google::protobuf::internal::wireformatlite::readprimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::wireformatlite::type_int32>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->expectatend()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_end_group) {
          return true;
        }
        do_(::google::protobuf::internal::wireformat::skipfield(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef do_
}

void descriptorproto_extensionrange::serializewithcachedsizes(
    ::google::protobuf::io::codedoutputstream* output) const {
  // optional int32 start = 1;
  if (has_start()) {
    ::google::protobuf::internal::wireformatlite::writeint32(1, this->start(), output);
  }

  // optional int32 end = 2;
  if (has_end()) {
    ::google::protobuf::internal::wireformatlite::writeint32(2, this->end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::wireformat::serializeunknownfields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* descriptorproto_extensionrange::serializewithcachedsizestoarray(
    ::google::protobuf::uint8* target) const {
  // optional int32 start = 1;
  if (has_start()) {
    target = ::google::protobuf::internal::wireformatlite::writeint32toarray(1, this->start(), target);
  }

  // optional int32 end = 2;
  if (has_end()) {
    target = ::google::protobuf::internal::wireformatlite::writeint32toarray(2, this->end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::wireformat::serializeunknownfieldstoarray(
        unknown_fields(), target);
  }
  return target;
}

int descriptorproto_extensionrange::bytesize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 start = 1;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::int32size(
          this->start());
    }

    // optional int32 end = 2;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::int32size(
          this->end());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::wireformat::computeunknownfieldssize(
        unknown_fields());
  }
  google_safe_concurrent_writes_begin();
  _cached_size_ = total_size;
  google_safe_concurrent_writes_end();
  return total_size;
}

void descriptorproto_extensionrange::mergefrom(const ::google::protobuf::message& from) {
  google_check_ne(&from, this);
  const descriptorproto_extensionrange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const descriptorproto_extensionrange*>(
      &from);
  if (source == null) {
    ::google::protobuf::internal::reflectionops::merge(from, this);
  } else {
    mergefrom(*source);
  }
}

void descriptorproto_extensionrange::mergefrom(const descriptorproto_extensionrange& from) {
  google_check_ne(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
  }
  mutable_unknown_fields()->mergefrom(from.unknown_fields());
}

void descriptorproto_extensionrange::copyfrom(const ::google::protobuf::message& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

void descriptorproto_extensionrange::copyfrom(const descriptorproto_extensionrange& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

bool descriptorproto_extensionrange::isinitialized() const {

  return true;
}

void descriptorproto_extensionrange::swap(descriptorproto_extensionrange* other) {
  if (other != this) {
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::metadata descriptorproto_extensionrange::getmetadata() const {
  protobuf_assigndescriptorsonce();
  ::google::protobuf::metadata metadata;
  metadata.descriptor = descriptorproto_extensionrange_descriptor_;
  metadata.reflection = descriptorproto_extensionrange_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _msc_ver
const int descriptorproto::knamefieldnumber;
const int descriptorproto::kfieldfieldnumber;
const int descriptorproto::kextensionfieldnumber;
const int descriptorproto::knestedtypefieldnumber;
const int descriptorproto::kenumtypefieldnumber;
const int descriptorproto::kextensionrangefieldnumber;
const int descriptorproto::koptionsfieldnumber;
#endif  // !_msc_ver

descriptorproto::descriptorproto()
  : ::google::protobuf::message() {
  sharedctor();
}

void descriptorproto::initasdefaultinstance() {
  options_ = const_cast< ::google::protobuf::messageoptions*>(&::google::protobuf::messageoptions::default_instance());
}

descriptorproto::descriptorproto(const descriptorproto& from)
  : ::google::protobuf::message() {
  sharedctor();
  mergefrom(from);
}

void descriptorproto::sharedctor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kemptystring);
  options_ = null;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

descriptorproto::~descriptorproto() {
  shareddtor();
}

void descriptorproto::shareddtor() {
  if (name_ != &::google::protobuf::internal::kemptystring) {
    delete name_;
  }
  if (this != default_instance_) {
    delete options_;
  }
}

void descriptorproto::setcachedsize(int size) const {
  google_safe_concurrent_writes_begin();
  _cached_size_ = size;
  google_safe_concurrent_writes_end();
}
const ::google::protobuf::descriptor* descriptorproto::descriptor() {
  protobuf_assigndescriptorsonce();
  return descriptorproto_descriptor_;
}

const descriptorproto& descriptorproto::default_instance() {
  if (default_instance_ == null) protobuf_adddesc_google_2fprotobuf_2fdescriptor_2eproto();
  return *default_instance_;
}

descriptorproto* descriptorproto::default_instance_ = null;

descriptorproto* descriptorproto::new() const {
  return new descriptorproto;
}

void descriptorproto::clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kemptystring) {
        name_->clear();
      }
    }
    if (has_options()) {
      if (options_ != null) options_->::google::protobuf::messageoptions::clear();
    }
  }
  field_.clear();
  extension_.clear();
  nested_type_.clear();
  enum_type_.clear();
  extension_range_.clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool descriptorproto::mergepartialfromcodedstream(
    ::google::protobuf::io::codedinputstream* input) {
#define do_(expression) if (!(expression)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->readtag()) != 0) {
    switch (::google::protobuf::internal::wireformatlite::gettagfieldnumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
          do_(::google::protobuf::internal::wireformatlite::readstring(
                input, this->mutable_name()));
          ::google::protobuf::internal::wireformat::verifyutf8string(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::wireformat::parse);
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(18)) goto parse_field;
        break;
      }

      // repeated .google.protobuf.fielddescriptorproto field = 2;
      case 2: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_field:
          do_(::google::protobuf::internal::wireformatlite::readmessagenovirtual(
                input, add_field()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(18)) goto parse_field;
        if (input->expecttag(26)) goto parse_nested_type;
        break;
      }

      // repeated .google.protobuf.descriptorproto nested_type = 3;
      case 3: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_nested_type:
          do_(::google::protobuf::internal::wireformatlite::readmessagenovirtual(
                input, add_nested_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(26)) goto parse_nested_type;
        if (input->expecttag(34)) goto parse_enum_type;
        break;
      }

      // repeated .google.protobuf.enumdescriptorproto enum_type = 4;
      case 4: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_enum_type:
          do_(::google::protobuf::internal::wireformatlite::readmessagenovirtual(
                input, add_enum_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(34)) goto parse_enum_type;
        if (input->expecttag(42)) goto parse_extension_range;
        break;
      }

      // repeated .google.protobuf.descriptorproto.extensionrange extension_range = 5;
      case 5: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_extension_range:
          do_(::google::protobuf::internal::wireformatlite::readmessagenovirtual(
                input, add_extension_range()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(42)) goto parse_extension_range;
        if (input->expecttag(50)) goto parse_extension;
        break;
      }

      // repeated .google.protobuf.fielddescriptorproto extension = 6;
      case 6: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_extension:
          do_(::google::protobuf::internal::wireformatlite::readmessagenovirtual(
                input, add_extension()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(50)) goto parse_extension;
        if (input->expecttag(58)) goto parse_options;
        break;
      }

      // optional .google.protobuf.messageoptions options = 7;
      case 7: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_options:
          do_(::google::protobuf::internal::wireformatlite::readmessagenovirtual(
               input, mutable_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->expectatend()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_end_group) {
          return true;
        }
        do_(::google::protobuf::internal::wireformat::skipfield(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef do_
}

void descriptorproto::serializewithcachedsizes(
    ::google::protobuf::io::codedoutputstream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::wireformat::serialize);
    ::google::protobuf::internal::wireformatlite::writestring(
      1, this->name(), output);
  }

  // repeated .google.protobuf.fielddescriptorproto field = 2;
  for (int i = 0; i < this->field_size(); i++) {
    ::google::protobuf::internal::wireformatlite::writemessagemaybetoarray(
      2, this->field(i), output);
  }

  // repeated .google.protobuf.descriptorproto nested_type = 3;
  for (int i = 0; i < this->nested_type_size(); i++) {
    ::google::protobuf::internal::wireformatlite::writemessagemaybetoarray(
      3, this->nested_type(i), output);
  }

  // repeated .google.protobuf.enumdescriptorproto enum_type = 4;
  for (int i = 0; i < this->enum_type_size(); i++) {
    ::google::protobuf::internal::wireformatlite::writemessagemaybetoarray(
      4, this->enum_type(i), output);
  }

  // repeated .google.protobuf.descriptorproto.extensionrange extension_range = 5;
  for (int i = 0; i < this->extension_range_size(); i++) {
    ::google::protobuf::internal::wireformatlite::writemessagemaybetoarray(
      5, this->extension_range(i), output);
  }

  // repeated .google.protobuf.fielddescriptorproto extension = 6;
  for (int i = 0; i < this->extension_size(); i++) {
    ::google::protobuf::internal::wireformatlite::writemessagemaybetoarray(
      6, this->extension(i), output);
  }

  // optional .google.protobuf.messageoptions options = 7;
  if (has_options()) {
    ::google::protobuf::internal::wireformatlite::writemessagemaybetoarray(
      7, this->options(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::wireformat::serializeunknownfields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* descriptorproto::serializewithcachedsizestoarray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::wireformat::serialize);
    target =
      ::google::protobuf::internal::wireformatlite::writestringtoarray(
        1, this->name(), target);
  }

  // repeated .google.protobuf.fielddescriptorproto field = 2;
  for (int i = 0; i < this->field_size(); i++) {
    target = ::google::protobuf::internal::wireformatlite::
      writemessagenovirtualtoarray(
        2, this->field(i), target);
  }

  // repeated .google.protobuf.descriptorproto nested_type = 3;
  for (int i = 0; i < this->nested_type_size(); i++) {
    target = ::google::protobuf::internal::wireformatlite::
      writemessagenovirtualtoarray(
        3, this->nested_type(i), target);
  }

  // repeated .google.protobuf.enumdescriptorproto enum_type = 4;
  for (int i = 0; i < this->enum_type_size(); i++) {
    target = ::google::protobuf::internal::wireformatlite::
      writemessagenovirtualtoarray(
        4, this->enum_type(i), target);
  }

  // repeated .google.protobuf.descriptorproto.extensionrange extension_range = 5;
  for (int i = 0; i < this->extension_range_size(); i++) {
    target = ::google::protobuf::internal::wireformatlite::
      writemessagenovirtualtoarray(
        5, this->extension_range(i), target);
  }

  // repeated .google.protobuf.fielddescriptorproto extension = 6;
  for (int i = 0; i < this->extension_size(); i++) {
    target = ::google::protobuf::internal::wireformatlite::
      writemessagenovirtualtoarray(
        6, this->extension(i), target);
  }

  // optional .google.protobuf.messageoptions options = 7;
  if (has_options()) {
    target = ::google::protobuf::internal::wireformatlite::
      writemessagenovirtualtoarray(
        7, this->options(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::wireformat::serializeunknownfieldstoarray(
        unknown_fields(), target);
  }
  return target;
}

int descriptorproto::bytesize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::stringsize(
          this->name());
    }

    // optional .google.protobuf.messageoptions options = 7;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::messagesizenovirtual(
          this->options());
    }

  }
  // repeated .google.protobuf.fielddescriptorproto field = 2;
  total_size += 1 * this->field_size();
  for (int i = 0; i < this->field_size(); i++) {
    total_size +=
      ::google::protobuf::internal::wireformatlite::messagesizenovirtual(
        this->field(i));
  }

  // repeated .google.protobuf.fielddescriptorproto extension = 6;
  total_size += 1 * this->extension_size();
  for (int i = 0; i < this->extension_size(); i++) {
    total_size +=
      ::google::protobuf::internal::wireformatlite::messagesizenovirtual(
        this->extension(i));
  }

  // repeated .google.protobuf.descriptorproto nested_type = 3;
  total_size += 1 * this->nested_type_size();
  for (int i = 0; i < this->nested_type_size(); i++) {
    total_size +=
      ::google::protobuf::internal::wireformatlite::messagesizenovirtual(
        this->nested_type(i));
  }

  // repeated .google.protobuf.enumdescriptorproto enum_type = 4;
  total_size += 1 * this->enum_type_size();
  for (int i = 0; i < this->enum_type_size(); i++) {
    total_size +=
      ::google::protobuf::internal::wireformatlite::messagesizenovirtual(
        this->enum_type(i));
  }

  // repeated .google.protobuf.descriptorproto.extensionrange extension_range = 5;
  total_size += 1 * this->extension_range_size();
  for (int i = 0; i < this->extension_range_size(); i++) {
    total_size +=
      ::google::protobuf::internal::wireformatlite::messagesizenovirtual(
        this->extension_range(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::wireformat::computeunknownfieldssize(
        unknown_fields());
  }
  google_safe_concurrent_writes_begin();
  _cached_size_ = total_size;
  google_safe_concurrent_writes_end();
  return total_size;
}

void descriptorproto::mergefrom(const ::google::protobuf::message& from) {
  google_check_ne(&from, this);
  const descriptorproto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const descriptorproto*>(
      &from);
  if (source == null) {
    ::google::protobuf::internal::reflectionops::merge(from, this);
  } else {
    mergefrom(*source);
  }
}

void descriptorproto::mergefrom(const descriptorproto& from) {
  google_check_ne(&from, this);
  field_.mergefrom(from.field_);
  extension_.mergefrom(from.extension_);
  nested_type_.mergefrom(from.nested_type_);
  enum_type_.mergefrom(from.enum_type_);
  extension_range_.mergefrom(from.extension_range_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_options()) {
      mutable_options()->::google::protobuf::messageoptions::mergefrom(from.options());
    }
  }
  mutable_unknown_fields()->mergefrom(from.unknown_fields());
}

void descriptorproto::copyfrom(const ::google::protobuf::message& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

void descriptorproto::copyfrom(const descriptorproto& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

bool descriptorproto::isinitialized() const {

  for (int i = 0; i < field_size(); i++) {
    if (!this->field(i).isinitialized()) return false;
  }
  for (int i = 0; i < extension_size(); i++) {
    if (!this->extension(i).isinitialized()) return false;
  }
  for (int i = 0; i < nested_type_size(); i++) {
    if (!this->nested_type(i).isinitialized()) return false;
  }
  for (int i = 0; i < enum_type_size(); i++) {
    if (!this->enum_type(i).isinitialized()) return false;
  }
  if (has_options()) {
    if (!this->options().isinitialized()) return false;
  }
  return true;
}

void descriptorproto::swap(descriptorproto* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    field_.swap(&other->field_);
    extension_.swap(&other->extension_);
    nested_type_.swap(&other->nested_type_);
    enum_type_.swap(&other->enum_type_);
    extension_range_.swap(&other->extension_range_);
    std::swap(options_, other->options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::metadata descriptorproto::getmetadata() const {
  protobuf_assigndescriptorsonce();
  ::google::protobuf::metadata metadata;
  metadata.descriptor = descriptorproto_descriptor_;
  metadata.reflection = descriptorproto_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::enumdescriptor* fielddescriptorproto_type_descriptor() {
  protobuf_assigndescriptorsonce();
  return fielddescriptorproto_type_descriptor_;
}
bool fielddescriptorproto_type_isvalid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

#ifndef _msc_ver
const fielddescriptorproto_type fielddescriptorproto::type_double;
const fielddescriptorproto_type fielddescriptorproto::type_float;
const fielddescriptorproto_type fielddescriptorproto::type_int64;
const fielddescriptorproto_type fielddescriptorproto::type_uint64;
const fielddescriptorproto_type fielddescriptorproto::type_int32;
const fielddescriptorproto_type fielddescriptorproto::type_fixed64;
const fielddescriptorproto_type fielddescriptorproto::type_fixed32;
const fielddescriptorproto_type fielddescriptorproto::type_bool;
const fielddescriptorproto_type fielddescriptorproto::type_string;
const fielddescriptorproto_type fielddescriptorproto::type_group;
const fielddescriptorproto_type fielddescriptorproto::type_message;
const fielddescriptorproto_type fielddescriptorproto::type_bytes;
const fielddescriptorproto_type fielddescriptorproto::type_uint32;
const fielddescriptorproto_type fielddescriptorproto::type_enum;
const fielddescriptorproto_type fielddescriptorproto::type_sfixed32;
const fielddescriptorproto_type fielddescriptorproto::type_sfixed64;
const fielddescriptorproto_type fielddescriptorproto::type_sint32;
const fielddescriptorproto_type fielddescriptorproto::type_sint64;
const fielddescriptorproto_type fielddescriptorproto::type_min;
const fielddescriptorproto_type fielddescriptorproto::type_max;
const int fielddescriptorproto::type_arraysize;
#endif  // _msc_ver
const ::google::protobuf::enumdescriptor* fielddescriptorproto_label_descriptor() {
  protobuf_assigndescriptorsonce();
  return fielddescriptorproto_label_descriptor_;
}
bool fielddescriptorproto_label_isvalid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _msc_ver
const fielddescriptorproto_label fielddescriptorproto::label_optional;
const fielddescriptorproto_label fielddescriptorproto::label_required;
const fielddescriptorproto_label fielddescriptorproto::label_repeated;
const fielddescriptorproto_label fielddescriptorproto::label_min;
const fielddescriptorproto_label fielddescriptorproto::label_max;
const int fielddescriptorproto::label_arraysize;
#endif  // _msc_ver
#ifndef _msc_ver
const int fielddescriptorproto::knamefieldnumber;
const int fielddescriptorproto::knumberfieldnumber;
const int fielddescriptorproto::klabelfieldnumber;
const int fielddescriptorproto::ktypefieldnumber;
const int fielddescriptorproto::ktypenamefieldnumber;
const int fielddescriptorproto::kextendeefieldnumber;
const int fielddescriptorproto::kdefaultvaluefieldnumber;
const int fielddescriptorproto::koptionsfieldnumber;
#endif  // !_msc_ver

fielddescriptorproto::fielddescriptorproto()
  : ::google::protobuf::message() {
  sharedctor();
}

void fielddescriptorproto::initasdefaultinstance() {
  options_ = const_cast< ::google::protobuf::fieldoptions*>(&::google::protobuf::fieldoptions::default_instance());
}

fielddescriptorproto::fielddescriptorproto(const fielddescriptorproto& from)
  : ::google::protobuf::message() {
  sharedctor();
  mergefrom(from);
}

void fielddescriptorproto::sharedctor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kemptystring);
  number_ = 0;
  label_ = 1;
  type_ = 1;
  type_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kemptystring);
  extendee_ = const_cast< ::std::string*>(&::google::protobuf::internal::kemptystring);
  default_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kemptystring);
  options_ = null;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fielddescriptorproto::~fielddescriptorproto() {
  shareddtor();
}

void fielddescriptorproto::shareddtor() {
  if (name_ != &::google::protobuf::internal::kemptystring) {
    delete name_;
  }
  if (type_name_ != &::google::protobuf::internal::kemptystring) {
    delete type_name_;
  }
  if (extendee_ != &::google::protobuf::internal::kemptystring) {
    delete extendee_;
  }
  if (default_value_ != &::google::protobuf::internal::kemptystring) {
    delete default_value_;
  }
  if (this != default_instance_) {
    delete options_;
  }
}

void fielddescriptorproto::setcachedsize(int size) const {
  google_safe_concurrent_writes_begin();
  _cached_size_ = size;
  google_safe_concurrent_writes_end();
}
const ::google::protobuf::descriptor* fielddescriptorproto::descriptor() {
  protobuf_assigndescriptorsonce();
  return fielddescriptorproto_descriptor_;
}

const fielddescriptorproto& fielddescriptorproto::default_instance() {
  if (default_instance_ == null) protobuf_adddesc_google_2fprotobuf_2fdescriptor_2eproto();
  return *default_instance_;
}

fielddescriptorproto* fielddescriptorproto::default_instance_ = null;

fielddescriptorproto* fielddescriptorproto::new() const {
  return new fielddescriptorproto;
}

void fielddescriptorproto::clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kemptystring) {
        name_->clear();
      }
    }
    number_ = 0;
    label_ = 1;
    type_ = 1;
    if (has_type_name()) {
      if (type_name_ != &::google::protobuf::internal::kemptystring) {
        type_name_->clear();
      }
    }
    if (has_extendee()) {
      if (extendee_ != &::google::protobuf::internal::kemptystring) {
        extendee_->clear();
      }
    }
    if (has_default_value()) {
      if (default_value_ != &::google::protobuf::internal::kemptystring) {
        default_value_->clear();
      }
    }
    if (has_options()) {
      if (options_ != null) options_->::google::protobuf::fieldoptions::clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool fielddescriptorproto::mergepartialfromcodedstream(
    ::google::protobuf::io::codedinputstream* input) {
#define do_(expression) if (!(expression)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->readtag()) != 0) {
    switch (::google::protobuf::internal::wireformatlite::gettagfieldnumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
          do_(::google::protobuf::internal::wireformatlite::readstring(
                input, this->mutable_name()));
          ::google::protobuf::internal::wireformat::verifyutf8string(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::wireformat::parse);
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(18)) goto parse_extendee;
        break;
      }

      // optional string extendee = 2;
      case 2: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_extendee:
          do_(::google::protobuf::internal::wireformatlite::readstring(
                input, this->mutable_extendee()));
          ::google::protobuf::internal::wireformat::verifyutf8string(
            this->extendee().data(), this->extendee().length(),
            ::google::protobuf::internal::wireformat::parse);
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(24)) goto parse_number;
        break;
      }

      // optional int32 number = 3;
      case 3: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_varint) {
         parse_number:
          do_((::google::protobuf::internal::wireformatlite::readprimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::wireformatlite::type_int32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(32)) goto parse_label;
        break;
      }

      // optional .google.protobuf.fielddescriptorproto.label label = 4;
      case 4: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_varint) {
         parse_label:
          int value;
          do_((::google::protobuf::internal::wireformatlite::readprimitive<
                   int, ::google::protobuf::internal::wireformatlite::type_enum>(
                 input, &value)));
          if (::google::protobuf::fielddescriptorproto_label_isvalid(value)) {
            set_label(static_cast< ::google::protobuf::fielddescriptorproto_label >(value));
          } else {
            mutable_unknown_fields()->addvarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(40)) goto parse_type;
        break;
      }

      // optional .google.protobuf.fielddescriptorproto.type type = 5;
      case 5: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_varint) {
         parse_type:
          int value;
          do_((::google::protobuf::internal::wireformatlite::readprimitive<
                   int, ::google::protobuf::internal::wireformatlite::type_enum>(
                 input, &value)));
          if (::google::protobuf::fielddescriptorproto_type_isvalid(value)) {
            set_type(static_cast< ::google::protobuf::fielddescriptorproto_type >(value));
          } else {
            mutable_unknown_fields()->addvarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(50)) goto parse_type_name;
        break;
      }

      // optional string type_name = 6;
      case 6: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_type_name:
          do_(::google::protobuf::internal::wireformatlite::readstring(
                input, this->mutable_type_name()));
          ::google::protobuf::internal::wireformat::verifyutf8string(
            this->type_name().data(), this->type_name().length(),
            ::google::protobuf::internal::wireformat::parse);
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(58)) goto parse_default_value;
        break;
      }

      // optional string default_value = 7;
      case 7: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_default_value:
          do_(::google::protobuf::internal::wireformatlite::readstring(
                input, this->mutable_default_value()));
          ::google::protobuf::internal::wireformat::verifyutf8string(
            this->default_value().data(), this->default_value().length(),
            ::google::protobuf::internal::wireformat::parse);
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(66)) goto parse_options;
        break;
      }

      // optional .google.protobuf.fieldoptions options = 8;
      case 8: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_options:
          do_(::google::protobuf::internal::wireformatlite::readmessagenovirtual(
               input, mutable_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->expectatend()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_end_group) {
          return true;
        }
        do_(::google::protobuf::internal::wireformat::skipfield(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef do_
}

void fielddescriptorproto::serializewithcachedsizes(
    ::google::protobuf::io::codedoutputstream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::wireformat::serialize);
    ::google::protobuf::internal::wireformatlite::writestring(
      1, this->name(), output);
  }

  // optional string extendee = 2;
  if (has_extendee()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->extendee().data(), this->extendee().length(),
      ::google::protobuf::internal::wireformat::serialize);
    ::google::protobuf::internal::wireformatlite::writestring(
      2, this->extendee(), output);
  }

  // optional int32 number = 3;
  if (has_number()) {
    ::google::protobuf::internal::wireformatlite::writeint32(3, this->number(), output);
  }

  // optional .google.protobuf.fielddescriptorproto.label label = 4;
  if (has_label()) {
    ::google::protobuf::internal::wireformatlite::writeenum(
      4, this->label(), output);
  }

  // optional .google.protobuf.fielddescriptorproto.type type = 5;
  if (has_type()) {
    ::google::protobuf::internal::wireformatlite::writeenum(
      5, this->type(), output);
  }

  // optional string type_name = 6;
  if (has_type_name()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->type_name().data(), this->type_name().length(),
      ::google::protobuf::internal::wireformat::serialize);
    ::google::protobuf::internal::wireformatlite::writestring(
      6, this->type_name(), output);
  }

  // optional string default_value = 7;
  if (has_default_value()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->default_value().data(), this->default_value().length(),
      ::google::protobuf::internal::wireformat::serialize);
    ::google::protobuf::internal::wireformatlite::writestring(
      7, this->default_value(), output);
  }

  // optional .google.protobuf.fieldoptions options = 8;
  if (has_options()) {
    ::google::protobuf::internal::wireformatlite::writemessagemaybetoarray(
      8, this->options(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::wireformat::serializeunknownfields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fielddescriptorproto::serializewithcachedsizestoarray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::wireformat::serialize);
    target =
      ::google::protobuf::internal::wireformatlite::writestringtoarray(
        1, this->name(), target);
  }

  // optional string extendee = 2;
  if (has_extendee()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->extendee().data(), this->extendee().length(),
      ::google::protobuf::internal::wireformat::serialize);
    target =
      ::google::protobuf::internal::wireformatlite::writestringtoarray(
        2, this->extendee(), target);
  }

  // optional int32 number = 3;
  if (has_number()) {
    target = ::google::protobuf::internal::wireformatlite::writeint32toarray(3, this->number(), target);
  }

  // optional .google.protobuf.fielddescriptorproto.label label = 4;
  if (has_label()) {
    target = ::google::protobuf::internal::wireformatlite::writeenumtoarray(
      4, this->label(), target);
  }

  // optional .google.protobuf.fielddescriptorproto.type type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::wireformatlite::writeenumtoarray(
      5, this->type(), target);
  }

  // optional string type_name = 6;
  if (has_type_name()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->type_name().data(), this->type_name().length(),
      ::google::protobuf::internal::wireformat::serialize);
    target =
      ::google::protobuf::internal::wireformatlite::writestringtoarray(
        6, this->type_name(), target);
  }

  // optional string default_value = 7;
  if (has_default_value()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->default_value().data(), this->default_value().length(),
      ::google::protobuf::internal::wireformat::serialize);
    target =
      ::google::protobuf::internal::wireformatlite::writestringtoarray(
        7, this->default_value(), target);
  }

  // optional .google.protobuf.fieldoptions options = 8;
  if (has_options()) {
    target = ::google::protobuf::internal::wireformatlite::
      writemessagenovirtualtoarray(
        8, this->options(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::wireformat::serializeunknownfieldstoarray(
        unknown_fields(), target);
  }
  return target;
}

int fielddescriptorproto::bytesize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::stringsize(
          this->name());
    }

    // optional int32 number = 3;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::int32size(
          this->number());
    }

    // optional .google.protobuf.fielddescriptorproto.label label = 4;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::enumsize(this->label());
    }

    // optional .google.protobuf.fielddescriptorproto.type type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::enumsize(this->type());
    }

    // optional string type_name = 6;
    if (has_type_name()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::stringsize(
          this->type_name());
    }

    // optional string extendee = 2;
    if (has_extendee()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::stringsize(
          this->extendee());
    }

    // optional string default_value = 7;
    if (has_default_value()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::stringsize(
          this->default_value());
    }

    // optional .google.protobuf.fieldoptions options = 8;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::messagesizenovirtual(
          this->options());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::wireformat::computeunknownfieldssize(
        unknown_fields());
  }
  google_safe_concurrent_writes_begin();
  _cached_size_ = total_size;
  google_safe_concurrent_writes_end();
  return total_size;
}

void fielddescriptorproto::mergefrom(const ::google::protobuf::message& from) {
  google_check_ne(&from, this);
  const fielddescriptorproto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fielddescriptorproto*>(
      &from);
  if (source == null) {
    ::google::protobuf::internal::reflectionops::merge(from, this);
  } else {
    mergefrom(*source);
  }
}

void fielddescriptorproto::mergefrom(const fielddescriptorproto& from) {
  google_check_ne(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_type_name()) {
      set_type_name(from.type_name());
    }
    if (from.has_extendee()) {
      set_extendee(from.extendee());
    }
    if (from.has_default_value()) {
      set_default_value(from.default_value());
    }
    if (from.has_options()) {
      mutable_options()->::google::protobuf::fieldoptions::mergefrom(from.options());
    }
  }
  mutable_unknown_fields()->mergefrom(from.unknown_fields());
}

void fielddescriptorproto::copyfrom(const ::google::protobuf::message& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

void fielddescriptorproto::copyfrom(const fielddescriptorproto& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

bool fielddescriptorproto::isinitialized() const {

  if (has_options()) {
    if (!this->options().isinitialized()) return false;
  }
  return true;
}

void fielddescriptorproto::swap(fielddescriptorproto* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(number_, other->number_);
    std::swap(label_, other->label_);
    std::swap(type_, other->type_);
    std::swap(type_name_, other->type_name_);
    std::swap(extendee_, other->extendee_);
    std::swap(default_value_, other->default_value_);
    std::swap(options_, other->options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::metadata fielddescriptorproto::getmetadata() const {
  protobuf_assigndescriptorsonce();
  ::google::protobuf::metadata metadata;
  metadata.descriptor = fielddescriptorproto_descriptor_;
  metadata.reflection = fielddescriptorproto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _msc_ver
const int enumdescriptorproto::knamefieldnumber;
const int enumdescriptorproto::kvaluefieldnumber;
const int enumdescriptorproto::koptionsfieldnumber;
#endif  // !_msc_ver

enumdescriptorproto::enumdescriptorproto()
  : ::google::protobuf::message() {
  sharedctor();
}

void enumdescriptorproto::initasdefaultinstance() {
  options_ = const_cast< ::google::protobuf::enumoptions*>(&::google::protobuf::enumoptions::default_instance());
}

enumdescriptorproto::enumdescriptorproto(const enumdescriptorproto& from)
  : ::google::protobuf::message() {
  sharedctor();
  mergefrom(from);
}

void enumdescriptorproto::sharedctor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kemptystring);
  options_ = null;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

enumdescriptorproto::~enumdescriptorproto() {
  shareddtor();
}

void enumdescriptorproto::shareddtor() {
  if (name_ != &::google::protobuf::internal::kemptystring) {
    delete name_;
  }
  if (this != default_instance_) {
    delete options_;
  }
}

void enumdescriptorproto::setcachedsize(int size) const {
  google_safe_concurrent_writes_begin();
  _cached_size_ = size;
  google_safe_concurrent_writes_end();
}
const ::google::protobuf::descriptor* enumdescriptorproto::descriptor() {
  protobuf_assigndescriptorsonce();
  return enumdescriptorproto_descriptor_;
}

const enumdescriptorproto& enumdescriptorproto::default_instance() {
  if (default_instance_ == null) protobuf_adddesc_google_2fprotobuf_2fdescriptor_2eproto();
  return *default_instance_;
}

enumdescriptorproto* enumdescriptorproto::default_instance_ = null;

enumdescriptorproto* enumdescriptorproto::new() const {
  return new enumdescriptorproto;
}

void enumdescriptorproto::clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kemptystring) {
        name_->clear();
      }
    }
    if (has_options()) {
      if (options_ != null) options_->::google::protobuf::enumoptions::clear();
    }
  }
  value_.clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool enumdescriptorproto::mergepartialfromcodedstream(
    ::google::protobuf::io::codedinputstream* input) {
#define do_(expression) if (!(expression)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->readtag()) != 0) {
    switch (::google::protobuf::internal::wireformatlite::gettagfieldnumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
          do_(::google::protobuf::internal::wireformatlite::readstring(
                input, this->mutable_name()));
          ::google::protobuf::internal::wireformat::verifyutf8string(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::wireformat::parse);
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(18)) goto parse_value;
        break;
      }

      // repeated .google.protobuf.enumvaluedescriptorproto value = 2;
      case 2: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_value:
          do_(::google::protobuf::internal::wireformatlite::readmessagenovirtual(
                input, add_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(18)) goto parse_value;
        if (input->expecttag(26)) goto parse_options;
        break;
      }

      // optional .google.protobuf.enumoptions options = 3;
      case 3: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_options:
          do_(::google::protobuf::internal::wireformatlite::readmessagenovirtual(
               input, mutable_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->expectatend()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_end_group) {
          return true;
        }
        do_(::google::protobuf::internal::wireformat::skipfield(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef do_
}

void enumdescriptorproto::serializewithcachedsizes(
    ::google::protobuf::io::codedoutputstream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::wireformat::serialize);
    ::google::protobuf::internal::wireformatlite::writestring(
      1, this->name(), output);
  }

  // repeated .google.protobuf.enumvaluedescriptorproto value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::wireformatlite::writemessagemaybetoarray(
      2, this->value(i), output);
  }

  // optional .google.protobuf.enumoptions options = 3;
  if (has_options()) {
    ::google::protobuf::internal::wireformatlite::writemessagemaybetoarray(
      3, this->options(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::wireformat::serializeunknownfields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* enumdescriptorproto::serializewithcachedsizestoarray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::wireformat::serialize);
    target =
      ::google::protobuf::internal::wireformatlite::writestringtoarray(
        1, this->name(), target);
  }

  // repeated .google.protobuf.enumvaluedescriptorproto value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::wireformatlite::
      writemessagenovirtualtoarray(
        2, this->value(i), target);
  }

  // optional .google.protobuf.enumoptions options = 3;
  if (has_options()) {
    target = ::google::protobuf::internal::wireformatlite::
      writemessagenovirtualtoarray(
        3, this->options(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::wireformat::serializeunknownfieldstoarray(
        unknown_fields(), target);
  }
  return target;
}

int enumdescriptorproto::bytesize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::stringsize(
          this->name());
    }

    // optional .google.protobuf.enumoptions options = 3;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::messagesizenovirtual(
          this->options());
    }

  }
  // repeated .google.protobuf.enumvaluedescriptorproto value = 2;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::wireformatlite::messagesizenovirtual(
        this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::wireformat::computeunknownfieldssize(
        unknown_fields());
  }
  google_safe_concurrent_writes_begin();
  _cached_size_ = total_size;
  google_safe_concurrent_writes_end();
  return total_size;
}

void enumdescriptorproto::mergefrom(const ::google::protobuf::message& from) {
  google_check_ne(&from, this);
  const enumdescriptorproto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const enumdescriptorproto*>(
      &from);
  if (source == null) {
    ::google::protobuf::internal::reflectionops::merge(from, this);
  } else {
    mergefrom(*source);
  }
}

void enumdescriptorproto::mergefrom(const enumdescriptorproto& from) {
  google_check_ne(&from, this);
  value_.mergefrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_options()) {
      mutable_options()->::google::protobuf::enumoptions::mergefrom(from.options());
    }
  }
  mutable_unknown_fields()->mergefrom(from.unknown_fields());
}

void enumdescriptorproto::copyfrom(const ::google::protobuf::message& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

void enumdescriptorproto::copyfrom(const enumdescriptorproto& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

bool enumdescriptorproto::isinitialized() const {

  for (int i = 0; i < value_size(); i++) {
    if (!this->value(i).isinitialized()) return false;
  }
  if (has_options()) {
    if (!this->options().isinitialized()) return false;
  }
  return true;
}

void enumdescriptorproto::swap(enumdescriptorproto* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    value_.swap(&other->value_);
    std::swap(options_, other->options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::metadata enumdescriptorproto::getmetadata() const {
  protobuf_assigndescriptorsonce();
  ::google::protobuf::metadata metadata;
  metadata.descriptor = enumdescriptorproto_descriptor_;
  metadata.reflection = enumdescriptorproto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _msc_ver
const int enumvaluedescriptorproto::knamefieldnumber;
const int enumvaluedescriptorproto::knumberfieldnumber;
const int enumvaluedescriptorproto::koptionsfieldnumber;
#endif  // !_msc_ver

enumvaluedescriptorproto::enumvaluedescriptorproto()
  : ::google::protobuf::message() {
  sharedctor();
}

void enumvaluedescriptorproto::initasdefaultinstance() {
  options_ = const_cast< ::google::protobuf::enumvalueoptions*>(&::google::protobuf::enumvalueoptions::default_instance());
}

enumvaluedescriptorproto::enumvaluedescriptorproto(const enumvaluedescriptorproto& from)
  : ::google::protobuf::message() {
  sharedctor();
  mergefrom(from);
}

void enumvaluedescriptorproto::sharedctor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kemptystring);
  number_ = 0;
  options_ = null;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

enumvaluedescriptorproto::~enumvaluedescriptorproto() {
  shareddtor();
}

void enumvaluedescriptorproto::shareddtor() {
  if (name_ != &::google::protobuf::internal::kemptystring) {
    delete name_;
  }
  if (this != default_instance_) {
    delete options_;
  }
}

void enumvaluedescriptorproto::setcachedsize(int size) const {
  google_safe_concurrent_writes_begin();
  _cached_size_ = size;
  google_safe_concurrent_writes_end();
}
const ::google::protobuf::descriptor* enumvaluedescriptorproto::descriptor() {
  protobuf_assigndescriptorsonce();
  return enumvaluedescriptorproto_descriptor_;
}

const enumvaluedescriptorproto& enumvaluedescriptorproto::default_instance() {
  if (default_instance_ == null) protobuf_adddesc_google_2fprotobuf_2fdescriptor_2eproto();
  return *default_instance_;
}

enumvaluedescriptorproto* enumvaluedescriptorproto::default_instance_ = null;

enumvaluedescriptorproto* enumvaluedescriptorproto::new() const {
  return new enumvaluedescriptorproto;
}

void enumvaluedescriptorproto::clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kemptystring) {
        name_->clear();
      }
    }
    number_ = 0;
    if (has_options()) {
      if (options_ != null) options_->::google::protobuf::enumvalueoptions::clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool enumvaluedescriptorproto::mergepartialfromcodedstream(
    ::google::protobuf::io::codedinputstream* input) {
#define do_(expression) if (!(expression)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->readtag()) != 0) {
    switch (::google::protobuf::internal::wireformatlite::gettagfieldnumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
          do_(::google::protobuf::internal::wireformatlite::readstring(
                input, this->mutable_name()));
          ::google::protobuf::internal::wireformat::verifyutf8string(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::wireformat::parse);
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(16)) goto parse_number;
        break;
      }

      // optional int32 number = 2;
      case 2: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_varint) {
         parse_number:
          do_((::google::protobuf::internal::wireformatlite::readprimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::wireformatlite::type_int32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(26)) goto parse_options;
        break;
      }

      // optional .google.protobuf.enumvalueoptions options = 3;
      case 3: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_options:
          do_(::google::protobuf::internal::wireformatlite::readmessagenovirtual(
               input, mutable_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->expectatend()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_end_group) {
          return true;
        }
        do_(::google::protobuf::internal::wireformat::skipfield(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef do_
}

void enumvaluedescriptorproto::serializewithcachedsizes(
    ::google::protobuf::io::codedoutputstream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::wireformat::serialize);
    ::google::protobuf::internal::wireformatlite::writestring(
      1, this->name(), output);
  }

  // optional int32 number = 2;
  if (has_number()) {
    ::google::protobuf::internal::wireformatlite::writeint32(2, this->number(), output);
  }

  // optional .google.protobuf.enumvalueoptions options = 3;
  if (has_options()) {
    ::google::protobuf::internal::wireformatlite::writemessagemaybetoarray(
      3, this->options(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::wireformat::serializeunknownfields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* enumvaluedescriptorproto::serializewithcachedsizestoarray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::wireformat::serialize);
    target =
      ::google::protobuf::internal::wireformatlite::writestringtoarray(
        1, this->name(), target);
  }

  // optional int32 number = 2;
  if (has_number()) {
    target = ::google::protobuf::internal::wireformatlite::writeint32toarray(2, this->number(), target);
  }

  // optional .google.protobuf.enumvalueoptions options = 3;
  if (has_options()) {
    target = ::google::protobuf::internal::wireformatlite::
      writemessagenovirtualtoarray(
        3, this->options(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::wireformat::serializeunknownfieldstoarray(
        unknown_fields(), target);
  }
  return target;
}

int enumvaluedescriptorproto::bytesize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::stringsize(
          this->name());
    }

    // optional int32 number = 2;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::int32size(
          this->number());
    }

    // optional .google.protobuf.enumvalueoptions options = 3;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::messagesizenovirtual(
          this->options());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::wireformat::computeunknownfieldssize(
        unknown_fields());
  }
  google_safe_concurrent_writes_begin();
  _cached_size_ = total_size;
  google_safe_concurrent_writes_end();
  return total_size;
}

void enumvaluedescriptorproto::mergefrom(const ::google::protobuf::message& from) {
  google_check_ne(&from, this);
  const enumvaluedescriptorproto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const enumvaluedescriptorproto*>(
      &from);
  if (source == null) {
    ::google::protobuf::internal::reflectionops::merge(from, this);
  } else {
    mergefrom(*source);
  }
}

void enumvaluedescriptorproto::mergefrom(const enumvaluedescriptorproto& from) {
  google_check_ne(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_options()) {
      mutable_options()->::google::protobuf::enumvalueoptions::mergefrom(from.options());
    }
  }
  mutable_unknown_fields()->mergefrom(from.unknown_fields());
}

void enumvaluedescriptorproto::copyfrom(const ::google::protobuf::message& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

void enumvaluedescriptorproto::copyfrom(const enumvaluedescriptorproto& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

bool enumvaluedescriptorproto::isinitialized() const {

  if (has_options()) {
    if (!this->options().isinitialized()) return false;
  }
  return true;
}

void enumvaluedescriptorproto::swap(enumvaluedescriptorproto* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(number_, other->number_);
    std::swap(options_, other->options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::metadata enumvaluedescriptorproto::getmetadata() const {
  protobuf_assigndescriptorsonce();
  ::google::protobuf::metadata metadata;
  metadata.descriptor = enumvaluedescriptorproto_descriptor_;
  metadata.reflection = enumvaluedescriptorproto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _msc_ver
const int servicedescriptorproto::knamefieldnumber;
const int servicedescriptorproto::kmethodfieldnumber;
const int servicedescriptorproto::koptionsfieldnumber;
#endif  // !_msc_ver

servicedescriptorproto::servicedescriptorproto()
  : ::google::protobuf::message() {
  sharedctor();
}

void servicedescriptorproto::initasdefaultinstance() {
  options_ = const_cast< ::google::protobuf::serviceoptions*>(&::google::protobuf::serviceoptions::default_instance());
}

servicedescriptorproto::servicedescriptorproto(const servicedescriptorproto& from)
  : ::google::protobuf::message() {
  sharedctor();
  mergefrom(from);
}

void servicedescriptorproto::sharedctor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kemptystring);
  options_ = null;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

servicedescriptorproto::~servicedescriptorproto() {
  shareddtor();
}

void servicedescriptorproto::shareddtor() {
  if (name_ != &::google::protobuf::internal::kemptystring) {
    delete name_;
  }
  if (this != default_instance_) {
    delete options_;
  }
}

void servicedescriptorproto::setcachedsize(int size) const {
  google_safe_concurrent_writes_begin();
  _cached_size_ = size;
  google_safe_concurrent_writes_end();
}
const ::google::protobuf::descriptor* servicedescriptorproto::descriptor() {
  protobuf_assigndescriptorsonce();
  return servicedescriptorproto_descriptor_;
}

const servicedescriptorproto& servicedescriptorproto::default_instance() {
  if (default_instance_ == null) protobuf_adddesc_google_2fprotobuf_2fdescriptor_2eproto();
  return *default_instance_;
}

servicedescriptorproto* servicedescriptorproto::default_instance_ = null;

servicedescriptorproto* servicedescriptorproto::new() const {
  return new servicedescriptorproto;
}

void servicedescriptorproto::clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kemptystring) {
        name_->clear();
      }
    }
    if (has_options()) {
      if (options_ != null) options_->::google::protobuf::serviceoptions::clear();
    }
  }
  method_.clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool servicedescriptorproto::mergepartialfromcodedstream(
    ::google::protobuf::io::codedinputstream* input) {
#define do_(expression) if (!(expression)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->readtag()) != 0) {
    switch (::google::protobuf::internal::wireformatlite::gettagfieldnumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
          do_(::google::protobuf::internal::wireformatlite::readstring(
                input, this->mutable_name()));
          ::google::protobuf::internal::wireformat::verifyutf8string(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::wireformat::parse);
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(18)) goto parse_method;
        break;
      }

      // repeated .google.protobuf.methoddescriptorproto method = 2;
      case 2: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_method:
          do_(::google::protobuf::internal::wireformatlite::readmessagenovirtual(
                input, add_method()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(18)) goto parse_method;
        if (input->expecttag(26)) goto parse_options;
        break;
      }

      // optional .google.protobuf.serviceoptions options = 3;
      case 3: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_options:
          do_(::google::protobuf::internal::wireformatlite::readmessagenovirtual(
               input, mutable_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->expectatend()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_end_group) {
          return true;
        }
        do_(::google::protobuf::internal::wireformat::skipfield(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef do_
}

void servicedescriptorproto::serializewithcachedsizes(
    ::google::protobuf::io::codedoutputstream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::wireformat::serialize);
    ::google::protobuf::internal::wireformatlite::writestring(
      1, this->name(), output);
  }

  // repeated .google.protobuf.methoddescriptorproto method = 2;
  for (int i = 0; i < this->method_size(); i++) {
    ::google::protobuf::internal::wireformatlite::writemessagemaybetoarray(
      2, this->method(i), output);
  }

  // optional .google.protobuf.serviceoptions options = 3;
  if (has_options()) {
    ::google::protobuf::internal::wireformatlite::writemessagemaybetoarray(
      3, this->options(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::wireformat::serializeunknownfields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* servicedescriptorproto::serializewithcachedsizestoarray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::wireformat::serialize);
    target =
      ::google::protobuf::internal::wireformatlite::writestringtoarray(
        1, this->name(), target);
  }

  // repeated .google.protobuf.methoddescriptorproto method = 2;
  for (int i = 0; i < this->method_size(); i++) {
    target = ::google::protobuf::internal::wireformatlite::
      writemessagenovirtualtoarray(
        2, this->method(i), target);
  }

  // optional .google.protobuf.serviceoptions options = 3;
  if (has_options()) {
    target = ::google::protobuf::internal::wireformatlite::
      writemessagenovirtualtoarray(
        3, this->options(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::wireformat::serializeunknownfieldstoarray(
        unknown_fields(), target);
  }
  return target;
}

int servicedescriptorproto::bytesize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::stringsize(
          this->name());
    }

    // optional .google.protobuf.serviceoptions options = 3;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::messagesizenovirtual(
          this->options());
    }

  }
  // repeated .google.protobuf.methoddescriptorproto method = 2;
  total_size += 1 * this->method_size();
  for (int i = 0; i < this->method_size(); i++) {
    total_size +=
      ::google::protobuf::internal::wireformatlite::messagesizenovirtual(
        this->method(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::wireformat::computeunknownfieldssize(
        unknown_fields());
  }
  google_safe_concurrent_writes_begin();
  _cached_size_ = total_size;
  google_safe_concurrent_writes_end();
  return total_size;
}

void servicedescriptorproto::mergefrom(const ::google::protobuf::message& from) {
  google_check_ne(&from, this);
  const servicedescriptorproto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const servicedescriptorproto*>(
      &from);
  if (source == null) {
    ::google::protobuf::internal::reflectionops::merge(from, this);
  } else {
    mergefrom(*source);
  }
}

void servicedescriptorproto::mergefrom(const servicedescriptorproto& from) {
  google_check_ne(&from, this);
  method_.mergefrom(from.method_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_options()) {
      mutable_options()->::google::protobuf::serviceoptions::mergefrom(from.options());
    }
  }
  mutable_unknown_fields()->mergefrom(from.unknown_fields());
}

void servicedescriptorproto::copyfrom(const ::google::protobuf::message& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

void servicedescriptorproto::copyfrom(const servicedescriptorproto& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

bool servicedescriptorproto::isinitialized() const {

  for (int i = 0; i < method_size(); i++) {
    if (!this->method(i).isinitialized()) return false;
  }
  if (has_options()) {
    if (!this->options().isinitialized()) return false;
  }
  return true;
}

void servicedescriptorproto::swap(servicedescriptorproto* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    method_.swap(&other->method_);
    std::swap(options_, other->options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::metadata servicedescriptorproto::getmetadata() const {
  protobuf_assigndescriptorsonce();
  ::google::protobuf::metadata metadata;
  metadata.descriptor = servicedescriptorproto_descriptor_;
  metadata.reflection = servicedescriptorproto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _msc_ver
const int methoddescriptorproto::knamefieldnumber;
const int methoddescriptorproto::kinputtypefieldnumber;
const int methoddescriptorproto::koutputtypefieldnumber;
const int methoddescriptorproto::koptionsfieldnumber;
#endif  // !_msc_ver

methoddescriptorproto::methoddescriptorproto()
  : ::google::protobuf::message() {
  sharedctor();
}

void methoddescriptorproto::initasdefaultinstance() {
  options_ = const_cast< ::google::protobuf::methodoptions*>(&::google::protobuf::methodoptions::default_instance());
}

methoddescriptorproto::methoddescriptorproto(const methoddescriptorproto& from)
  : ::google::protobuf::message() {
  sharedctor();
  mergefrom(from);
}

void methoddescriptorproto::sharedctor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kemptystring);
  input_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kemptystring);
  output_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kemptystring);
  options_ = null;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

methoddescriptorproto::~methoddescriptorproto() {
  shareddtor();
}

void methoddescriptorproto::shareddtor() {
  if (name_ != &::google::protobuf::internal::kemptystring) {
    delete name_;
  }
  if (input_type_ != &::google::protobuf::internal::kemptystring) {
    delete input_type_;
  }
  if (output_type_ != &::google::protobuf::internal::kemptystring) {
    delete output_type_;
  }
  if (this != default_instance_) {
    delete options_;
  }
}

void methoddescriptorproto::setcachedsize(int size) const {
  google_safe_concurrent_writes_begin();
  _cached_size_ = size;
  google_safe_concurrent_writes_end();
}
const ::google::protobuf::descriptor* methoddescriptorproto::descriptor() {
  protobuf_assigndescriptorsonce();
  return methoddescriptorproto_descriptor_;
}

const methoddescriptorproto& methoddescriptorproto::default_instance() {
  if (default_instance_ == null) protobuf_adddesc_google_2fprotobuf_2fdescriptor_2eproto();
  return *default_instance_;
}

methoddescriptorproto* methoddescriptorproto::default_instance_ = null;

methoddescriptorproto* methoddescriptorproto::new() const {
  return new methoddescriptorproto;
}

void methoddescriptorproto::clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kemptystring) {
        name_->clear();
      }
    }
    if (has_input_type()) {
      if (input_type_ != &::google::protobuf::internal::kemptystring) {
        input_type_->clear();
      }
    }
    if (has_output_type()) {
      if (output_type_ != &::google::protobuf::internal::kemptystring) {
        output_type_->clear();
      }
    }
    if (has_options()) {
      if (options_ != null) options_->::google::protobuf::methodoptions::clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool methoddescriptorproto::mergepartialfromcodedstream(
    ::google::protobuf::io::codedinputstream* input) {
#define do_(expression) if (!(expression)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->readtag()) != 0) {
    switch (::google::protobuf::internal::wireformatlite::gettagfieldnumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
          do_(::google::protobuf::internal::wireformatlite::readstring(
                input, this->mutable_name()));
          ::google::protobuf::internal::wireformat::verifyutf8string(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::wireformat::parse);
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(18)) goto parse_input_type;
        break;
      }

      // optional string input_type = 2;
      case 2: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_input_type:
          do_(::google::protobuf::internal::wireformatlite::readstring(
                input, this->mutable_input_type()));
          ::google::protobuf::internal::wireformat::verifyutf8string(
            this->input_type().data(), this->input_type().length(),
            ::google::protobuf::internal::wireformat::parse);
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(26)) goto parse_output_type;
        break;
      }

      // optional string output_type = 3;
      case 3: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_output_type:
          do_(::google::protobuf::internal::wireformatlite::readstring(
                input, this->mutable_output_type()));
          ::google::protobuf::internal::wireformat::verifyutf8string(
            this->output_type().data(), this->output_type().length(),
            ::google::protobuf::internal::wireformat::parse);
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(34)) goto parse_options;
        break;
      }

      // optional .google.protobuf.methodoptions options = 4;
      case 4: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_options:
          do_(::google::protobuf::internal::wireformatlite::readmessagenovirtual(
               input, mutable_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->expectatend()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_end_group) {
          return true;
        }
        do_(::google::protobuf::internal::wireformat::skipfield(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef do_
}

void methoddescriptorproto::serializewithcachedsizes(
    ::google::protobuf::io::codedoutputstream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::wireformat::serialize);
    ::google::protobuf::internal::wireformatlite::writestring(
      1, this->name(), output);
  }

  // optional string input_type = 2;
  if (has_input_type()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->input_type().data(), this->input_type().length(),
      ::google::protobuf::internal::wireformat::serialize);
    ::google::protobuf::internal::wireformatlite::writestring(
      2, this->input_type(), output);
  }

  // optional string output_type = 3;
  if (has_output_type()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->output_type().data(), this->output_type().length(),
      ::google::protobuf::internal::wireformat::serialize);
    ::google::protobuf::internal::wireformatlite::writestring(
      3, this->output_type(), output);
  }

  // optional .google.protobuf.methodoptions options = 4;
  if (has_options()) {
    ::google::protobuf::internal::wireformatlite::writemessagemaybetoarray(
      4, this->options(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::wireformat::serializeunknownfields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* methoddescriptorproto::serializewithcachedsizestoarray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::wireformat::serialize);
    target =
      ::google::protobuf::internal::wireformatlite::writestringtoarray(
        1, this->name(), target);
  }

  // optional string input_type = 2;
  if (has_input_type()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->input_type().data(), this->input_type().length(),
      ::google::protobuf::internal::wireformat::serialize);
    target =
      ::google::protobuf::internal::wireformatlite::writestringtoarray(
        2, this->input_type(), target);
  }

  // optional string output_type = 3;
  if (has_output_type()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->output_type().data(), this->output_type().length(),
      ::google::protobuf::internal::wireformat::serialize);
    target =
      ::google::protobuf::internal::wireformatlite::writestringtoarray(
        3, this->output_type(), target);
  }

  // optional .google.protobuf.methodoptions options = 4;
  if (has_options()) {
    target = ::google::protobuf::internal::wireformatlite::
      writemessagenovirtualtoarray(
        4, this->options(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::wireformat::serializeunknownfieldstoarray(
        unknown_fields(), target);
  }
  return target;
}

int methoddescriptorproto::bytesize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::stringsize(
          this->name());
    }

    // optional string input_type = 2;
    if (has_input_type()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::stringsize(
          this->input_type());
    }

    // optional string output_type = 3;
    if (has_output_type()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::stringsize(
          this->output_type());
    }

    // optional .google.protobuf.methodoptions options = 4;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::messagesizenovirtual(
          this->options());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::wireformat::computeunknownfieldssize(
        unknown_fields());
  }
  google_safe_concurrent_writes_begin();
  _cached_size_ = total_size;
  google_safe_concurrent_writes_end();
  return total_size;
}

void methoddescriptorproto::mergefrom(const ::google::protobuf::message& from) {
  google_check_ne(&from, this);
  const methoddescriptorproto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const methoddescriptorproto*>(
      &from);
  if (source == null) {
    ::google::protobuf::internal::reflectionops::merge(from, this);
  } else {
    mergefrom(*source);
  }
}

void methoddescriptorproto::mergefrom(const methoddescriptorproto& from) {
  google_check_ne(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_input_type()) {
      set_input_type(from.input_type());
    }
    if (from.has_output_type()) {
      set_output_type(from.output_type());
    }
    if (from.has_options()) {
      mutable_options()->::google::protobuf::methodoptions::mergefrom(from.options());
    }
  }
  mutable_unknown_fields()->mergefrom(from.unknown_fields());
}

void methoddescriptorproto::copyfrom(const ::google::protobuf::message& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

void methoddescriptorproto::copyfrom(const methoddescriptorproto& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

bool methoddescriptorproto::isinitialized() const {

  if (has_options()) {
    if (!this->options().isinitialized()) return false;
  }
  return true;
}

void methoddescriptorproto::swap(methoddescriptorproto* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(input_type_, other->input_type_);
    std::swap(output_type_, other->output_type_);
    std::swap(options_, other->options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::metadata methoddescriptorproto::getmetadata() const {
  protobuf_assigndescriptorsonce();
  ::google::protobuf::metadata metadata;
  metadata.descriptor = methoddescriptorproto_descriptor_;
  metadata.reflection = methoddescriptorproto_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::enumdescriptor* fileoptions_optimizemode_descriptor() {
  protobuf_assigndescriptorsonce();
  return fileoptions_optimizemode_descriptor_;
}
bool fileoptions_optimizemode_isvalid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _msc_ver
const fileoptions_optimizemode fileoptions::speed;
const fileoptions_optimizemode fileoptions::code_size;
const fileoptions_optimizemode fileoptions::lite_runtime;
const fileoptions_optimizemode fileoptions::optimizemode_min;
const fileoptions_optimizemode fileoptions::optimizemode_max;
const int fileoptions::optimizemode_arraysize;
#endif  // _msc_ver
#ifndef _msc_ver
const int fileoptions::kjavapackagefieldnumber;
const int fileoptions::kjavaouterclassnamefieldnumber;
const int fileoptions::kjavamultiplefilesfieldnumber;
const int fileoptions::kjavagenerateequalsandhashfieldnumber;
const int fileoptions::koptimizeforfieldnumber;
const int fileoptions::kgopackagefieldnumber;
const int fileoptions::kccgenericservicesfieldnumber;
const int fileoptions::kjavagenericservicesfieldnumber;
const int fileoptions::kpygenericservicesfieldnumber;
const int fileoptions::kuninterpretedoptionfieldnumber;
#endif  // !_msc_ver

fileoptions::fileoptions()
  : ::google::protobuf::message() {
  sharedctor();
}

void fileoptions::initasdefaultinstance() {
}

fileoptions::fileoptions(const fileoptions& from)
  : ::google::protobuf::message() {
  sharedctor();
  mergefrom(from);
}

void fileoptions::sharedctor() {
  _cached_size_ = 0;
  java_package_ = const_cast< ::std::string*>(&::google::protobuf::internal::kemptystring);
  java_outer_classname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kemptystring);
  java_multiple_files_ = false;
  java_generate_equals_and_hash_ = false;
  optimize_for_ = 1;
  go_package_ = const_cast< ::std::string*>(&::google::protobuf::internal::kemptystring);
  cc_generic_services_ = false;
  java_generic_services_ = false;
  py_generic_services_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fileoptions::~fileoptions() {
  shareddtor();
}

void fileoptions::shareddtor() {
  if (java_package_ != &::google::protobuf::internal::kemptystring) {
    delete java_package_;
  }
  if (java_outer_classname_ != &::google::protobuf::internal::kemptystring) {
    delete java_outer_classname_;
  }
  if (go_package_ != &::google::protobuf::internal::kemptystring) {
    delete go_package_;
  }
  if (this != default_instance_) {
  }
}

void fileoptions::setcachedsize(int size) const {
  google_safe_concurrent_writes_begin();
  _cached_size_ = size;
  google_safe_concurrent_writes_end();
}
const ::google::protobuf::descriptor* fileoptions::descriptor() {
  protobuf_assigndescriptorsonce();
  return fileoptions_descriptor_;
}

const fileoptions& fileoptions::default_instance() {
  if (default_instance_ == null) protobuf_adddesc_google_2fprotobuf_2fdescriptor_2eproto();
  return *default_instance_;
}

fileoptions* fileoptions::default_instance_ = null;

fileoptions* fileoptions::new() const {
  return new fileoptions;
}

void fileoptions::clear() {
  _extensions_.clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_java_package()) {
      if (java_package_ != &::google::protobuf::internal::kemptystring) {
        java_package_->clear();
      }
    }
    if (has_java_outer_classname()) {
      if (java_outer_classname_ != &::google::protobuf::internal::kemptystring) {
        java_outer_classname_->clear();
      }
    }
    java_multiple_files_ = false;
    java_generate_equals_and_hash_ = false;
    optimize_for_ = 1;
    if (has_go_package()) {
      if (go_package_ != &::google::protobuf::internal::kemptystring) {
        go_package_->clear();
      }
    }
    cc_generic_services_ = false;
    java_generic_services_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    py_generic_services_ = false;
  }
  uninterpreted_option_.clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool fileoptions::mergepartialfromcodedstream(
    ::google::protobuf::io::codedinputstream* input) {
#define do_(expression) if (!(expression)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->readtag()) != 0) {
    switch (::google::protobuf::internal::wireformatlite::gettagfieldnumber(tag)) {
      // optional string java_package = 1;
      case 1: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
          do_(::google::protobuf::internal::wireformatlite::readstring(
                input, this->mutable_java_package()));
          ::google::protobuf::internal::wireformat::verifyutf8string(
            this->java_package().data(), this->java_package().length(),
            ::google::protobuf::internal::wireformat::parse);
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(66)) goto parse_java_outer_classname;
        break;
      }

      // optional string java_outer_classname = 8;
      case 8: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_java_outer_classname:
          do_(::google::protobuf::internal::wireformatlite::readstring(
                input, this->mutable_java_outer_classname()));
          ::google::protobuf::internal::wireformat::verifyutf8string(
            this->java_outer_classname().data(), this->java_outer_classname().length(),
            ::google::protobuf::internal::wireformat::parse);
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(72)) goto parse_optimize_for;
        break;
      }

      // optional .google.protobuf.fileoptions.optimizemode optimize_for = 9 [default = speed];
      case 9: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_varint) {
         parse_optimize_for:
          int value;
          do_((::google::protobuf::internal::wireformatlite::readprimitive<
                   int, ::google::protobuf::internal::wireformatlite::type_enum>(
                 input, &value)));
          if (::google::protobuf::fileoptions_optimizemode_isvalid(value)) {
            set_optimize_for(static_cast< ::google::protobuf::fileoptions_optimizemode >(value));
          } else {
            mutable_unknown_fields()->addvarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(80)) goto parse_java_multiple_files;
        break;
      }

      // optional bool java_multiple_files = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_varint) {
         parse_java_multiple_files:
          do_((::google::protobuf::internal::wireformatlite::readprimitive<
                   bool, ::google::protobuf::internal::wireformatlite::type_bool>(
                 input, &java_multiple_files_)));
          set_has_java_multiple_files();
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(90)) goto parse_go_package;
        break;
      }

      // optional string go_package = 11;
      case 11: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_go_package:
          do_(::google::protobuf::internal::wireformatlite::readstring(
                input, this->mutable_go_package()));
          ::google::protobuf::internal::wireformat::verifyutf8string(
            this->go_package().data(), this->go_package().length(),
            ::google::protobuf::internal::wireformat::parse);
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(128)) goto parse_cc_generic_services;
        break;
      }

      // optional bool cc_generic_services = 16 [default = false];
      case 16: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_varint) {
         parse_cc_generic_services:
          do_((::google::protobuf::internal::wireformatlite::readprimitive<
                   bool, ::google::protobuf::internal::wireformatlite::type_bool>(
                 input, &cc_generic_services_)));
          set_has_cc_generic_services();
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(136)) goto parse_java_generic_services;
        break;
      }

      // optional bool java_generic_services = 17 [default = false];
      case 17: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_varint) {
         parse_java_generic_services:
          do_((::google::protobuf::internal::wireformatlite::readprimitive<
                   bool, ::google::protobuf::internal::wireformatlite::type_bool>(
                 input, &java_generic_services_)));
          set_has_java_generic_services();
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(144)) goto parse_py_generic_services;
        break;
      }

      // optional bool py_generic_services = 18 [default = false];
      case 18: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_varint) {
         parse_py_generic_services:
          do_((::google::protobuf::internal::wireformatlite::readprimitive<
                   bool, ::google::protobuf::internal::wireformatlite::type_bool>(
                 input, &py_generic_services_)));
          set_has_py_generic_services();
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(160)) goto parse_java_generate_equals_and_hash;
        break;
      }

      // optional bool java_generate_equals_and_hash = 20 [default = false];
      case 20: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_varint) {
         parse_java_generate_equals_and_hash:
          do_((::google::protobuf::internal::wireformatlite::readprimitive<
                   bool, ::google::protobuf::internal::wireformatlite::type_bool>(
                 input, &java_generate_equals_and_hash_)));
          set_has_java_generate_equals_and_hash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(7994)) goto parse_uninterpreted_option;
        break;
      }

      // repeated .google.protobuf.uninterpretedoption uninterpreted_option = 999;
      case 999: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_uninterpreted_option:
          do_(::google::protobuf::internal::wireformatlite::readmessagenovirtual(
                input, add_uninterpreted_option()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(7994)) goto parse_uninterpreted_option;
        if (input->expectatend()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_end_group) {
          return true;
        }
        if ((8000u <= tag)) {
          do_(_extensions_.parsefield(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        do_(::google::protobuf::internal::wireformat::skipfield(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef do_
}

void fileoptions::serializewithcachedsizes(
    ::google::protobuf::io::codedoutputstream* output) const {
  // optional string java_package = 1;
  if (has_java_package()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->java_package().data(), this->java_package().length(),
      ::google::protobuf::internal::wireformat::serialize);
    ::google::protobuf::internal::wireformatlite::writestring(
      1, this->java_package(), output);
  }

  // optional string java_outer_classname = 8;
  if (has_java_outer_classname()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->java_outer_classname().data(), this->java_outer_classname().length(),
      ::google::protobuf::internal::wireformat::serialize);
    ::google::protobuf::internal::wireformatlite::writestring(
      8, this->java_outer_classname(), output);
  }

  // optional .google.protobuf.fileoptions.optimizemode optimize_for = 9 [default = speed];
  if (has_optimize_for()) {
    ::google::protobuf::internal::wireformatlite::writeenum(
      9, this->optimize_for(), output);
  }

  // optional bool java_multiple_files = 10 [default = false];
  if (has_java_multiple_files()) {
    ::google::protobuf::internal::wireformatlite::writebool(10, this->java_multiple_files(), output);
  }

  // optional string go_package = 11;
  if (has_go_package()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->go_package().data(), this->go_package().length(),
      ::google::protobuf::internal::wireformat::serialize);
    ::google::protobuf::internal::wireformatlite::writestring(
      11, this->go_package(), output);
  }

  // optional bool cc_generic_services = 16 [default = false];
  if (has_cc_generic_services()) {
    ::google::protobuf::internal::wireformatlite::writebool(16, this->cc_generic_services(), output);
  }

  // optional bool java_generic_services = 17 [default = false];
  if (has_java_generic_services()) {
    ::google::protobuf::internal::wireformatlite::writebool(17, this->java_generic_services(), output);
  }

  // optional bool py_generic_services = 18 [default = false];
  if (has_py_generic_services()) {
    ::google::protobuf::internal::wireformatlite::writebool(18, this->py_generic_services(), output);
  }

  // optional bool java_generate_equals_and_hash = 20 [default = false];
  if (has_java_generate_equals_and_hash()) {
    ::google::protobuf::internal::wireformatlite::writebool(20, this->java_generate_equals_and_hash(), output);
  }

  // repeated .google.protobuf.uninterpretedoption uninterpreted_option = 999;
  for (int i = 0; i < this->uninterpreted_option_size(); i++) {
    ::google::protobuf::internal::wireformatlite::writemessagemaybetoarray(
      999, this->uninterpreted_option(i), output);
  }

  // extension range [1000, 536870912)
  _extensions_.serializewithcachedsizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::wireformat::serializeunknownfields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fileoptions::serializewithcachedsizestoarray(
    ::google::protobuf::uint8* target) const {
  // optional string java_package = 1;
  if (has_java_package()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->java_package().data(), this->java_package().length(),
      ::google::protobuf::internal::wireformat::serialize);
    target =
      ::google::protobuf::internal::wireformatlite::writestringtoarray(
        1, this->java_package(), target);
  }

  // optional string java_outer_classname = 8;
  if (has_java_outer_classname()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->java_outer_classname().data(), this->java_outer_classname().length(),
      ::google::protobuf::internal::wireformat::serialize);
    target =
      ::google::protobuf::internal::wireformatlite::writestringtoarray(
        8, this->java_outer_classname(), target);
  }

  // optional .google.protobuf.fileoptions.optimizemode optimize_for = 9 [default = speed];
  if (has_optimize_for()) {
    target = ::google::protobuf::internal::wireformatlite::writeenumtoarray(
      9, this->optimize_for(), target);
  }

  // optional bool java_multiple_files = 10 [default = false];
  if (has_java_multiple_files()) {
    target = ::google::protobuf::internal::wireformatlite::writebooltoarray(10, this->java_multiple_files(), target);
  }

  // optional string go_package = 11;
  if (has_go_package()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->go_package().data(), this->go_package().length(),
      ::google::protobuf::internal::wireformat::serialize);
    target =
      ::google::protobuf::internal::wireformatlite::writestringtoarray(
        11, this->go_package(), target);
  }

  // optional bool cc_generic_services = 16 [default = false];
  if (has_cc_generic_services()) {
    target = ::google::protobuf::internal::wireformatlite::writebooltoarray(16, this->cc_generic_services(), target);
  }

  // optional bool java_generic_services = 17 [default = false];
  if (has_java_generic_services()) {
    target = ::google::protobuf::internal::wireformatlite::writebooltoarray(17, this->java_generic_services(), target);
  }

  // optional bool py_generic_services = 18 [default = false];
  if (has_py_generic_services()) {
    target = ::google::protobuf::internal::wireformatlite::writebooltoarray(18, this->py_generic_services(), target);
  }

  // optional bool java_generate_equals_and_hash = 20 [default = false];
  if (has_java_generate_equals_and_hash()) {
    target = ::google::protobuf::internal::wireformatlite::writebooltoarray(20, this->java_generate_equals_and_hash(), target);
  }

  // repeated .google.protobuf.uninterpretedoption uninterpreted_option = 999;
  for (int i = 0; i < this->uninterpreted_option_size(); i++) {
    target = ::google::protobuf::internal::wireformatlite::
      writemessagenovirtualtoarray(
        999, this->uninterpreted_option(i), target);
  }

  // extension range [1000, 536870912)
  target = _extensions_.serializewithcachedsizestoarray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::wireformat::serializeunknownfieldstoarray(
        unknown_fields(), target);
  }
  return target;
}

int fileoptions::bytesize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string java_package = 1;
    if (has_java_package()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::stringsize(
          this->java_package());
    }

    // optional string java_outer_classname = 8;
    if (has_java_outer_classname()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::stringsize(
          this->java_outer_classname());
    }

    // optional bool java_multiple_files = 10 [default = false];
    if (has_java_multiple_files()) {
      total_size += 1 + 1;
    }

    // optional bool java_generate_equals_and_hash = 20 [default = false];
    if (has_java_generate_equals_and_hash()) {
      total_size += 2 + 1;
    }

    // optional .google.protobuf.fileoptions.optimizemode optimize_for = 9 [default = speed];
    if (has_optimize_for()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::enumsize(this->optimize_for());
    }

    // optional string go_package = 11;
    if (has_go_package()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::stringsize(
          this->go_package());
    }

    // optional bool cc_generic_services = 16 [default = false];
    if (has_cc_generic_services()) {
      total_size += 2 + 1;
    }

    // optional bool java_generic_services = 17 [default = false];
    if (has_java_generic_services()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool py_generic_services = 18 [default = false];
    if (has_py_generic_services()) {
      total_size += 2 + 1;
    }

  }
  // repeated .google.protobuf.uninterpretedoption uninterpreted_option = 999;
  total_size += 2 * this->uninterpreted_option_size();
  for (int i = 0; i < this->uninterpreted_option_size(); i++) {
    total_size +=
      ::google::protobuf::internal::wireformatlite::messagesizenovirtual(
        this->uninterpreted_option(i));
  }

  total_size += _extensions_.bytesize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::wireformat::computeunknownfieldssize(
        unknown_fields());
  }
  google_safe_concurrent_writes_begin();
  _cached_size_ = total_size;
  google_safe_concurrent_writes_end();
  return total_size;
}

void fileoptions::mergefrom(const ::google::protobuf::message& from) {
  google_check_ne(&from, this);
  const fileoptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fileoptions*>(
      &from);
  if (source == null) {
    ::google::protobuf::internal::reflectionops::merge(from, this);
  } else {
    mergefrom(*source);
  }
}

void fileoptions::mergefrom(const fileoptions& from) {
  google_check_ne(&from, this);
  uninterpreted_option_.mergefrom(from.uninterpreted_option_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_java_package()) {
      set_java_package(from.java_package());
    }
    if (from.has_java_outer_classname()) {
      set_java_outer_classname(from.java_outer_classname());
    }
    if (from.has_java_multiple_files()) {
      set_java_multiple_files(from.java_multiple_files());
    }
    if (from.has_java_generate_equals_and_hash()) {
      set_java_generate_equals_and_hash(from.java_generate_equals_and_hash());
    }
    if (from.has_optimize_for()) {
      set_optimize_for(from.optimize_for());
    }
    if (from.has_go_package()) {
      set_go_package(from.go_package());
    }
    if (from.has_cc_generic_services()) {
      set_cc_generic_services(from.cc_generic_services());
    }
    if (from.has_java_generic_services()) {
      set_java_generic_services(from.java_generic_services());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_py_generic_services()) {
      set_py_generic_services(from.py_generic_services());
    }
  }
  _extensions_.mergefrom(from._extensions_);
  mutable_unknown_fields()->mergefrom(from.unknown_fields());
}

void fileoptions::copyfrom(const ::google::protobuf::message& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

void fileoptions::copyfrom(const fileoptions& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

bool fileoptions::isinitialized() const {

  for (int i = 0; i < uninterpreted_option_size(); i++) {
    if (!this->uninterpreted_option(i).isinitialized()) return false;
  }

  if (!_extensions_.isinitialized()) return false;  return true;
}

void fileoptions::swap(fileoptions* other) {
  if (other != this) {
    std::swap(java_package_, other->java_package_);
    std::swap(java_outer_classname_, other->java_outer_classname_);
    std::swap(java_multiple_files_, other->java_multiple_files_);
    std::swap(java_generate_equals_and_hash_, other->java_generate_equals_and_hash_);
    std::swap(optimize_for_, other->optimize_for_);
    std::swap(go_package_, other->go_package_);
    std::swap(cc_generic_services_, other->cc_generic_services_);
    std::swap(java_generic_services_, other->java_generic_services_);
    std::swap(py_generic_services_, other->py_generic_services_);
    uninterpreted_option_.swap(&other->uninterpreted_option_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.swap(&other->_extensions_);
  }
}

::google::protobuf::metadata fileoptions::getmetadata() const {
  protobuf_assigndescriptorsonce();
  ::google::protobuf::metadata metadata;
  metadata.descriptor = fileoptions_descriptor_;
  metadata.reflection = fileoptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _msc_ver
const int messageoptions::kmessagesetwireformatfieldnumber;
const int messageoptions::knostandarddescriptoraccessorfieldnumber;
const int messageoptions::kuninterpretedoptionfieldnumber;
#endif  // !_msc_ver

messageoptions::messageoptions()
  : ::google::protobuf::message() {
  sharedctor();
}

void messageoptions::initasdefaultinstance() {
}

messageoptions::messageoptions(const messageoptions& from)
  : ::google::protobuf::message() {
  sharedctor();
  mergefrom(from);
}

void messageoptions::sharedctor() {
  _cached_size_ = 0;
  message_set_wire_format_ = false;
  no_standard_descriptor_accessor_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

messageoptions::~messageoptions() {
  shareddtor();
}

void messageoptions::shareddtor() {
  if (this != default_instance_) {
  }
}

void messageoptions::setcachedsize(int size) const {
  google_safe_concurrent_writes_begin();
  _cached_size_ = size;
  google_safe_concurrent_writes_end();
}
const ::google::protobuf::descriptor* messageoptions::descriptor() {
  protobuf_assigndescriptorsonce();
  return messageoptions_descriptor_;
}

const messageoptions& messageoptions::default_instance() {
  if (default_instance_ == null) protobuf_adddesc_google_2fprotobuf_2fdescriptor_2eproto();
  return *default_instance_;
}

messageoptions* messageoptions::default_instance_ = null;

messageoptions* messageoptions::new() const {
  return new messageoptions;
}

void messageoptions::clear() {
  _extensions_.clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_set_wire_format_ = false;
    no_standard_descriptor_accessor_ = false;
  }
  uninterpreted_option_.clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool messageoptions::mergepartialfromcodedstream(
    ::google::protobuf::io::codedinputstream* input) {
#define do_(expression) if (!(expression)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->readtag()) != 0) {
    switch (::google::protobuf::internal::wireformatlite::gettagfieldnumber(tag)) {
      // optional bool message_set_wire_format = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_varint) {
          do_((::google::protobuf::internal::wireformatlite::readprimitive<
                   bool, ::google::protobuf::internal::wireformatlite::type_bool>(
                 input, &message_set_wire_format_)));
          set_has_message_set_wire_format();
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(16)) goto parse_no_standard_descriptor_accessor;
        break;
      }

      // optional bool no_standard_descriptor_accessor = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_varint) {
         parse_no_standard_descriptor_accessor:
          do_((::google::protobuf::internal::wireformatlite::readprimitive<
                   bool, ::google::protobuf::internal::wireformatlite::type_bool>(
                 input, &no_standard_descriptor_accessor_)));
          set_has_no_standard_descriptor_accessor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(7994)) goto parse_uninterpreted_option;
        break;
      }

      // repeated .google.protobuf.uninterpretedoption uninterpreted_option = 999;
      case 999: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_uninterpreted_option:
          do_(::google::protobuf::internal::wireformatlite::readmessagenovirtual(
                input, add_uninterpreted_option()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(7994)) goto parse_uninterpreted_option;
        if (input->expectatend()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_end_group) {
          return true;
        }
        if ((8000u <= tag)) {
          do_(_extensions_.parsefield(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        do_(::google::protobuf::internal::wireformat::skipfield(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef do_
}

void messageoptions::serializewithcachedsizes(
    ::google::protobuf::io::codedoutputstream* output) const {
  // optional bool message_set_wire_format = 1 [default = false];
  if (has_message_set_wire_format()) {
    ::google::protobuf::internal::wireformatlite::writebool(1, this->message_set_wire_format(), output);
  }

  // optional bool no_standard_descriptor_accessor = 2 [default = false];
  if (has_no_standard_descriptor_accessor()) {
    ::google::protobuf::internal::wireformatlite::writebool(2, this->no_standard_descriptor_accessor(), output);
  }

  // repeated .google.protobuf.uninterpretedoption uninterpreted_option = 999;
  for (int i = 0; i < this->uninterpreted_option_size(); i++) {
    ::google::protobuf::internal::wireformatlite::writemessagemaybetoarray(
      999, this->uninterpreted_option(i), output);
  }

  // extension range [1000, 536870912)
  _extensions_.serializewithcachedsizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::wireformat::serializeunknownfields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* messageoptions::serializewithcachedsizestoarray(
    ::google::protobuf::uint8* target) const {
  // optional bool message_set_wire_format = 1 [default = false];
  if (has_message_set_wire_format()) {
    target = ::google::protobuf::internal::wireformatlite::writebooltoarray(1, this->message_set_wire_format(), target);
  }

  // optional bool no_standard_descriptor_accessor = 2 [default = false];
  if (has_no_standard_descriptor_accessor()) {
    target = ::google::protobuf::internal::wireformatlite::writebooltoarray(2, this->no_standard_descriptor_accessor(), target);
  }

  // repeated .google.protobuf.uninterpretedoption uninterpreted_option = 999;
  for (int i = 0; i < this->uninterpreted_option_size(); i++) {
    target = ::google::protobuf::internal::wireformatlite::
      writemessagenovirtualtoarray(
        999, this->uninterpreted_option(i), target);
  }

  // extension range [1000, 536870912)
  target = _extensions_.serializewithcachedsizestoarray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::wireformat::serializeunknownfieldstoarray(
        unknown_fields(), target);
  }
  return target;
}

int messageoptions::bytesize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool message_set_wire_format = 1 [default = false];
    if (has_message_set_wire_format()) {
      total_size += 1 + 1;
    }

    // optional bool no_standard_descriptor_accessor = 2 [default = false];
    if (has_no_standard_descriptor_accessor()) {
      total_size += 1 + 1;
    }

  }
  // repeated .google.protobuf.uninterpretedoption uninterpreted_option = 999;
  total_size += 2 * this->uninterpreted_option_size();
  for (int i = 0; i < this->uninterpreted_option_size(); i++) {
    total_size +=
      ::google::protobuf::internal::wireformatlite::messagesizenovirtual(
        this->uninterpreted_option(i));
  }

  total_size += _extensions_.bytesize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::wireformat::computeunknownfieldssize(
        unknown_fields());
  }
  google_safe_concurrent_writes_begin();
  _cached_size_ = total_size;
  google_safe_concurrent_writes_end();
  return total_size;
}

void messageoptions::mergefrom(const ::google::protobuf::message& from) {
  google_check_ne(&from, this);
  const messageoptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const messageoptions*>(
      &from);
  if (source == null) {
    ::google::protobuf::internal::reflectionops::merge(from, this);
  } else {
    mergefrom(*source);
  }
}

void messageoptions::mergefrom(const messageoptions& from) {
  google_check_ne(&from, this);
  uninterpreted_option_.mergefrom(from.uninterpreted_option_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_set_wire_format()) {
      set_message_set_wire_format(from.message_set_wire_format());
    }
    if (from.has_no_standard_descriptor_accessor()) {
      set_no_standard_descriptor_accessor(from.no_standard_descriptor_accessor());
    }
  }
  _extensions_.mergefrom(from._extensions_);
  mutable_unknown_fields()->mergefrom(from.unknown_fields());
}

void messageoptions::copyfrom(const ::google::protobuf::message& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

void messageoptions::copyfrom(const messageoptions& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

bool messageoptions::isinitialized() const {

  for (int i = 0; i < uninterpreted_option_size(); i++) {
    if (!this->uninterpreted_option(i).isinitialized()) return false;
  }

  if (!_extensions_.isinitialized()) return false;  return true;
}

void messageoptions::swap(messageoptions* other) {
  if (other != this) {
    std::swap(message_set_wire_format_, other->message_set_wire_format_);
    std::swap(no_standard_descriptor_accessor_, other->no_standard_descriptor_accessor_);
    uninterpreted_option_.swap(&other->uninterpreted_option_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.swap(&other->_extensions_);
  }
}

::google::protobuf::metadata messageoptions::getmetadata() const {
  protobuf_assigndescriptorsonce();
  ::google::protobuf::metadata metadata;
  metadata.descriptor = messageoptions_descriptor_;
  metadata.reflection = messageoptions_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::enumdescriptor* fieldoptions_ctype_descriptor() {
  protobuf_assigndescriptorsonce();
  return fieldoptions_ctype_descriptor_;
}
bool fieldoptions_ctype_isvalid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _msc_ver
const fieldoptions_ctype fieldoptions::string;
const fieldoptions_ctype fieldoptions::cord;
const fieldoptions_ctype fieldoptions::string_piece;
const fieldoptions_ctype fieldoptions::ctype_min;
const fieldoptions_ctype fieldoptions::ctype_max;
const int fieldoptions::ctype_arraysize;
#endif  // _msc_ver
#ifndef _msc_ver
const int fieldoptions::kctypefieldnumber;
const int fieldoptions::kpackedfieldnumber;
const int fieldoptions::klazyfieldnumber;
const int fieldoptions::kdeprecatedfieldnumber;
const int fieldoptions::kexperimentalmapkeyfieldnumber;
const int fieldoptions::kweakfieldnumber;
const int fieldoptions::kuninterpretedoptionfieldnumber;
#endif  // !_msc_ver

fieldoptions::fieldoptions()
  : ::google::protobuf::message() {
  sharedctor();
}

void fieldoptions::initasdefaultinstance() {
}

fieldoptions::fieldoptions(const fieldoptions& from)
  : ::google::protobuf::message() {
  sharedctor();
  mergefrom(from);
}

void fieldoptions::sharedctor() {
  _cached_size_ = 0;
  ctype_ = 0;
  packed_ = false;
  lazy_ = false;
  deprecated_ = false;
  experimental_map_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kemptystring);
  weak_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fieldoptions::~fieldoptions() {
  shareddtor();
}

void fieldoptions::shareddtor() {
  if (experimental_map_key_ != &::google::protobuf::internal::kemptystring) {
    delete experimental_map_key_;
  }
  if (this != default_instance_) {
  }
}

void fieldoptions::setcachedsize(int size) const {
  google_safe_concurrent_writes_begin();
  _cached_size_ = size;
  google_safe_concurrent_writes_end();
}
const ::google::protobuf::descriptor* fieldoptions::descriptor() {
  protobuf_assigndescriptorsonce();
  return fieldoptions_descriptor_;
}

const fieldoptions& fieldoptions::default_instance() {
  if (default_instance_ == null) protobuf_adddesc_google_2fprotobuf_2fdescriptor_2eproto();
  return *default_instance_;
}

fieldoptions* fieldoptions::default_instance_ = null;

fieldoptions* fieldoptions::new() const {
  return new fieldoptions;
}

void fieldoptions::clear() {
  _extensions_.clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ctype_ = 0;
    packed_ = false;
    lazy_ = false;
    deprecated_ = false;
    if (has_experimental_map_key()) {
      if (experimental_map_key_ != &::google::protobuf::internal::kemptystring) {
        experimental_map_key_->clear();
      }
    }
    weak_ = false;
  }
  uninterpreted_option_.clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool fieldoptions::mergepartialfromcodedstream(
    ::google::protobuf::io::codedinputstream* input) {
#define do_(expression) if (!(expression)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->readtag()) != 0) {
    switch (::google::protobuf::internal::wireformatlite::gettagfieldnumber(tag)) {
      // optional .google.protobuf.fieldoptions.ctype ctype = 1 [default = string];
      case 1: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_varint) {
          int value;
          do_((::google::protobuf::internal::wireformatlite::readprimitive<
                   int, ::google::protobuf::internal::wireformatlite::type_enum>(
                 input, &value)));
          if (::google::protobuf::fieldoptions_ctype_isvalid(value)) {
            set_ctype(static_cast< ::google::protobuf::fieldoptions_ctype >(value));
          } else {
            mutable_unknown_fields()->addvarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(16)) goto parse_packed;
        break;
      }

      // optional bool packed = 2;
      case 2: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_varint) {
         parse_packed:
          do_((::google::protobuf::internal::wireformatlite::readprimitive<
                   bool, ::google::protobuf::internal::wireformatlite::type_bool>(
                 input, &packed_)));
          set_has_packed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(24)) goto parse_deprecated;
        break;
      }

      // optional bool deprecated = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_varint) {
         parse_deprecated:
          do_((::google::protobuf::internal::wireformatlite::readprimitive<
                   bool, ::google::protobuf::internal::wireformatlite::type_bool>(
                 input, &deprecated_)));
          set_has_deprecated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(40)) goto parse_lazy;
        break;
      }

      // optional bool lazy = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_varint) {
         parse_lazy:
          do_((::google::protobuf::internal::wireformatlite::readprimitive<
                   bool, ::google::protobuf::internal::wireformatlite::type_bool>(
                 input, &lazy_)));
          set_has_lazy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(74)) goto parse_experimental_map_key;
        break;
      }

      // optional string experimental_map_key = 9;
      case 9: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_experimental_map_key:
          do_(::google::protobuf::internal::wireformatlite::readstring(
                input, this->mutable_experimental_map_key()));
          ::google::protobuf::internal::wireformat::verifyutf8string(
            this->experimental_map_key().data(), this->experimental_map_key().length(),
            ::google::protobuf::internal::wireformat::parse);
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(80)) goto parse_weak;
        break;
      }

      // optional bool weak = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_varint) {
         parse_weak:
          do_((::google::protobuf::internal::wireformatlite::readprimitive<
                   bool, ::google::protobuf::internal::wireformatlite::type_bool>(
                 input, &weak_)));
          set_has_weak();
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(7994)) goto parse_uninterpreted_option;
        break;
      }

      // repeated .google.protobuf.uninterpretedoption uninterpreted_option = 999;
      case 999: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_uninterpreted_option:
          do_(::google::protobuf::internal::wireformatlite::readmessagenovirtual(
                input, add_uninterpreted_option()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(7994)) goto parse_uninterpreted_option;
        if (input->expectatend()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_end_group) {
          return true;
        }
        if ((8000u <= tag)) {
          do_(_extensions_.parsefield(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        do_(::google::protobuf::internal::wireformat::skipfield(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef do_
}

void fieldoptions::serializewithcachedsizes(
    ::google::protobuf::io::codedoutputstream* output) const {
  // optional .google.protobuf.fieldoptions.ctype ctype = 1 [default = string];
  if (has_ctype()) {
    ::google::protobuf::internal::wireformatlite::writeenum(
      1, this->ctype(), output);
  }

  // optional bool packed = 2;
  if (has_packed()) {
    ::google::protobuf::internal::wireformatlite::writebool(2, this->packed(), output);
  }

  // optional bool deprecated = 3 [default = false];
  if (has_deprecated()) {
    ::google::protobuf::internal::wireformatlite::writebool(3, this->deprecated(), output);
  }

  // optional bool lazy = 5 [default = false];
  if (has_lazy()) {
    ::google::protobuf::internal::wireformatlite::writebool(5, this->lazy(), output);
  }

  // optional string experimental_map_key = 9;
  if (has_experimental_map_key()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->experimental_map_key().data(), this->experimental_map_key().length(),
      ::google::protobuf::internal::wireformat::serialize);
    ::google::protobuf::internal::wireformatlite::writestring(
      9, this->experimental_map_key(), output);
  }

  // optional bool weak = 10 [default = false];
  if (has_weak()) {
    ::google::protobuf::internal::wireformatlite::writebool(10, this->weak(), output);
  }

  // repeated .google.protobuf.uninterpretedoption uninterpreted_option = 999;
  for (int i = 0; i < this->uninterpreted_option_size(); i++) {
    ::google::protobuf::internal::wireformatlite::writemessagemaybetoarray(
      999, this->uninterpreted_option(i), output);
  }

  // extension range [1000, 536870912)
  _extensions_.serializewithcachedsizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::wireformat::serializeunknownfields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fieldoptions::serializewithcachedsizestoarray(
    ::google::protobuf::uint8* target) const {
  // optional .google.protobuf.fieldoptions.ctype ctype = 1 [default = string];
  if (has_ctype()) {
    target = ::google::protobuf::internal::wireformatlite::writeenumtoarray(
      1, this->ctype(), target);
  }

  // optional bool packed = 2;
  if (has_packed()) {
    target = ::google::protobuf::internal::wireformatlite::writebooltoarray(2, this->packed(), target);
  }

  // optional bool deprecated = 3 [default = false];
  if (has_deprecated()) {
    target = ::google::protobuf::internal::wireformatlite::writebooltoarray(3, this->deprecated(), target);
  }

  // optional bool lazy = 5 [default = false];
  if (has_lazy()) {
    target = ::google::protobuf::internal::wireformatlite::writebooltoarray(5, this->lazy(), target);
  }

  // optional string experimental_map_key = 9;
  if (has_experimental_map_key()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->experimental_map_key().data(), this->experimental_map_key().length(),
      ::google::protobuf::internal::wireformat::serialize);
    target =
      ::google::protobuf::internal::wireformatlite::writestringtoarray(
        9, this->experimental_map_key(), target);
  }

  // optional bool weak = 10 [default = false];
  if (has_weak()) {
    target = ::google::protobuf::internal::wireformatlite::writebooltoarray(10, this->weak(), target);
  }

  // repeated .google.protobuf.uninterpretedoption uninterpreted_option = 999;
  for (int i = 0; i < this->uninterpreted_option_size(); i++) {
    target = ::google::protobuf::internal::wireformatlite::
      writemessagenovirtualtoarray(
        999, this->uninterpreted_option(i), target);
  }

  // extension range [1000, 536870912)
  target = _extensions_.serializewithcachedsizestoarray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::wireformat::serializeunknownfieldstoarray(
        unknown_fields(), target);
  }
  return target;
}

int fieldoptions::bytesize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .google.protobuf.fieldoptions.ctype ctype = 1 [default = string];
    if (has_ctype()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::enumsize(this->ctype());
    }

    // optional bool packed = 2;
    if (has_packed()) {
      total_size += 1 + 1;
    }

    // optional bool lazy = 5 [default = false];
    if (has_lazy()) {
      total_size += 1 + 1;
    }

    // optional bool deprecated = 3 [default = false];
    if (has_deprecated()) {
      total_size += 1 + 1;
    }

    // optional string experimental_map_key = 9;
    if (has_experimental_map_key()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::stringsize(
          this->experimental_map_key());
    }

    // optional bool weak = 10 [default = false];
    if (has_weak()) {
      total_size += 1 + 1;
    }

  }
  // repeated .google.protobuf.uninterpretedoption uninterpreted_option = 999;
  total_size += 2 * this->uninterpreted_option_size();
  for (int i = 0; i < this->uninterpreted_option_size(); i++) {
    total_size +=
      ::google::protobuf::internal::wireformatlite::messagesizenovirtual(
        this->uninterpreted_option(i));
  }

  total_size += _extensions_.bytesize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::wireformat::computeunknownfieldssize(
        unknown_fields());
  }
  google_safe_concurrent_writes_begin();
  _cached_size_ = total_size;
  google_safe_concurrent_writes_end();
  return total_size;
}

void fieldoptions::mergefrom(const ::google::protobuf::message& from) {
  google_check_ne(&from, this);
  const fieldoptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fieldoptions*>(
      &from);
  if (source == null) {
    ::google::protobuf::internal::reflectionops::merge(from, this);
  } else {
    mergefrom(*source);
  }
}

void fieldoptions::mergefrom(const fieldoptions& from) {
  google_check_ne(&from, this);
  uninterpreted_option_.mergefrom(from.uninterpreted_option_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ctype()) {
      set_ctype(from.ctype());
    }
    if (from.has_packed()) {
      set_packed(from.packed());
    }
    if (from.has_lazy()) {
      set_lazy(from.lazy());
    }
    if (from.has_deprecated()) {
      set_deprecated(from.deprecated());
    }
    if (from.has_experimental_map_key()) {
      set_experimental_map_key(from.experimental_map_key());
    }
    if (from.has_weak()) {
      set_weak(from.weak());
    }
  }
  _extensions_.mergefrom(from._extensions_);
  mutable_unknown_fields()->mergefrom(from.unknown_fields());
}

void fieldoptions::copyfrom(const ::google::protobuf::message& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

void fieldoptions::copyfrom(const fieldoptions& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

bool fieldoptions::isinitialized() const {

  for (int i = 0; i < uninterpreted_option_size(); i++) {
    if (!this->uninterpreted_option(i).isinitialized()) return false;
  }

  if (!_extensions_.isinitialized()) return false;  return true;
}

void fieldoptions::swap(fieldoptions* other) {
  if (other != this) {
    std::swap(ctype_, other->ctype_);
    std::swap(packed_, other->packed_);
    std::swap(lazy_, other->lazy_);
    std::swap(deprecated_, other->deprecated_);
    std::swap(experimental_map_key_, other->experimental_map_key_);
    std::swap(weak_, other->weak_);
    uninterpreted_option_.swap(&other->uninterpreted_option_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.swap(&other->_extensions_);
  }
}

::google::protobuf::metadata fieldoptions::getmetadata() const {
  protobuf_assigndescriptorsonce();
  ::google::protobuf::metadata metadata;
  metadata.descriptor = fieldoptions_descriptor_;
  metadata.reflection = fieldoptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _msc_ver
const int enumoptions::kallowaliasfieldnumber;
const int enumoptions::kuninterpretedoptionfieldnumber;
#endif  // !_msc_ver

enumoptions::enumoptions()
  : ::google::protobuf::message() {
  sharedctor();
}

void enumoptions::initasdefaultinstance() {
}

enumoptions::enumoptions(const enumoptions& from)
  : ::google::protobuf::message() {
  sharedctor();
  mergefrom(from);
}

void enumoptions::sharedctor() {
  _cached_size_ = 0;
  allow_alias_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

enumoptions::~enumoptions() {
  shareddtor();
}

void enumoptions::shareddtor() {
  if (this != default_instance_) {
  }
}

void enumoptions::setcachedsize(int size) const {
  google_safe_concurrent_writes_begin();
  _cached_size_ = size;
  google_safe_concurrent_writes_end();
}
const ::google::protobuf::descriptor* enumoptions::descriptor() {
  protobuf_assigndescriptorsonce();
  return enumoptions_descriptor_;
}

const enumoptions& enumoptions::default_instance() {
  if (default_instance_ == null) protobuf_adddesc_google_2fprotobuf_2fdescriptor_2eproto();
  return *default_instance_;
}

enumoptions* enumoptions::default_instance_ = null;

enumoptions* enumoptions::new() const {
  return new enumoptions;
}

void enumoptions::clear() {
  _extensions_.clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    allow_alias_ = true;
  }
  uninterpreted_option_.clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool enumoptions::mergepartialfromcodedstream(
    ::google::protobuf::io::codedinputstream* input) {
#define do_(expression) if (!(expression)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->readtag()) != 0) {
    switch (::google::protobuf::internal::wireformatlite::gettagfieldnumber(tag)) {
      // optional bool allow_alias = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_varint) {
          do_((::google::protobuf::internal::wireformatlite::readprimitive<
                   bool, ::google::protobuf::internal::wireformatlite::type_bool>(
                 input, &allow_alias_)));
          set_has_allow_alias();
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(7994)) goto parse_uninterpreted_option;
        break;
      }

      // repeated .google.protobuf.uninterpretedoption uninterpreted_option = 999;
      case 999: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_uninterpreted_option:
          do_(::google::protobuf::internal::wireformatlite::readmessagenovirtual(
                input, add_uninterpreted_option()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(7994)) goto parse_uninterpreted_option;
        if (input->expectatend()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_end_group) {
          return true;
        }
        if ((8000u <= tag)) {
          do_(_extensions_.parsefield(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        do_(::google::protobuf::internal::wireformat::skipfield(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef do_
}

void enumoptions::serializewithcachedsizes(
    ::google::protobuf::io::codedoutputstream* output) const {
  // optional bool allow_alias = 2 [default = true];
  if (has_allow_alias()) {
    ::google::protobuf::internal::wireformatlite::writebool(2, this->allow_alias(), output);
  }

  // repeated .google.protobuf.uninterpretedoption uninterpreted_option = 999;
  for (int i = 0; i < this->uninterpreted_option_size(); i++) {
    ::google::protobuf::internal::wireformatlite::writemessagemaybetoarray(
      999, this->uninterpreted_option(i), output);
  }

  // extension range [1000, 536870912)
  _extensions_.serializewithcachedsizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::wireformat::serializeunknownfields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* enumoptions::serializewithcachedsizestoarray(
    ::google::protobuf::uint8* target) const {
  // optional bool allow_alias = 2 [default = true];
  if (has_allow_alias()) {
    target = ::google::protobuf::internal::wireformatlite::writebooltoarray(2, this->allow_alias(), target);
  }

  // repeated .google.protobuf.uninterpretedoption uninterpreted_option = 999;
  for (int i = 0; i < this->uninterpreted_option_size(); i++) {
    target = ::google::protobuf::internal::wireformatlite::
      writemessagenovirtualtoarray(
        999, this->uninterpreted_option(i), target);
  }

  // extension range [1000, 536870912)
  target = _extensions_.serializewithcachedsizestoarray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::wireformat::serializeunknownfieldstoarray(
        unknown_fields(), target);
  }
  return target;
}

int enumoptions::bytesize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool allow_alias = 2 [default = true];
    if (has_allow_alias()) {
      total_size += 1 + 1;
    }

  }
  // repeated .google.protobuf.uninterpretedoption uninterpreted_option = 999;
  total_size += 2 * this->uninterpreted_option_size();
  for (int i = 0; i < this->uninterpreted_option_size(); i++) {
    total_size +=
      ::google::protobuf::internal::wireformatlite::messagesizenovirtual(
        this->uninterpreted_option(i));
  }

  total_size += _extensions_.bytesize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::wireformat::computeunknownfieldssize(
        unknown_fields());
  }
  google_safe_concurrent_writes_begin();
  _cached_size_ = total_size;
  google_safe_concurrent_writes_end();
  return total_size;
}

void enumoptions::mergefrom(const ::google::protobuf::message& from) {
  google_check_ne(&from, this);
  const enumoptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const enumoptions*>(
      &from);
  if (source == null) {
    ::google::protobuf::internal::reflectionops::merge(from, this);
  } else {
    mergefrom(*source);
  }
}

void enumoptions::mergefrom(const enumoptions& from) {
  google_check_ne(&from, this);
  uninterpreted_option_.mergefrom(from.uninterpreted_option_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allow_alias()) {
      set_allow_alias(from.allow_alias());
    }
  }
  _extensions_.mergefrom(from._extensions_);
  mutable_unknown_fields()->mergefrom(from.unknown_fields());
}

void enumoptions::copyfrom(const ::google::protobuf::message& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

void enumoptions::copyfrom(const enumoptions& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

bool enumoptions::isinitialized() const {

  for (int i = 0; i < uninterpreted_option_size(); i++) {
    if (!this->uninterpreted_option(i).isinitialized()) return false;
  }

  if (!_extensions_.isinitialized()) return false;  return true;
}

void enumoptions::swap(enumoptions* other) {
  if (other != this) {
    std::swap(allow_alias_, other->allow_alias_);
    uninterpreted_option_.swap(&other->uninterpreted_option_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.swap(&other->_extensions_);
  }
}

::google::protobuf::metadata enumoptions::getmetadata() const {
  protobuf_assigndescriptorsonce();
  ::google::protobuf::metadata metadata;
  metadata.descriptor = enumoptions_descriptor_;
  metadata.reflection = enumoptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _msc_ver
const int enumvalueoptions::kuninterpretedoptionfieldnumber;
#endif  // !_msc_ver

enumvalueoptions::enumvalueoptions()
  : ::google::protobuf::message() {
  sharedctor();
}

void enumvalueoptions::initasdefaultinstance() {
}

enumvalueoptions::enumvalueoptions(const enumvalueoptions& from)
  : ::google::protobuf::message() {
  sharedctor();
  mergefrom(from);
}

void enumvalueoptions::sharedctor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

enumvalueoptions::~enumvalueoptions() {
  shareddtor();
}

void enumvalueoptions::shareddtor() {
  if (this != default_instance_) {
  }
}

void enumvalueoptions::setcachedsize(int size) const {
  google_safe_concurrent_writes_begin();
  _cached_size_ = size;
  google_safe_concurrent_writes_end();
}
const ::google::protobuf::descriptor* enumvalueoptions::descriptor() {
  protobuf_assigndescriptorsonce();
  return enumvalueoptions_descriptor_;
}

const enumvalueoptions& enumvalueoptions::default_instance() {
  if (default_instance_ == null) protobuf_adddesc_google_2fprotobuf_2fdescriptor_2eproto();
  return *default_instance_;
}

enumvalueoptions* enumvalueoptions::default_instance_ = null;

enumvalueoptions* enumvalueoptions::new() const {
  return new enumvalueoptions;
}

void enumvalueoptions::clear() {
  _extensions_.clear();
  uninterpreted_option_.clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool enumvalueoptions::mergepartialfromcodedstream(
    ::google::protobuf::io::codedinputstream* input) {
#define do_(expression) if (!(expression)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->readtag()) != 0) {
    switch (::google::protobuf::internal::wireformatlite::gettagfieldnumber(tag)) {
      // repeated .google.protobuf.uninterpretedoption uninterpreted_option = 999;
      case 999: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_uninterpreted_option:
          do_(::google::protobuf::internal::wireformatlite::readmessagenovirtual(
                input, add_uninterpreted_option()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(7994)) goto parse_uninterpreted_option;
        if (input->expectatend()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_end_group) {
          return true;
        }
        if ((8000u <= tag)) {
          do_(_extensions_.parsefield(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        do_(::google::protobuf::internal::wireformat::skipfield(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef do_
}

void enumvalueoptions::serializewithcachedsizes(
    ::google::protobuf::io::codedoutputstream* output) const {
  // repeated .google.protobuf.uninterpretedoption uninterpreted_option = 999;
  for (int i = 0; i < this->uninterpreted_option_size(); i++) {
    ::google::protobuf::internal::wireformatlite::writemessagemaybetoarray(
      999, this->uninterpreted_option(i), output);
  }

  // extension range [1000, 536870912)
  _extensions_.serializewithcachedsizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::wireformat::serializeunknownfields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* enumvalueoptions::serializewithcachedsizestoarray(
    ::google::protobuf::uint8* target) const {
  // repeated .google.protobuf.uninterpretedoption uninterpreted_option = 999;
  for (int i = 0; i < this->uninterpreted_option_size(); i++) {
    target = ::google::protobuf::internal::wireformatlite::
      writemessagenovirtualtoarray(
        999, this->uninterpreted_option(i), target);
  }

  // extension range [1000, 536870912)
  target = _extensions_.serializewithcachedsizestoarray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::wireformat::serializeunknownfieldstoarray(
        unknown_fields(), target);
  }
  return target;
}

int enumvalueoptions::bytesize() const {
  int total_size = 0;

  // repeated .google.protobuf.uninterpretedoption uninterpreted_option = 999;
  total_size += 2 * this->uninterpreted_option_size();
  for (int i = 0; i < this->uninterpreted_option_size(); i++) {
    total_size +=
      ::google::protobuf::internal::wireformatlite::messagesizenovirtual(
        this->uninterpreted_option(i));
  }

  total_size += _extensions_.bytesize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::wireformat::computeunknownfieldssize(
        unknown_fields());
  }
  google_safe_concurrent_writes_begin();
  _cached_size_ = total_size;
  google_safe_concurrent_writes_end();
  return total_size;
}

void enumvalueoptions::mergefrom(const ::google::protobuf::message& from) {
  google_check_ne(&from, this);
  const enumvalueoptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const enumvalueoptions*>(
      &from);
  if (source == null) {
    ::google::protobuf::internal::reflectionops::merge(from, this);
  } else {
    mergefrom(*source);
  }
}

void enumvalueoptions::mergefrom(const enumvalueoptions& from) {
  google_check_ne(&from, this);
  uninterpreted_option_.mergefrom(from.uninterpreted_option_);
  _extensions_.mergefrom(from._extensions_);
  mutable_unknown_fields()->mergefrom(from.unknown_fields());
}

void enumvalueoptions::copyfrom(const ::google::protobuf::message& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

void enumvalueoptions::copyfrom(const enumvalueoptions& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

bool enumvalueoptions::isinitialized() const {

  for (int i = 0; i < uninterpreted_option_size(); i++) {
    if (!this->uninterpreted_option(i).isinitialized()) return false;
  }

  if (!_extensions_.isinitialized()) return false;  return true;
}

void enumvalueoptions::swap(enumvalueoptions* other) {
  if (other != this) {
    uninterpreted_option_.swap(&other->uninterpreted_option_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.swap(&other->_extensions_);
  }
}

::google::protobuf::metadata enumvalueoptions::getmetadata() const {
  protobuf_assigndescriptorsonce();
  ::google::protobuf::metadata metadata;
  metadata.descriptor = enumvalueoptions_descriptor_;
  metadata.reflection = enumvalueoptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _msc_ver
const int serviceoptions::kuninterpretedoptionfieldnumber;
#endif  // !_msc_ver

serviceoptions::serviceoptions()
  : ::google::protobuf::message() {
  sharedctor();
}

void serviceoptions::initasdefaultinstance() {
}

serviceoptions::serviceoptions(const serviceoptions& from)
  : ::google::protobuf::message() {
  sharedctor();
  mergefrom(from);
}

void serviceoptions::sharedctor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

serviceoptions::~serviceoptions() {
  shareddtor();
}

void serviceoptions::shareddtor() {
  if (this != default_instance_) {
  }
}

void serviceoptions::setcachedsize(int size) const {
  google_safe_concurrent_writes_begin();
  _cached_size_ = size;
  google_safe_concurrent_writes_end();
}
const ::google::protobuf::descriptor* serviceoptions::descriptor() {
  protobuf_assigndescriptorsonce();
  return serviceoptions_descriptor_;
}

const serviceoptions& serviceoptions::default_instance() {
  if (default_instance_ == null) protobuf_adddesc_google_2fprotobuf_2fdescriptor_2eproto();
  return *default_instance_;
}

serviceoptions* serviceoptions::default_instance_ = null;

serviceoptions* serviceoptions::new() const {
  return new serviceoptions;
}

void serviceoptions::clear() {
  _extensions_.clear();
  uninterpreted_option_.clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool serviceoptions::mergepartialfromcodedstream(
    ::google::protobuf::io::codedinputstream* input) {
#define do_(expression) if (!(expression)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->readtag()) != 0) {
    switch (::google::protobuf::internal::wireformatlite::gettagfieldnumber(tag)) {
      // repeated .google.protobuf.uninterpretedoption uninterpreted_option = 999;
      case 999: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_uninterpreted_option:
          do_(::google::protobuf::internal::wireformatlite::readmessagenovirtual(
                input, add_uninterpreted_option()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(7994)) goto parse_uninterpreted_option;
        if (input->expectatend()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_end_group) {
          return true;
        }
        if ((8000u <= tag)) {
          do_(_extensions_.parsefield(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        do_(::google::protobuf::internal::wireformat::skipfield(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef do_
}

void serviceoptions::serializewithcachedsizes(
    ::google::protobuf::io::codedoutputstream* output) const {
  // repeated .google.protobuf.uninterpretedoption uninterpreted_option = 999;
  for (int i = 0; i < this->uninterpreted_option_size(); i++) {
    ::google::protobuf::internal::wireformatlite::writemessagemaybetoarray(
      999, this->uninterpreted_option(i), output);
  }

  // extension range [1000, 536870912)
  _extensions_.serializewithcachedsizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::wireformat::serializeunknownfields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* serviceoptions::serializewithcachedsizestoarray(
    ::google::protobuf::uint8* target) const {
  // repeated .google.protobuf.uninterpretedoption uninterpreted_option = 999;
  for (int i = 0; i < this->uninterpreted_option_size(); i++) {
    target = ::google::protobuf::internal::wireformatlite::
      writemessagenovirtualtoarray(
        999, this->uninterpreted_option(i), target);
  }

  // extension range [1000, 536870912)
  target = _extensions_.serializewithcachedsizestoarray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::wireformat::serializeunknownfieldstoarray(
        unknown_fields(), target);
  }
  return target;
}

int serviceoptions::bytesize() const {
  int total_size = 0;

  // repeated .google.protobuf.uninterpretedoption uninterpreted_option = 999;
  total_size += 2 * this->uninterpreted_option_size();
  for (int i = 0; i < this->uninterpreted_option_size(); i++) {
    total_size +=
      ::google::protobuf::internal::wireformatlite::messagesizenovirtual(
        this->uninterpreted_option(i));
  }

  total_size += _extensions_.bytesize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::wireformat::computeunknownfieldssize(
        unknown_fields());
  }
  google_safe_concurrent_writes_begin();
  _cached_size_ = total_size;
  google_safe_concurrent_writes_end();
  return total_size;
}

void serviceoptions::mergefrom(const ::google::protobuf::message& from) {
  google_check_ne(&from, this);
  const serviceoptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const serviceoptions*>(
      &from);
  if (source == null) {
    ::google::protobuf::internal::reflectionops::merge(from, this);
  } else {
    mergefrom(*source);
  }
}

void serviceoptions::mergefrom(const serviceoptions& from) {
  google_check_ne(&from, this);
  uninterpreted_option_.mergefrom(from.uninterpreted_option_);
  _extensions_.mergefrom(from._extensions_);
  mutable_unknown_fields()->mergefrom(from.unknown_fields());
}

void serviceoptions::copyfrom(const ::google::protobuf::message& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

void serviceoptions::copyfrom(const serviceoptions& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

bool serviceoptions::isinitialized() const {

  for (int i = 0; i < uninterpreted_option_size(); i++) {
    if (!this->uninterpreted_option(i).isinitialized()) return false;
  }

  if (!_extensions_.isinitialized()) return false;  return true;
}

void serviceoptions::swap(serviceoptions* other) {
  if (other != this) {
    uninterpreted_option_.swap(&other->uninterpreted_option_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.swap(&other->_extensions_);
  }
}

::google::protobuf::metadata serviceoptions::getmetadata() const {
  protobuf_assigndescriptorsonce();
  ::google::protobuf::metadata metadata;
  metadata.descriptor = serviceoptions_descriptor_;
  metadata.reflection = serviceoptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _msc_ver
const int methodoptions::kuninterpretedoptionfieldnumber;
#endif  // !_msc_ver

methodoptions::methodoptions()
  : ::google::protobuf::message() {
  sharedctor();
}

void methodoptions::initasdefaultinstance() {
}

methodoptions::methodoptions(const methodoptions& from)
  : ::google::protobuf::message() {
  sharedctor();
  mergefrom(from);
}

void methodoptions::sharedctor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

methodoptions::~methodoptions() {
  shareddtor();
}

void methodoptions::shareddtor() {
  if (this != default_instance_) {
  }
}

void methodoptions::setcachedsize(int size) const {
  google_safe_concurrent_writes_begin();
  _cached_size_ = size;
  google_safe_concurrent_writes_end();
}
const ::google::protobuf::descriptor* methodoptions::descriptor() {
  protobuf_assigndescriptorsonce();
  return methodoptions_descriptor_;
}

const methodoptions& methodoptions::default_instance() {
  if (default_instance_ == null) protobuf_adddesc_google_2fprotobuf_2fdescriptor_2eproto();
  return *default_instance_;
}

methodoptions* methodoptions::default_instance_ = null;

methodoptions* methodoptions::new() const {
  return new methodoptions;
}

void methodoptions::clear() {
  _extensions_.clear();
  uninterpreted_option_.clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool methodoptions::mergepartialfromcodedstream(
    ::google::protobuf::io::codedinputstream* input) {
#define do_(expression) if (!(expression)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->readtag()) != 0) {
    switch (::google::protobuf::internal::wireformatlite::gettagfieldnumber(tag)) {
      // repeated .google.protobuf.uninterpretedoption uninterpreted_option = 999;
      case 999: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_uninterpreted_option:
          do_(::google::protobuf::internal::wireformatlite::readmessagenovirtual(
                input, add_uninterpreted_option()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(7994)) goto parse_uninterpreted_option;
        if (input->expectatend()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_end_group) {
          return true;
        }
        if ((8000u <= tag)) {
          do_(_extensions_.parsefield(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        do_(::google::protobuf::internal::wireformat::skipfield(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef do_
}

void methodoptions::serializewithcachedsizes(
    ::google::protobuf::io::codedoutputstream* output) const {
  // repeated .google.protobuf.uninterpretedoption uninterpreted_option = 999;
  for (int i = 0; i < this->uninterpreted_option_size(); i++) {
    ::google::protobuf::internal::wireformatlite::writemessagemaybetoarray(
      999, this->uninterpreted_option(i), output);
  }

  // extension range [1000, 536870912)
  _extensions_.serializewithcachedsizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::wireformat::serializeunknownfields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* methodoptions::serializewithcachedsizestoarray(
    ::google::protobuf::uint8* target) const {
  // repeated .google.protobuf.uninterpretedoption uninterpreted_option = 999;
  for (int i = 0; i < this->uninterpreted_option_size(); i++) {
    target = ::google::protobuf::internal::wireformatlite::
      writemessagenovirtualtoarray(
        999, this->uninterpreted_option(i), target);
  }

  // extension range [1000, 536870912)
  target = _extensions_.serializewithcachedsizestoarray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::wireformat::serializeunknownfieldstoarray(
        unknown_fields(), target);
  }
  return target;
}

int methodoptions::bytesize() const {
  int total_size = 0;

  // repeated .google.protobuf.uninterpretedoption uninterpreted_option = 999;
  total_size += 2 * this->uninterpreted_option_size();
  for (int i = 0; i < this->uninterpreted_option_size(); i++) {
    total_size +=
      ::google::protobuf::internal::wireformatlite::messagesizenovirtual(
        this->uninterpreted_option(i));
  }

  total_size += _extensions_.bytesize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::wireformat::computeunknownfieldssize(
        unknown_fields());
  }
  google_safe_concurrent_writes_begin();
  _cached_size_ = total_size;
  google_safe_concurrent_writes_end();
  return total_size;
}

void methodoptions::mergefrom(const ::google::protobuf::message& from) {
  google_check_ne(&from, this);
  const methodoptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const methodoptions*>(
      &from);
  if (source == null) {
    ::google::protobuf::internal::reflectionops::merge(from, this);
  } else {
    mergefrom(*source);
  }
}

void methodoptions::mergefrom(const methodoptions& from) {
  google_check_ne(&from, this);
  uninterpreted_option_.mergefrom(from.uninterpreted_option_);
  _extensions_.mergefrom(from._extensions_);
  mutable_unknown_fields()->mergefrom(from.unknown_fields());
}

void methodoptions::copyfrom(const ::google::protobuf::message& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

void methodoptions::copyfrom(const methodoptions& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

bool methodoptions::isinitialized() const {

  for (int i = 0; i < uninterpreted_option_size(); i++) {
    if (!this->uninterpreted_option(i).isinitialized()) return false;
  }

  if (!_extensions_.isinitialized()) return false;  return true;
}

void methodoptions::swap(methodoptions* other) {
  if (other != this) {
    uninterpreted_option_.swap(&other->uninterpreted_option_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.swap(&other->_extensions_);
  }
}

::google::protobuf::metadata methodoptions::getmetadata() const {
  protobuf_assigndescriptorsonce();
  ::google::protobuf::metadata metadata;
  metadata.descriptor = methodoptions_descriptor_;
  metadata.reflection = methodoptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _msc_ver
const int uninterpretedoption_namepart::knamepartfieldnumber;
const int uninterpretedoption_namepart::kisextensionfieldnumber;
#endif  // !_msc_ver

uninterpretedoption_namepart::uninterpretedoption_namepart()
  : ::google::protobuf::message() {
  sharedctor();
}

void uninterpretedoption_namepart::initasdefaultinstance() {
}

uninterpretedoption_namepart::uninterpretedoption_namepart(const uninterpretedoption_namepart& from)
  : ::google::protobuf::message() {
  sharedctor();
  mergefrom(from);
}

void uninterpretedoption_namepart::sharedctor() {
  _cached_size_ = 0;
  name_part_ = const_cast< ::std::string*>(&::google::protobuf::internal::kemptystring);
  is_extension_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

uninterpretedoption_namepart::~uninterpretedoption_namepart() {
  shareddtor();
}

void uninterpretedoption_namepart::shareddtor() {
  if (name_part_ != &::google::protobuf::internal::kemptystring) {
    delete name_part_;
  }
  if (this != default_instance_) {
  }
}

void uninterpretedoption_namepart::setcachedsize(int size) const {
  google_safe_concurrent_writes_begin();
  _cached_size_ = size;
  google_safe_concurrent_writes_end();
}
const ::google::protobuf::descriptor* uninterpretedoption_namepart::descriptor() {
  protobuf_assigndescriptorsonce();
  return uninterpretedoption_namepart_descriptor_;
}

const uninterpretedoption_namepart& uninterpretedoption_namepart::default_instance() {
  if (default_instance_ == null) protobuf_adddesc_google_2fprotobuf_2fdescriptor_2eproto();
  return *default_instance_;
}

uninterpretedoption_namepart* uninterpretedoption_namepart::default_instance_ = null;

uninterpretedoption_namepart* uninterpretedoption_namepart::new() const {
  return new uninterpretedoption_namepart;
}

void uninterpretedoption_namepart::clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name_part()) {
      if (name_part_ != &::google::protobuf::internal::kemptystring) {
        name_part_->clear();
      }
    }
    is_extension_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool uninterpretedoption_namepart::mergepartialfromcodedstream(
    ::google::protobuf::io::codedinputstream* input) {
#define do_(expression) if (!(expression)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->readtag()) != 0) {
    switch (::google::protobuf::internal::wireformatlite::gettagfieldnumber(tag)) {
      // required string name_part = 1;
      case 1: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
          do_(::google::protobuf::internal::wireformatlite::readstring(
                input, this->mutable_name_part()));
          ::google::protobuf::internal::wireformat::verifyutf8string(
            this->name_part().data(), this->name_part().length(),
            ::google::protobuf::internal::wireformat::parse);
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(16)) goto parse_is_extension;
        break;
      }

      // required bool is_extension = 2;
      case 2: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_varint) {
         parse_is_extension:
          do_((::google::protobuf::internal::wireformatlite::readprimitive<
                   bool, ::google::protobuf::internal::wireformatlite::type_bool>(
                 input, &is_extension_)));
          set_has_is_extension();
        } else {
          goto handle_uninterpreted;
        }
        if (input->expectatend()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_end_group) {
          return true;
        }
        do_(::google::protobuf::internal::wireformat::skipfield(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef do_
}

void uninterpretedoption_namepart::serializewithcachedsizes(
    ::google::protobuf::io::codedoutputstream* output) const {
  // required string name_part = 1;
  if (has_name_part()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->name_part().data(), this->name_part().length(),
      ::google::protobuf::internal::wireformat::serialize);
    ::google::protobuf::internal::wireformatlite::writestring(
      1, this->name_part(), output);
  }

  // required bool is_extension = 2;
  if (has_is_extension()) {
    ::google::protobuf::internal::wireformatlite::writebool(2, this->is_extension(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::wireformat::serializeunknownfields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* uninterpretedoption_namepart::serializewithcachedsizestoarray(
    ::google::protobuf::uint8* target) const {
  // required string name_part = 1;
  if (has_name_part()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->name_part().data(), this->name_part().length(),
      ::google::protobuf::internal::wireformat::serialize);
    target =
      ::google::protobuf::internal::wireformatlite::writestringtoarray(
        1, this->name_part(), target);
  }

  // required bool is_extension = 2;
  if (has_is_extension()) {
    target = ::google::protobuf::internal::wireformatlite::writebooltoarray(2, this->is_extension(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::wireformat::serializeunknownfieldstoarray(
        unknown_fields(), target);
  }
  return target;
}

int uninterpretedoption_namepart::bytesize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name_part = 1;
    if (has_name_part()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::stringsize(
          this->name_part());
    }

    // required bool is_extension = 2;
    if (has_is_extension()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::wireformat::computeunknownfieldssize(
        unknown_fields());
  }
  google_safe_concurrent_writes_begin();
  _cached_size_ = total_size;
  google_safe_concurrent_writes_end();
  return total_size;
}

void uninterpretedoption_namepart::mergefrom(const ::google::protobuf::message& from) {
  google_check_ne(&from, this);
  const uninterpretedoption_namepart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const uninterpretedoption_namepart*>(
      &from);
  if (source == null) {
    ::google::protobuf::internal::reflectionops::merge(from, this);
  } else {
    mergefrom(*source);
  }
}

void uninterpretedoption_namepart::mergefrom(const uninterpretedoption_namepart& from) {
  google_check_ne(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name_part()) {
      set_name_part(from.name_part());
    }
    if (from.has_is_extension()) {
      set_is_extension(from.is_extension());
    }
  }
  mutable_unknown_fields()->mergefrom(from.unknown_fields());
}

void uninterpretedoption_namepart::copyfrom(const ::google::protobuf::message& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

void uninterpretedoption_namepart::copyfrom(const uninterpretedoption_namepart& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

bool uninterpretedoption_namepart::isinitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void uninterpretedoption_namepart::swap(uninterpretedoption_namepart* other) {
  if (other != this) {
    std::swap(name_part_, other->name_part_);
    std::swap(is_extension_, other->is_extension_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::metadata uninterpretedoption_namepart::getmetadata() const {
  protobuf_assigndescriptorsonce();
  ::google::protobuf::metadata metadata;
  metadata.descriptor = uninterpretedoption_namepart_descriptor_;
  metadata.reflection = uninterpretedoption_namepart_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _msc_ver
const int uninterpretedoption::knamefieldnumber;
const int uninterpretedoption::kidentifiervaluefieldnumber;
const int uninterpretedoption::kpositiveintvaluefieldnumber;
const int uninterpretedoption::knegativeintvaluefieldnumber;
const int uninterpretedoption::kdoublevaluefieldnumber;
const int uninterpretedoption::kstringvaluefieldnumber;
const int uninterpretedoption::kaggregatevaluefieldnumber;
#endif  // !_msc_ver

uninterpretedoption::uninterpretedoption()
  : ::google::protobuf::message() {
  sharedctor();
}

void uninterpretedoption::initasdefaultinstance() {
}

uninterpretedoption::uninterpretedoption(const uninterpretedoption& from)
  : ::google::protobuf::message() {
  sharedctor();
  mergefrom(from);
}

void uninterpretedoption::sharedctor() {
  _cached_size_ = 0;
  identifier_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kemptystring);
  positive_int_value_ = google_ulonglong(0);
  negative_int_value_ = google_longlong(0);
  double_value_ = 0;
  string_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kemptystring);
  aggregate_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kemptystring);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

uninterpretedoption::~uninterpretedoption() {
  shareddtor();
}

void uninterpretedoption::shareddtor() {
  if (identifier_value_ != &::google::protobuf::internal::kemptystring) {
    delete identifier_value_;
  }
  if (string_value_ != &::google::protobuf::internal::kemptystring) {
    delete string_value_;
  }
  if (aggregate_value_ != &::google::protobuf::internal::kemptystring) {
    delete aggregate_value_;
  }
  if (this != default_instance_) {
  }
}

void uninterpretedoption::setcachedsize(int size) const {
  google_safe_concurrent_writes_begin();
  _cached_size_ = size;
  google_safe_concurrent_writes_end();
}
const ::google::protobuf::descriptor* uninterpretedoption::descriptor() {
  protobuf_assigndescriptorsonce();
  return uninterpretedoption_descriptor_;
}

const uninterpretedoption& uninterpretedoption::default_instance() {
  if (default_instance_ == null) protobuf_adddesc_google_2fprotobuf_2fdescriptor_2eproto();
  return *default_instance_;
}

uninterpretedoption* uninterpretedoption::default_instance_ = null;

uninterpretedoption* uninterpretedoption::new() const {
  return new uninterpretedoption;
}

void uninterpretedoption::clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_identifier_value()) {
      if (identifier_value_ != &::google::protobuf::internal::kemptystring) {
        identifier_value_->clear();
      }
    }
    positive_int_value_ = google_ulonglong(0);
    negative_int_value_ = google_longlong(0);
    double_value_ = 0;
    if (has_string_value()) {
      if (string_value_ != &::google::protobuf::internal::kemptystring) {
        string_value_->clear();
      }
    }
    if (has_aggregate_value()) {
      if (aggregate_value_ != &::google::protobuf::internal::kemptystring) {
        aggregate_value_->clear();
      }
    }
  }
  name_.clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool uninterpretedoption::mergepartialfromcodedstream(
    ::google::protobuf::io::codedinputstream* input) {
#define do_(expression) if (!(expression)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->readtag()) != 0) {
    switch (::google::protobuf::internal::wireformatlite::gettagfieldnumber(tag)) {
      // repeated .google.protobuf.uninterpretedoption.namepart name = 2;
      case 2: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_name:
          do_(::google::protobuf::internal::wireformatlite::readmessagenovirtual(
                input, add_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(18)) goto parse_name;
        if (input->expecttag(26)) goto parse_identifier_value;
        break;
      }

      // optional string identifier_value = 3;
      case 3: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_identifier_value:
          do_(::google::protobuf::internal::wireformatlite::readstring(
                input, this->mutable_identifier_value()));
          ::google::protobuf::internal::wireformat::verifyutf8string(
            this->identifier_value().data(), this->identifier_value().length(),
            ::google::protobuf::internal::wireformat::parse);
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(32)) goto parse_positive_int_value;
        break;
      }

      // optional uint64 positive_int_value = 4;
      case 4: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_varint) {
         parse_positive_int_value:
          do_((::google::protobuf::internal::wireformatlite::readprimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::wireformatlite::type_uint64>(
                 input, &positive_int_value_)));
          set_has_positive_int_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(40)) goto parse_negative_int_value;
        break;
      }

      // optional int64 negative_int_value = 5;
      case 5: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_varint) {
         parse_negative_int_value:
          do_((::google::protobuf::internal::wireformatlite::readprimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::wireformatlite::type_int64>(
                 input, &negative_int_value_)));
          set_has_negative_int_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(49)) goto parse_double_value;
        break;
      }

      // optional double double_value = 6;
      case 6: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_fixed64) {
         parse_double_value:
          do_((::google::protobuf::internal::wireformatlite::readprimitive<
                   double, ::google::protobuf::internal::wireformatlite::type_double>(
                 input, &double_value_)));
          set_has_double_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(58)) goto parse_string_value;
        break;
      }

      // optional bytes string_value = 7;
      case 7: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_string_value:
          do_(::google::protobuf::internal::wireformatlite::readbytes(
                input, this->mutable_string_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(66)) goto parse_aggregate_value;
        break;
      }

      // optional string aggregate_value = 8;
      case 8: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_aggregate_value:
          do_(::google::protobuf::internal::wireformatlite::readstring(
                input, this->mutable_aggregate_value()));
          ::google::protobuf::internal::wireformat::verifyutf8string(
            this->aggregate_value().data(), this->aggregate_value().length(),
            ::google::protobuf::internal::wireformat::parse);
        } else {
          goto handle_uninterpreted;
        }
        if (input->expectatend()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_end_group) {
          return true;
        }
        do_(::google::protobuf::internal::wireformat::skipfield(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef do_
}

void uninterpretedoption::serializewithcachedsizes(
    ::google::protobuf::io::codedoutputstream* output) const {
  // repeated .google.protobuf.uninterpretedoption.namepart name = 2;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::wireformatlite::writemessagemaybetoarray(
      2, this->name(i), output);
  }

  // optional string identifier_value = 3;
  if (has_identifier_value()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->identifier_value().data(), this->identifier_value().length(),
      ::google::protobuf::internal::wireformat::serialize);
    ::google::protobuf::internal::wireformatlite::writestring(
      3, this->identifier_value(), output);
  }

  // optional uint64 positive_int_value = 4;
  if (has_positive_int_value()) {
    ::google::protobuf::internal::wireformatlite::writeuint64(4, this->positive_int_value(), output);
  }

  // optional int64 negative_int_value = 5;
  if (has_negative_int_value()) {
    ::google::protobuf::internal::wireformatlite::writeint64(5, this->negative_int_value(), output);
  }

  // optional double double_value = 6;
  if (has_double_value()) {
    ::google::protobuf::internal::wireformatlite::writedouble(6, this->double_value(), output);
  }

  // optional bytes string_value = 7;
  if (has_string_value()) {
    ::google::protobuf::internal::wireformatlite::writebytes(
      7, this->string_value(), output);
  }

  // optional string aggregate_value = 8;
  if (has_aggregate_value()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->aggregate_value().data(), this->aggregate_value().length(),
      ::google::protobuf::internal::wireformat::serialize);
    ::google::protobuf::internal::wireformatlite::writestring(
      8, this->aggregate_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::wireformat::serializeunknownfields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* uninterpretedoption::serializewithcachedsizestoarray(
    ::google::protobuf::uint8* target) const {
  // repeated .google.protobuf.uninterpretedoption.namepart name = 2;
  for (int i = 0; i < this->name_size(); i++) {
    target = ::google::protobuf::internal::wireformatlite::
      writemessagenovirtualtoarray(
        2, this->name(i), target);
  }

  // optional string identifier_value = 3;
  if (has_identifier_value()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->identifier_value().data(), this->identifier_value().length(),
      ::google::protobuf::internal::wireformat::serialize);
    target =
      ::google::protobuf::internal::wireformatlite::writestringtoarray(
        3, this->identifier_value(), target);
  }

  // optional uint64 positive_int_value = 4;
  if (has_positive_int_value()) {
    target = ::google::protobuf::internal::wireformatlite::writeuint64toarray(4, this->positive_int_value(), target);
  }

  // optional int64 negative_int_value = 5;
  if (has_negative_int_value()) {
    target = ::google::protobuf::internal::wireformatlite::writeint64toarray(5, this->negative_int_value(), target);
  }

  // optional double double_value = 6;
  if (has_double_value()) {
    target = ::google::protobuf::internal::wireformatlite::writedoubletoarray(6, this->double_value(), target);
  }

  // optional bytes string_value = 7;
  if (has_string_value()) {
    target =
      ::google::protobuf::internal::wireformatlite::writebytestoarray(
        7, this->string_value(), target);
  }

  // optional string aggregate_value = 8;
  if (has_aggregate_value()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->aggregate_value().data(), this->aggregate_value().length(),
      ::google::protobuf::internal::wireformat::serialize);
    target =
      ::google::protobuf::internal::wireformatlite::writestringtoarray(
        8, this->aggregate_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::wireformat::serializeunknownfieldstoarray(
        unknown_fields(), target);
  }
  return target;
}

int uninterpretedoption::bytesize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string identifier_value = 3;
    if (has_identifier_value()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::stringsize(
          this->identifier_value());
    }

    // optional uint64 positive_int_value = 4;
    if (has_positive_int_value()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::uint64size(
          this->positive_int_value());
    }

    // optional int64 negative_int_value = 5;
    if (has_negative_int_value()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::int64size(
          this->negative_int_value());
    }

    // optional double double_value = 6;
    if (has_double_value()) {
      total_size += 1 + 8;
    }

    // optional bytes string_value = 7;
    if (has_string_value()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::bytessize(
          this->string_value());
    }

    // optional string aggregate_value = 8;
    if (has_aggregate_value()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::stringsize(
          this->aggregate_value());
    }

  }
  // repeated .google.protobuf.uninterpretedoption.namepart name = 2;
  total_size += 1 * this->name_size();
  for (int i = 0; i < this->name_size(); i++) {
    total_size +=
      ::google::protobuf::internal::wireformatlite::messagesizenovirtual(
        this->name(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::wireformat::computeunknownfieldssize(
        unknown_fields());
  }
  google_safe_concurrent_writes_begin();
  _cached_size_ = total_size;
  google_safe_concurrent_writes_end();
  return total_size;
}

void uninterpretedoption::mergefrom(const ::google::protobuf::message& from) {
  google_check_ne(&from, this);
  const uninterpretedoption* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const uninterpretedoption*>(
      &from);
  if (source == null) {
    ::google::protobuf::internal::reflectionops::merge(from, this);
  } else {
    mergefrom(*source);
  }
}

void uninterpretedoption::mergefrom(const uninterpretedoption& from) {
  google_check_ne(&from, this);
  name_.mergefrom(from.name_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_identifier_value()) {
      set_identifier_value(from.identifier_value());
    }
    if (from.has_positive_int_value()) {
      set_positive_int_value(from.positive_int_value());
    }
    if (from.has_negative_int_value()) {
      set_negative_int_value(from.negative_int_value());
    }
    if (from.has_double_value()) {
      set_double_value(from.double_value());
    }
    if (from.has_string_value()) {
      set_string_value(from.string_value());
    }
    if (from.has_aggregate_value()) {
      set_aggregate_value(from.aggregate_value());
    }
  }
  mutable_unknown_fields()->mergefrom(from.unknown_fields());
}

void uninterpretedoption::copyfrom(const ::google::protobuf::message& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

void uninterpretedoption::copyfrom(const uninterpretedoption& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

bool uninterpretedoption::isinitialized() const {

  for (int i = 0; i < name_size(); i++) {
    if (!this->name(i).isinitialized()) return false;
  }
  return true;
}

void uninterpretedoption::swap(uninterpretedoption* other) {
  if (other != this) {
    name_.swap(&other->name_);
    std::swap(identifier_value_, other->identifier_value_);
    std::swap(positive_int_value_, other->positive_int_value_);
    std::swap(negative_int_value_, other->negative_int_value_);
    std::swap(double_value_, other->double_value_);
    std::swap(string_value_, other->string_value_);
    std::swap(aggregate_value_, other->aggregate_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::metadata uninterpretedoption::getmetadata() const {
  protobuf_assigndescriptorsonce();
  ::google::protobuf::metadata metadata;
  metadata.descriptor = uninterpretedoption_descriptor_;
  metadata.reflection = uninterpretedoption_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _msc_ver
const int sourcecodeinfo_location::kpathfieldnumber;
const int sourcecodeinfo_location::kspanfieldnumber;
const int sourcecodeinfo_location::kleadingcommentsfieldnumber;
const int sourcecodeinfo_location::ktrailingcommentsfieldnumber;
#endif  // !_msc_ver

sourcecodeinfo_location::sourcecodeinfo_location()
  : ::google::protobuf::message() {
  sharedctor();
}

void sourcecodeinfo_location::initasdefaultinstance() {
}

sourcecodeinfo_location::sourcecodeinfo_location(const sourcecodeinfo_location& from)
  : ::google::protobuf::message() {
  sharedctor();
  mergefrom(from);
}

void sourcecodeinfo_location::sharedctor() {
  _cached_size_ = 0;
  leading_comments_ = const_cast< ::std::string*>(&::google::protobuf::internal::kemptystring);
  trailing_comments_ = const_cast< ::std::string*>(&::google::protobuf::internal::kemptystring);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sourcecodeinfo_location::~sourcecodeinfo_location() {
  shareddtor();
}

void sourcecodeinfo_location::shareddtor() {
  if (leading_comments_ != &::google::protobuf::internal::kemptystring) {
    delete leading_comments_;
  }
  if (trailing_comments_ != &::google::protobuf::internal::kemptystring) {
    delete trailing_comments_;
  }
  if (this != default_instance_) {
  }
}

void sourcecodeinfo_location::setcachedsize(int size) const {
  google_safe_concurrent_writes_begin();
  _cached_size_ = size;
  google_safe_concurrent_writes_end();
}
const ::google::protobuf::descriptor* sourcecodeinfo_location::descriptor() {
  protobuf_assigndescriptorsonce();
  return sourcecodeinfo_location_descriptor_;
}

const sourcecodeinfo_location& sourcecodeinfo_location::default_instance() {
  if (default_instance_ == null) protobuf_adddesc_google_2fprotobuf_2fdescriptor_2eproto();
  return *default_instance_;
}

sourcecodeinfo_location* sourcecodeinfo_location::default_instance_ = null;

sourcecodeinfo_location* sourcecodeinfo_location::new() const {
  return new sourcecodeinfo_location;
}

void sourcecodeinfo_location::clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_leading_comments()) {
      if (leading_comments_ != &::google::protobuf::internal::kemptystring) {
        leading_comments_->clear();
      }
    }
    if (has_trailing_comments()) {
      if (trailing_comments_ != &::google::protobuf::internal::kemptystring) {
        trailing_comments_->clear();
      }
    }
  }
  path_.clear();
  span_.clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool sourcecodeinfo_location::mergepartialfromcodedstream(
    ::google::protobuf::io::codedinputstream* input) {
#define do_(expression) if (!(expression)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->readtag()) != 0) {
    switch (::google::protobuf::internal::wireformatlite::gettagfieldnumber(tag)) {
      // repeated int32 path = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
          do_((::google::protobuf::internal::wireformatlite::readpackedprimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::wireformatlite::type_int32>(
                 input, this->mutable_path())));
        } else if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag)
                   == ::google::protobuf::internal::wireformatlite::
                      wiretype_varint) {
          do_((::google::protobuf::internal::wireformatlite::readrepeatedprimitivenoinline<
                   ::google::protobuf::int32, ::google::protobuf::internal::wireformatlite::type_int32>(
                 1, 10, input, this->mutable_path())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(18)) goto parse_span;
        break;
      }

      // repeated int32 span = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_span:
          do_((::google::protobuf::internal::wireformatlite::readpackedprimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::wireformatlite::type_int32>(
                 input, this->mutable_span())));
        } else if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag)
                   == ::google::protobuf::internal::wireformatlite::
                      wiretype_varint) {
          do_((::google::protobuf::internal::wireformatlite::readrepeatedprimitivenoinline<
                   ::google::protobuf::int32, ::google::protobuf::internal::wireformatlite::type_int32>(
                 1, 18, input, this->mutable_span())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(26)) goto parse_leading_comments;
        break;
      }

      // optional string leading_comments = 3;
      case 3: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_leading_comments:
          do_(::google::protobuf::internal::wireformatlite::readstring(
                input, this->mutable_leading_comments()));
          ::google::protobuf::internal::wireformat::verifyutf8string(
            this->leading_comments().data(), this->leading_comments().length(),
            ::google::protobuf::internal::wireformat::parse);
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(34)) goto parse_trailing_comments;
        break;
      }

      // optional string trailing_comments = 4;
      case 4: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_trailing_comments:
          do_(::google::protobuf::internal::wireformatlite::readstring(
                input, this->mutable_trailing_comments()));
          ::google::protobuf::internal::wireformat::verifyutf8string(
            this->trailing_comments().data(), this->trailing_comments().length(),
            ::google::protobuf::internal::wireformat::parse);
        } else {
          goto handle_uninterpreted;
        }
        if (input->expectatend()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_end_group) {
          return true;
        }
        do_(::google::protobuf::internal::wireformat::skipfield(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef do_
}

void sourcecodeinfo_location::serializewithcachedsizes(
    ::google::protobuf::io::codedoutputstream* output) const {
  // repeated int32 path = 1 [packed = true];
  if (this->path_size() > 0) {
    ::google::protobuf::internal::wireformatlite::writetag(1, ::google::protobuf::internal::wireformatlite::wiretype_length_delimited, output);
    output->writevarint32(_path_cached_byte_size_);
  }
  for (int i = 0; i < this->path_size(); i++) {
    ::google::protobuf::internal::wireformatlite::writeint32notag(
      this->path(i), output);
  }

  // repeated int32 span = 2 [packed = true];
  if (this->span_size() > 0) {
    ::google::protobuf::internal::wireformatlite::writetag(2, ::google::protobuf::internal::wireformatlite::wiretype_length_delimited, output);
    output->writevarint32(_span_cached_byte_size_);
  }
  for (int i = 0; i < this->span_size(); i++) {
    ::google::protobuf::internal::wireformatlite::writeint32notag(
      this->span(i), output);
  }

  // optional string leading_comments = 3;
  if (has_leading_comments()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->leading_comments().data(), this->leading_comments().length(),
      ::google::protobuf::internal::wireformat::serialize);
    ::google::protobuf::internal::wireformatlite::writestring(
      3, this->leading_comments(), output);
  }

  // optional string trailing_comments = 4;
  if (has_trailing_comments()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->trailing_comments().data(), this->trailing_comments().length(),
      ::google::protobuf::internal::wireformat::serialize);
    ::google::protobuf::internal::wireformatlite::writestring(
      4, this->trailing_comments(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::wireformat::serializeunknownfields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sourcecodeinfo_location::serializewithcachedsizestoarray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 path = 1 [packed = true];
  if (this->path_size() > 0) {
    target = ::google::protobuf::internal::wireformatlite::writetagtoarray(
      1,
      ::google::protobuf::internal::wireformatlite::wiretype_length_delimited,
      target);
    target = ::google::protobuf::io::codedoutputstream::writevarint32toarray(
      _path_cached_byte_size_, target);
  }
  for (int i = 0; i < this->path_size(); i++) {
    target = ::google::protobuf::internal::wireformatlite::
      writeint32notagtoarray(this->path(i), target);
  }

  // repeated int32 span = 2 [packed = true];
  if (this->span_size() > 0) {
    target = ::google::protobuf::internal::wireformatlite::writetagtoarray(
      2,
      ::google::protobuf::internal::wireformatlite::wiretype_length_delimited,
      target);
    target = ::google::protobuf::io::codedoutputstream::writevarint32toarray(
      _span_cached_byte_size_, target);
  }
  for (int i = 0; i < this->span_size(); i++) {
    target = ::google::protobuf::internal::wireformatlite::
      writeint32notagtoarray(this->span(i), target);
  }

  // optional string leading_comments = 3;
  if (has_leading_comments()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->leading_comments().data(), this->leading_comments().length(),
      ::google::protobuf::internal::wireformat::serialize);
    target =
      ::google::protobuf::internal::wireformatlite::writestringtoarray(
        3, this->leading_comments(), target);
  }

  // optional string trailing_comments = 4;
  if (has_trailing_comments()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->trailing_comments().data(), this->trailing_comments().length(),
      ::google::protobuf::internal::wireformat::serialize);
    target =
      ::google::protobuf::internal::wireformatlite::writestringtoarray(
        4, this->trailing_comments(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::wireformat::serializeunknownfieldstoarray(
        unknown_fields(), target);
  }
  return target;
}

int sourcecodeinfo_location::bytesize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional string leading_comments = 3;
    if (has_leading_comments()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::stringsize(
          this->leading_comments());
    }

    // optional string trailing_comments = 4;
    if (has_trailing_comments()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::stringsize(
          this->trailing_comments());
    }

  }
  // repeated int32 path = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->path_size(); i++) {
      data_size += ::google::protobuf::internal::wireformatlite::
        int32size(this->path(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::int32size(data_size);
    }
    google_safe_concurrent_writes_begin();
    _path_cached_byte_size_ = data_size;
    google_safe_concurrent_writes_end();
    total_size += data_size;
  }

  // repeated int32 span = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->span_size(); i++) {
      data_size += ::google::protobuf::internal::wireformatlite::
        int32size(this->span(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::int32size(data_size);
    }
    google_safe_concurrent_writes_begin();
    _span_cached_byte_size_ = data_size;
    google_safe_concurrent_writes_end();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::wireformat::computeunknownfieldssize(
        unknown_fields());
  }
  google_safe_concurrent_writes_begin();
  _cached_size_ = total_size;
  google_safe_concurrent_writes_end();
  return total_size;
}

void sourcecodeinfo_location::mergefrom(const ::google::protobuf::message& from) {
  google_check_ne(&from, this);
  const sourcecodeinfo_location* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sourcecodeinfo_location*>(
      &from);
  if (source == null) {
    ::google::protobuf::internal::reflectionops::merge(from, this);
  } else {
    mergefrom(*source);
  }
}

void sourcecodeinfo_location::mergefrom(const sourcecodeinfo_location& from) {
  google_check_ne(&from, this);
  path_.mergefrom(from.path_);
  span_.mergefrom(from.span_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_leading_comments()) {
      set_leading_comments(from.leading_comments());
    }
    if (from.has_trailing_comments()) {
      set_trailing_comments(from.trailing_comments());
    }
  }
  mutable_unknown_fields()->mergefrom(from.unknown_fields());
}

void sourcecodeinfo_location::copyfrom(const ::google::protobuf::message& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

void sourcecodeinfo_location::copyfrom(const sourcecodeinfo_location& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

bool sourcecodeinfo_location::isinitialized() const {

  return true;
}

void sourcecodeinfo_location::swap(sourcecodeinfo_location* other) {
  if (other != this) {
    path_.swap(&other->path_);
    span_.swap(&other->span_);
    std::swap(leading_comments_, other->leading_comments_);
    std::swap(trailing_comments_, other->trailing_comments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::metadata sourcecodeinfo_location::getmetadata() const {
  protobuf_assigndescriptorsonce();
  ::google::protobuf::metadata metadata;
  metadata.descriptor = sourcecodeinfo_location_descriptor_;
  metadata.reflection = sourcecodeinfo_location_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _msc_ver
const int sourcecodeinfo::klocationfieldnumber;
#endif  // !_msc_ver

sourcecodeinfo::sourcecodeinfo()
  : ::google::protobuf::message() {
  sharedctor();
}

void sourcecodeinfo::initasdefaultinstance() {
}

sourcecodeinfo::sourcecodeinfo(const sourcecodeinfo& from)
  : ::google::protobuf::message() {
  sharedctor();
  mergefrom(from);
}

void sourcecodeinfo::sharedctor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sourcecodeinfo::~sourcecodeinfo() {
  shareddtor();
}

void sourcecodeinfo::shareddtor() {
  if (this != default_instance_) {
  }
}

void sourcecodeinfo::setcachedsize(int size) const {
  google_safe_concurrent_writes_begin();
  _cached_size_ = size;
  google_safe_concurrent_writes_end();
}
const ::google::protobuf::descriptor* sourcecodeinfo::descriptor() {
  protobuf_assigndescriptorsonce();
  return sourcecodeinfo_descriptor_;
}

const sourcecodeinfo& sourcecodeinfo::default_instance() {
  if (default_instance_ == null) protobuf_adddesc_google_2fprotobuf_2fdescriptor_2eproto();
  return *default_instance_;
}

sourcecodeinfo* sourcecodeinfo::default_instance_ = null;

sourcecodeinfo* sourcecodeinfo::new() const {
  return new sourcecodeinfo;
}

void sourcecodeinfo::clear() {
  location_.clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool sourcecodeinfo::mergepartialfromcodedstream(
    ::google::protobuf::io::codedinputstream* input) {
#define do_(expression) if (!(expression)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->readtag()) != 0) {
    switch (::google::protobuf::internal::wireformatlite::gettagfieldnumber(tag)) {
      // repeated .google.protobuf.sourcecodeinfo.location location = 1;
      case 1: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_location:
          do_(::google::protobuf::internal::wireformatlite::readmessagenovirtual(
                input, add_location()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(10)) goto parse_location;
        if (input->expectatend()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_end_group) {
          return true;
        }
        do_(::google::protobuf::internal::wireformat::skipfield(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef do_
}

void sourcecodeinfo::serializewithcachedsizes(
    ::google::protobuf::io::codedoutputstream* output) const {
  // repeated .google.protobuf.sourcecodeinfo.location location = 1;
  for (int i = 0; i < this->location_size(); i++) {
    ::google::protobuf::internal::wireformatlite::writemessagemaybetoarray(
      1, this->location(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::wireformat::serializeunknownfields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sourcecodeinfo::serializewithcachedsizestoarray(
    ::google::protobuf::uint8* target) const {
  // repeated .google.protobuf.sourcecodeinfo.location location = 1;
  for (int i = 0; i < this->location_size(); i++) {
    target = ::google::protobuf::internal::wireformatlite::
      writemessagenovirtualtoarray(
        1, this->location(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::wireformat::serializeunknownfieldstoarray(
        unknown_fields(), target);
  }
  return target;
}

int sourcecodeinfo::bytesize() const {
  int total_size = 0;

  // repeated .google.protobuf.sourcecodeinfo.location location = 1;
  total_size += 1 * this->location_size();
  for (int i = 0; i < this->location_size(); i++) {
    total_size +=
      ::google::protobuf::internal::wireformatlite::messagesizenovirtual(
        this->location(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::wireformat::computeunknownfieldssize(
        unknown_fields());
  }
  google_safe_concurrent_writes_begin();
  _cached_size_ = total_size;
  google_safe_concurrent_writes_end();
  return total_size;
}

void sourcecodeinfo::mergefrom(const ::google::protobuf::message& from) {
  google_check_ne(&from, this);
  const sourcecodeinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sourcecodeinfo*>(
      &from);
  if (source == null) {
    ::google::protobuf::internal::reflectionops::merge(from, this);
  } else {
    mergefrom(*source);
  }
}

void sourcecodeinfo::mergefrom(const sourcecodeinfo& from) {
  google_check_ne(&from, this);
  location_.mergefrom(from.location_);
  mutable_unknown_fields()->mergefrom(from.unknown_fields());
}

void sourcecodeinfo::copyfrom(const ::google::protobuf::message& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

void sourcecodeinfo::copyfrom(const sourcecodeinfo& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

bool sourcecodeinfo::isinitialized() const {

  return true;
}

void sourcecodeinfo::swap(sourcecodeinfo* other) {
  if (other != this) {
    location_.swap(&other->location_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::metadata sourcecodeinfo::getmetadata() const {
  protobuf_assigndescriptorsonce();
  ::google::protobuf::metadata metadata;
  metadata.descriptor = sourcecodeinfo_descriptor_;
  metadata.reflection = sourcecodeinfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
