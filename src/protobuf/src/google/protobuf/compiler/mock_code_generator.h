// protocol buffers - google's data interchange format
// copyright 2008 google inc.  all rights reserved.
// http://code.google.com/p/protobuf/
//
// redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * neither the name of google inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// this software is provided by the copyright holders and contributors
// "as is" and any express or implied warranties, including, but not
// limited to, the implied warranties of merchantability and fitness for
// a particular purpose are disclaimed. in no event shall the copyright
// owner or contributors be liable for any direct, indirect, incidental,
// special, exemplary, or consequential damages (including, but not
// limited to, procurement of substitute goods or services; loss of use,
// data, or profits; or business interruption) however caused and on any
// theory of liability, whether in contract, strict liability, or tort
// (including negligence or otherwise) arising in any way out of the use
// of this software, even if advised of the possibility of such damage.

// author: kenton@google.com (kenton varda)

#ifndef google_protobuf_compiler_mock_code_generator_h__
#define google_protobuf_compiler_mock_code_generator_h__

#include <string>
#include <google/protobuf/compiler/code_generator.h>

namespace google {
namespace protobuf {
namespace compiler {

// a mock codegenerator, used by command_line_interface_unittest.  this is in
// its own file so that it can be used both directly and as a plugin.
//
// generate() produces some output which can be checked by expectcalled().  the
// generator can run in a different process (e.g. a plugin).
//
// if the parameter is "insert=names", the mockcodegenerator will insert lines
// into the files generated by other mockcodegenerators instead of creating
// its own file.  names is a comma-separated list of the names of those other
// mockcodegenerators.
//
// mockcodegenerator will also modify its behavior slightly if the input file
// contains a message type with one of the following names:
//   mockcodegenerator_error:  causes generate() to return false and set the
//     error message to "saw message type mockcodegenerator_error."
//   mockcodegenerator_exit:  generate() prints "saw message type
//     mockcodegenerator_exit." to stderr and then calls exit(123).
//   mockcodegenerator_abort:  generate() prints "saw message type
//     mockcodegenerator_abort." to stderr and then calls abort().
//   mockcodegenerator_hassourcecodeinfo:  causes generate() to abort after
//     printing "saw message type mockcodegenerator_hassourcecodeinfo: foo." to
//     stderr, where foo is "1" if the supplied filedescriptorproto has source
//     code info, and "0" otherwise.
class mockcodegenerator : public codegenerator {
 public:
  mockcodegenerator(const string& name);
  virtual ~mockcodegenerator();

  // expect (via gtest) that a mockcodegenerator with the given name was called
  // with the given parameters by inspecting the output location.
  //
  // |insertions| is a comma-separated list of names of mockcodegenerators which
  // should have inserted lines into this file.
  // |parsed_file_list| is a comma-separated list of names of the files
  // that are being compiled together in this run.
  static void expectgenerated(const string& name,
                              const string& parameter,
                              const string& insertions,
                              const string& file,
                              const string& first_message_name,
                              const string& parsed_file_list,
                              const string& output_directory);

  // get the name of the file which would be written by the given generator.
  static string getoutputfilename(const string& generator_name,
                                  const filedescriptor* file);
  static string getoutputfilename(const string& generator_name,
                                  const string& file);

  // implements codegenerator ----------------------------------------

  virtual bool generate(const filedescriptor* file,
                        const string& parameter,
                        generatorcontext* context,
                        string* error) const;

 private:
  string name_;

  static string getoutputfilecontent(const string& generator_name,
                                     const string& parameter,
                                     const filedescriptor* file,
                                     generatorcontext *context);
  static string getoutputfilecontent(const string& generator_name,
                                     const string& parameter,
                                     const string& file,
                                     const string& parsed_file_list,
                                     const string& first_message_name);
};

}  // namespace compiler
}  // namespace protobuf

}  // namespace google
#endif  // google_protobuf_compiler_mock_code_generator_h__
