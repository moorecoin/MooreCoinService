// protocol buffers - google's data interchange format
// copyright 2008 google inc.  all rights reserved.
// http://code.google.com/p/protobuf/
//
// redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * neither the name of google inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// this software is provided by the copyright holders and contributors
// "as is" and any express or implied warranties, including, but not
// limited to, the implied warranties of merchantability and fitness for
// a particular purpose are disclaimed. in no event shall the copyright
// owner or contributors be liable for any direct, indirect, incidental,
// special, exemplary, or consequential damages (including, but not
// limited to, procurement of substitute goods or services; loss of use,
// data, or profits; or business interruption) however caused and on any
// theory of liability, whether in contract, strict liability, or tort
// (including negligence or otherwise) arising in any way out of the use
// of this software, even if advised of the possibility of such damage.

// author: kenton@google.com (kenton varda)
//  based on original protocol buffers design by
//  sanjay ghemawat, jeff dean, and others.

#include <google/protobuf/compiler/cpp/cpp_file.h>
#include <google/protobuf/compiler/cpp/cpp_enum.h>
#include <google/protobuf/compiler/cpp/cpp_service.h>
#include <google/protobuf/compiler/cpp/cpp_extension.h>
#include <google/protobuf/compiler/cpp/cpp_helpers.h>
#include <google/protobuf/compiler/cpp/cpp_message.h>
#include <google/protobuf/compiler/cpp/cpp_field.h>
#include <google/protobuf/io/printer.h>
#include <google/protobuf/descriptor.pb.h>
#include <google/protobuf/stubs/strutil.h>

namespace google {
namespace protobuf {
namespace compiler {
namespace cpp {

// ===================================================================

filegenerator::filegenerator(const filedescriptor* file,
                             const options& options)
  : file_(file),
    message_generators_(
      new scoped_ptr<messagegenerator>[file->message_type_count()]),
    enum_generators_(
      new scoped_ptr<enumgenerator>[file->enum_type_count()]),
    service_generators_(
      new scoped_ptr<servicegenerator>[file->service_count()]),
    extension_generators_(
      new scoped_ptr<extensiongenerator>[file->extension_count()]),
    options_(options) {

  for (int i = 0; i < file->message_type_count(); i++) {
    message_generators_[i].reset(
      new messagegenerator(file->message_type(i), options));
  }

  for (int i = 0; i < file->enum_type_count(); i++) {
    enum_generators_[i].reset(
      new enumgenerator(file->enum_type(i), options));
  }

  for (int i = 0; i < file->service_count(); i++) {
    service_generators_[i].reset(
      new servicegenerator(file->service(i), options));
  }

  for (int i = 0; i < file->extension_count(); i++) {
    extension_generators_[i].reset(
      new extensiongenerator(file->extension(i), options));
  }

  splitstringusing(file_->package(), ".", &package_parts_);
}

filegenerator::~filegenerator() {}

void filegenerator::generateheader(io::printer* printer) {
  string filename_identifier = filenameidentifier(file_->name());

  // generate top of header.
  printer->print(
    "// generated by the protocol buffer compiler.  do not edit!\n"
    "// source: $filename$\n"
    "\n"
    "#ifndef protobuf_$filename_identifier$__included\n"
    "#define protobuf_$filename_identifier$__included\n"
    "\n"
    "#include <string>\n"
    "\n",
    "filename", file_->name(),
    "filename_identifier", filename_identifier);


  printer->print(
    "#include <google/protobuf/stubs/common.h>\n"
    "\n");

  // verify the protobuf library header version is compatible with the protoc
  // version before going any further.
  printer->print(
    "#if google_protobuf_version < $min_header_version$\n"
    "#error this file was generated by a newer version of protoc which is\n"
    "#error incompatible with your protocol buffer headers.  please update\n"
    "#error your headers.\n"
    "#endif\n"
    "#if $protoc_version$ < google_protobuf_min_protoc_version\n"
    "#error this file was generated by an older version of protoc which is\n"
    "#error incompatible with your protocol buffer headers.  please\n"
    "#error regenerate this file with a newer version of protoc.\n"
    "#endif\n"
    "\n",
    "min_header_version",
      simpleitoa(protobuf::internal::kminheaderversionforprotoc),
    "protoc_version", simpleitoa(google_protobuf_version));

  // ok, it's now safe to #include other files.
  printer->print(
    "#include <google/protobuf/generated_message_util.h>\n");
  if (file_->message_type_count() > 0) {
    if (hasdescriptormethods(file_)) {
      printer->print(
        "#include <google/protobuf/message.h>\n");
    } else {
      printer->print(
        "#include <google/protobuf/message_lite.h>\n");
    }
  }
  printer->print(
    "#include <google/protobuf/repeated_field.h>\n"
    "#include <google/protobuf/extension_set.h>\n");

  if (hasdescriptormethods(file_) && hasenumdefinitions(file_)) {
    printer->print(
      "#include <google/protobuf/generated_enum_reflection.h>\n");
  }

  if (hasgenericservices(file_)) {
    printer->print(
      "#include <google/protobuf/service.h>\n");
  }

  if (hasunknownfields(file_) && file_->message_type_count() > 0) {
    printer->print(
      "#include <google/protobuf/unknown_field_set.h>\n");
  }


  for (int i = 0; i < file_->dependency_count(); i++) {
    printer->print(
      "#include \"$dependency$.pb.h\"\n",
      "dependency", stripproto(file_->dependency(i)->name()));
  }


  printer->print(
    "// @@protoc_insertion_point(includes)\n");


  // open namespace.
  generatenamespaceopeners(printer);

  // forward-declare the adddescriptors, assigndescriptors, and shutdownfile
  // functions, so that we can declare them to be friends of each class.
  printer->print(
    "\n"
    "// internal implementation detail -- do not call these.\n"
    "void $dllexport_decl$ $adddescriptorsname$();\n",
    "adddescriptorsname", globaladddescriptorsname(file_->name()),
    "dllexport_decl", options_.dllexport_decl);

  printer->print(
    // note that we don't put dllexport_decl on these because they are only
    // called by the .pb.cc file in which they are defined.
    "void $assigndescriptorsname$();\n"
    "void $shutdownfilename$();\n"
    "\n",
    "assigndescriptorsname", globalassigndescriptorsname(file_->name()),
    "shutdownfilename", globalshutdownfilename(file_->name()));

  // generate forward declarations of classes.
  for (int i = 0; i < file_->message_type_count(); i++) {
    message_generators_[i]->generateforwarddeclaration(printer);
  }

  printer->print("\n");

  // generate enum definitions.
  for (int i = 0; i < file_->message_type_count(); i++) {
    message_generators_[i]->generateenumdefinitions(printer);
  }
  for (int i = 0; i < file_->enum_type_count(); i++) {
    enum_generators_[i]->generatedefinition(printer);
  }

  printer->print(kthickseparator);
  printer->print("\n");

  // generate class definitions.
  for (int i = 0; i < file_->message_type_count(); i++) {
    if (i > 0) {
      printer->print("\n");
      printer->print(kthinseparator);
      printer->print("\n");
    }
    message_generators_[i]->generateclassdefinition(printer);
  }

  printer->print("\n");
  printer->print(kthickseparator);
  printer->print("\n");

  if (hasgenericservices(file_)) {
    // generate service definitions.
    for (int i = 0; i < file_->service_count(); i++) {
      if (i > 0) {
        printer->print("\n");
        printer->print(kthinseparator);
        printer->print("\n");
      }
      service_generators_[i]->generatedeclarations(printer);
    }

    printer->print("\n");
    printer->print(kthickseparator);
    printer->print("\n");
  }

  // declare extension identifiers.
  for (int i = 0; i < file_->extension_count(); i++) {
    extension_generators_[i]->generatedeclaration(printer);
  }

  printer->print("\n");
  printer->print(kthickseparator);
  printer->print("\n");

  // generate class inline methods.
  for (int i = 0; i < file_->message_type_count(); i++) {
    if (i > 0) {
      printer->print(kthinseparator);
      printer->print("\n");
    }
    message_generators_[i]->generateinlinemethods(printer);
  }

  printer->print(
    "\n"
    "// @@protoc_insertion_point(namespace_scope)\n");

  // close up namespace.
  generatenamespaceclosers(printer);

  // emit getenumdescriptor specializations into google::protobuf namespace:
  if (hasdescriptormethods(file_)) {
    // the swig conditional is to avoid a null-pointer dereference
    // (bug 1984964) in swig-1.3.21 resulting from the following syntax:
    //   namespace x { void y<z::w>(); }
    // which appears in getenumdescriptor() specializations.
    printer->print(
        "\n"
        "#ifndef swig\n"
        "namespace google {\nnamespace protobuf {\n"
        "\n");
    for (int i = 0; i < file_->message_type_count(); i++) {
      message_generators_[i]->generategetenumdescriptorspecializations(printer);
    }
    for (int i = 0; i < file_->enum_type_count(); i++) {
      enum_generators_[i]->generategetenumdescriptorspecializations(printer);
    }
    printer->print(
        "\n"
        "}  // namespace google\n}  // namespace protobuf\n"
        "#endif  // swig\n");
  }

  printer->print(
    "\n"
    "// @@protoc_insertion_point(global_scope)\n"
    "\n");

  printer->print(
    "#endif  // protobuf_$filename_identifier$__included\n",
    "filename_identifier", filename_identifier);
}

void filegenerator::generatesource(io::printer* printer) {
  printer->print(
    "// generated by the protocol buffer compiler.  do not edit!\n"
    "// source: $filename$\n"
    "\n"

    // the generated code calls accessors that might be deprecated. we don't
    // want the compiler to warn in generated code.
    "#define internal_suppress_protobuf_field_deprecation\n"
    "#include \"$basename$.pb.h\"\n"
    "\n"
    "#include <algorithm>\n"    // for swap()
    "\n"
    "#include <google/protobuf/stubs/common.h>\n"
    "#include <google/protobuf/stubs/once.h>\n"
    "#include <google/protobuf/io/coded_stream.h>\n"
    "#include <google/protobuf/wire_format_lite_inl.h>\n",
    "filename", file_->name(),
    "basename", stripproto(file_->name()));

  if (hasdescriptormethods(file_)) {
    printer->print(
      "#include <google/protobuf/descriptor.h>\n"
      "#include <google/protobuf/generated_message_reflection.h>\n"
      "#include <google/protobuf/reflection_ops.h>\n"
      "#include <google/protobuf/wire_format.h>\n");
  }

  printer->print(
    "// @@protoc_insertion_point(includes)\n");

  generatenamespaceopeners(printer);

  if (hasdescriptormethods(file_)) {
    printer->print(
      "\n"
      "namespace {\n"
      "\n");
    for (int i = 0; i < file_->message_type_count(); i++) {
      message_generators_[i]->generatedescriptordeclarations(printer);
    }
    for (int i = 0; i < file_->enum_type_count(); i++) {
      printer->print(
        "const ::google::protobuf::enumdescriptor* $name$_descriptor_ = null;\n",
        "name", classname(file_->enum_type(i), false));
    }

    if (hasgenericservices(file_)) {
      for (int i = 0; i < file_->service_count(); i++) {
        printer->print(
          "const ::google::protobuf::servicedescriptor* $name$_descriptor_ = null;\n",
          "name", file_->service(i)->name());
      }
    }

    printer->print(
      "\n"
      "}  // namespace\n"
      "\n");
  }

  // define our externally-visible builddescriptors() function.  (for the lite
  // library, all this does is initialize default instances.)
  generatebuilddescriptors(printer);

  // generate enums.
  for (int i = 0; i < file_->enum_type_count(); i++) {
    enum_generators_[i]->generatemethods(printer);
  }

  // generate classes.
  for (int i = 0; i < file_->message_type_count(); i++) {
    printer->print("\n");
    printer->print(kthickseparator);
    printer->print("\n");
    message_generators_[i]->generateclassmethods(printer);
  }

  if (hasgenericservices(file_)) {
    // generate services.
    for (int i = 0; i < file_->service_count(); i++) {
      if (i == 0) printer->print("\n");
      printer->print(kthickseparator);
      printer->print("\n");
      service_generators_[i]->generateimplementation(printer);
    }
  }

  // define extensions.
  for (int i = 0; i < file_->extension_count(); i++) {
    extension_generators_[i]->generatedefinition(printer);
  }

  printer->print(
    "\n"
    "// @@protoc_insertion_point(namespace_scope)\n");

  generatenamespaceclosers(printer);

  printer->print(
    "\n"
    "// @@protoc_insertion_point(global_scope)\n");
}

void filegenerator::generatebuilddescriptors(io::printer* printer) {
  // adddescriptors() is a file-level procedure which adds the encoded
  // filedescriptorproto for this .proto file to the global descriptorpool for
  // generated files (descriptorpool::generated_pool()). it either runs at
  // static initialization time (by default) or when default_instance() is
  // called for the first time (in lite_runtime mode with
  // google_protobuf_no_static_initializer flag enabled). this procedure also
  // constructs default instances and registers extensions.
  //
  // its sibling, assigndescriptors(), actually pulls the compiled
  // filedescriptor from the descriptorpool and uses it to populate all of
  // the global variables which store pointers to the descriptor objects.
  // it also constructs the reflection objects.  it is called the first time
  // anyone calls descriptor() or getreflection() on one of the types defined
  // in the file.

  // in optimize_for = lite_runtime mode, we don't generate assigndescriptors()
  // and we only use adddescriptors() to allocate default instances.
  if (hasdescriptormethods(file_)) {
    printer->print(
      "\n"
      "void $assigndescriptorsname$() {\n",
      "assigndescriptorsname", globalassigndescriptorsname(file_->name()));
    printer->indent();

    // make sure the file has found its way into the pool.  if a descriptor
    // is requested *during* static init then adddescriptors() may not have
    // been called yet, so we call it manually.  note that it's fine if
    // adddescriptors() is called multiple times.
    printer->print(
      "$adddescriptorsname$();\n",
      "adddescriptorsname", globaladddescriptorsname(file_->name()));

    // get the file's descriptor from the pool.
    printer->print(
      "const ::google::protobuf::filedescriptor* file =\n"
      "  ::google::protobuf::descriptorpool::generated_pool()->findfilebyname(\n"
      "    \"$filename$\");\n"
      // note that this google_check is necessary to prevent a warning about "file"
      // being unused when compiling an empty .proto file.
      "google_check(file != null);\n",
      "filename", file_->name());

    // go through all the stuff defined in this file and generated code to
    // assign the global descriptor pointers based on the file descriptor.
    for (int i = 0; i < file_->message_type_count(); i++) {
      message_generators_[i]->generatedescriptorinitializer(printer, i);
    }
    for (int i = 0; i < file_->enum_type_count(); i++) {
      enum_generators_[i]->generatedescriptorinitializer(printer, i);
    }
    if (hasgenericservices(file_)) {
      for (int i = 0; i < file_->service_count(); i++) {
        service_generators_[i]->generatedescriptorinitializer(printer, i);
      }
    }

    printer->outdent();
    printer->print(
      "}\n"
      "\n");

    // ---------------------------------------------------------------

    // protobuf_assigndescriptorsonce():  the first time it is called, calls
    // assigndescriptors().  all later times, waits for the first call to
    // complete and then returns.
    printer->print(
      "namespace {\n"
      "\n"
      "google_protobuf_declare_once(protobuf_assigndescriptors_once_);\n"
      "inline void protobuf_assigndescriptorsonce() {\n"
      "  ::google::protobuf::googleonceinit(&protobuf_assigndescriptors_once_,\n"
      "                 &$assigndescriptorsname$);\n"
      "}\n"
      "\n",
      "assigndescriptorsname", globalassigndescriptorsname(file_->name()));

    // protobuf_registertypes():  calls
    // messagefactory::internalregistergeneratedtype() for each message type.
    printer->print(
      "void protobuf_registertypes(const ::std::string&) {\n"
      "  protobuf_assigndescriptorsonce();\n");
    printer->indent();

    for (int i = 0; i < file_->message_type_count(); i++) {
      message_generators_[i]->generatetyperegistrations(printer);
    }

    printer->outdent();
    printer->print(
      "}\n"
      "\n"
      "}  // namespace\n");
  }

  // -----------------------------------------------------------------

  // shutdownfile():  deletes descriptors, default instances, etc. on shutdown.
  printer->print(
    "\n"
    "void $shutdownfilename$() {\n",
    "shutdownfilename", globalshutdownfilename(file_->name()));
  printer->indent();

  for (int i = 0; i < file_->message_type_count(); i++) {
    message_generators_[i]->generateshutdowncode(printer);
  }

  printer->outdent();
  printer->print(
    "}\n\n");

  // -----------------------------------------------------------------

  // now generate the adddescriptors() function.
  printhandlingoptionalstaticinitializers(
    file_, printer,
    // with static initializers.
    // note that we don't need any special synchronization in the following code
    // because it is called at static init time before any threads exist.
    "void $adddescriptorsname$() {\n"
    "  static bool already_here = false;\n"
    "  if (already_here) return;\n"
    "  already_here = true;\n"
    "  google_protobuf_verify_version;\n"
    "\n",
    // without.
    "void $adddescriptorsname$_impl() {\n"
    "  google_protobuf_verify_version;\n"
    "\n",
    // vars.
    "adddescriptorsname", globaladddescriptorsname(file_->name()));

  printer->indent();

  // call the adddescriptors() methods for all of our dependencies, to make
  // sure they get added first.
  for (int i = 0; i < file_->dependency_count(); i++) {
    const filedescriptor* dependency = file_->dependency(i);
    // print the namespace prefix for the dependency.
    vector<string> dependency_package_parts;
    splitstringusing(dependency->package(), ".", &dependency_package_parts);
    printer->print("::");
    for (int j = 0; j < dependency_package_parts.size(); j++) {
      printer->print("$name$::",
                     "name", dependency_package_parts[j]);
    }
    // call its adddescriptors function.
    printer->print(
      "$name$();\n",
      "name", globaladddescriptorsname(dependency->name()));
  }

  if (hasdescriptormethods(file_)) {
    // embed the descriptor.  we simply serialize the entire filedescriptorproto
    // and embed it as a string literal, which is parsed and built into real
    // descriptors at initialization time.
    filedescriptorproto file_proto;
    file_->copyto(&file_proto);
    string file_data;
    file_proto.serializetostring(&file_data);

    printer->print(
      "::google::protobuf::descriptorpool::internaladdgeneratedfile(");

    // only write 40 bytes per line.
    static const int kbytesperline = 40;
    for (int i = 0; i < file_data.size(); i += kbytesperline) {
      printer->print("\n  \"$data$\"",
                     "data",
                     escapetrigraphs(
                         cescape(file_data.substr(i, kbytesperline))));
    }
    printer->print(
        ", $size$);\n",
      "size", simpleitoa(file_data.size()));

    // call messagefactory::internalregistergeneratedfile().
    printer->print(
      "::google::protobuf::messagefactory::internalregistergeneratedfile(\n"
      "  \"$filename$\", &protobuf_registertypes);\n",
      "filename", file_->name());
  }

  // allocate and initialize default instances.  this can't be done lazily
  // since default instances are returned by simple accessors and are used with
  // extensions.  speaking of which, we also register extensions at this time.
  for (int i = 0; i < file_->message_type_count(); i++) {
    message_generators_[i]->generatedefaultinstanceallocator(printer);
  }
  for (int i = 0; i < file_->extension_count(); i++) {
    extension_generators_[i]->generateregistration(printer);
  }
  for (int i = 0; i < file_->message_type_count(); i++) {
    message_generators_[i]->generatedefaultinstanceinitializer(printer);
  }

  printer->print(
    "::google::protobuf::internal::onshutdown(&$shutdownfilename$);\n",
    "shutdownfilename", globalshutdownfilename(file_->name()));

  printer->outdent();
  printer->print(
    "}\n"
    "\n");

  printhandlingoptionalstaticinitializers(
    file_, printer,
    // with static initializers.
    "// force adddescriptors() to be called at static initialization time.\n"
    "struct staticdescriptorinitializer_$filename$ {\n"
    "  staticdescriptorinitializer_$filename$() {\n"
    "    $adddescriptorsname$();\n"
    "  }\n"
    "} static_descriptor_initializer_$filename$_;\n",
    // without.
    "google_protobuf_declare_once($adddescriptorsname$_once_);\n"
    "void $adddescriptorsname$() {\n"
    "  ::google::protobuf::::google::protobuf::googleonceinit(&$adddescriptorsname$_once_,\n"
    "                 &$adddescriptorsname$_impl);\n"
    "}\n",
    // vars.
    "adddescriptorsname", globaladddescriptorsname(file_->name()),
    "filename", filenameidentifier(file_->name()));
}

void filegenerator::generatenamespaceopeners(io::printer* printer) {
  if (package_parts_.size() > 0) printer->print("\n");

  for (int i = 0; i < package_parts_.size(); i++) {
    printer->print("namespace $part$ {\n",
                   "part", package_parts_[i]);
  }
}

void filegenerator::generatenamespaceclosers(io::printer* printer) {
  if (package_parts_.size() > 0) printer->print("\n");

  for (int i = package_parts_.size() - 1; i >= 0; i--) {
    printer->print("}  // namespace $part$\n",
                   "part", package_parts_[i]);
  }
}

}  // namespace cpp
}  // namespace compiler
}  // namespace protobuf
}  // namespace google
