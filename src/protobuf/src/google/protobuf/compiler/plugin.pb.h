// generated by the protocol buffer compiler.  do not edit!
// source: google/protobuf/compiler/plugin.proto

#ifndef protobuf_google_2fprotobuf_2fcompiler_2fplugin_2eproto__included
#define protobuf_google_2fprotobuf_2fcompiler_2fplugin_2eproto__included

#include <string>

#include <google/protobuf/stubs/common.h>

#if google_protobuf_version < 2005001
#error this file was generated by a newer version of protoc which is
#error incompatible with your protocol buffer headers.  please update
#error your headers.
#endif
#if 2005001 < google_protobuf_min_protoc_version
#error this file was generated by an older version of protoc which is
#error incompatible with your protocol buffer headers.  please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/protobuf/descriptor.pb.h"
// @@protoc_insertion_point(includes)

namespace google {
namespace protobuf {
namespace compiler {

// internal implementation detail -- do not call these.
void libprotoc_export protobuf_adddesc_google_2fprotobuf_2fcompiler_2fplugin_2eproto();
void protobuf_assigndesc_google_2fprotobuf_2fcompiler_2fplugin_2eproto();
void protobuf_shutdownfile_google_2fprotobuf_2fcompiler_2fplugin_2eproto();

class codegeneratorrequest;
class codegeneratorresponse;
class codegeneratorresponse_file;

// ===================================================================

class libprotoc_export codegeneratorrequest : public ::google::protobuf::message {
 public:
  codegeneratorrequest();
  virtual ~codegeneratorrequest();

  codegeneratorrequest(const codegeneratorrequest& from);

  inline codegeneratorrequest& operator=(const codegeneratorrequest& from) {
    copyfrom(from);
    return *this;
  }

  inline const ::google::protobuf::unknownfieldset& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::unknownfieldset* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::descriptor* descriptor();
  static const codegeneratorrequest& default_instance();

  void swap(codegeneratorrequest* other);

  // implements message ----------------------------------------------

  codegeneratorrequest* new() const;
  void copyfrom(const ::google::protobuf::message& from);
  void mergefrom(const ::google::protobuf::message& from);
  void copyfrom(const codegeneratorrequest& from);
  void mergefrom(const codegeneratorrequest& from);
  void clear();
  bool isinitialized() const;

  int bytesize() const;
  bool mergepartialfromcodedstream(
      ::google::protobuf::io::codedinputstream* input);
  void serializewithcachedsizes(
      ::google::protobuf::io::codedoutputstream* output) const;
  ::google::protobuf::uint8* serializewithcachedsizestoarray(::google::protobuf::uint8* output) const;
  int getcachedsize() const { return _cached_size_; }
  private:
  void sharedctor();
  void shareddtor();
  void setcachedsize(int size) const;
  public:

  ::google::protobuf::metadata getmetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string file_to_generate = 1;
  inline int file_to_generate_size() const;
  inline void clear_file_to_generate();
  static const int kfiletogeneratefieldnumber = 1;
  inline const ::std::string& file_to_generate(int index) const;
  inline ::std::string* mutable_file_to_generate(int index);
  inline void set_file_to_generate(int index, const ::std::string& value);
  inline void set_file_to_generate(int index, const char* value);
  inline void set_file_to_generate(int index, const char* value, size_t size);
  inline ::std::string* add_file_to_generate();
  inline void add_file_to_generate(const ::std::string& value);
  inline void add_file_to_generate(const char* value);
  inline void add_file_to_generate(const char* value, size_t size);
  inline const ::google::protobuf::repeatedptrfield< ::std::string>& file_to_generate() const;
  inline ::google::protobuf::repeatedptrfield< ::std::string>* mutable_file_to_generate();

  // optional string parameter = 2;
  inline bool has_parameter() const;
  inline void clear_parameter();
  static const int kparameterfieldnumber = 2;
  inline const ::std::string& parameter() const;
  inline void set_parameter(const ::std::string& value);
  inline void set_parameter(const char* value);
  inline void set_parameter(const char* value, size_t size);
  inline ::std::string* mutable_parameter();
  inline ::std::string* release_parameter();
  inline void set_allocated_parameter(::std::string* parameter);

  // repeated .google.protobuf.filedescriptorproto proto_file = 15;
  inline int proto_file_size() const;
  inline void clear_proto_file();
  static const int kprotofilefieldnumber = 15;
  inline const ::google::protobuf::filedescriptorproto& proto_file(int index) const;
  inline ::google::protobuf::filedescriptorproto* mutable_proto_file(int index);
  inline ::google::protobuf::filedescriptorproto* add_proto_file();
  inline const ::google::protobuf::repeatedptrfield< ::google::protobuf::filedescriptorproto >&
      proto_file() const;
  inline ::google::protobuf::repeatedptrfield< ::google::protobuf::filedescriptorproto >*
      mutable_proto_file();

  // @@protoc_insertion_point(class_scope:google.protobuf.compiler.codegeneratorrequest)
 private:
  inline void set_has_parameter();
  inline void clear_has_parameter();

  ::google::protobuf::unknownfieldset _unknown_fields_;

  ::google::protobuf::repeatedptrfield< ::std::string> file_to_generate_;
  ::std::string* parameter_;
  ::google::protobuf::repeatedptrfield< ::google::protobuf::filedescriptorproto > proto_file_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void libprotoc_export protobuf_adddesc_google_2fprotobuf_2fcompiler_2fplugin_2eproto();
  friend void protobuf_assigndesc_google_2fprotobuf_2fcompiler_2fplugin_2eproto();
  friend void protobuf_shutdownfile_google_2fprotobuf_2fcompiler_2fplugin_2eproto();

  void initasdefaultinstance();
  static codegeneratorrequest* default_instance_;
};
// -------------------------------------------------------------------

class libprotoc_export codegeneratorresponse_file : public ::google::protobuf::message {
 public:
  codegeneratorresponse_file();
  virtual ~codegeneratorresponse_file();

  codegeneratorresponse_file(const codegeneratorresponse_file& from);

  inline codegeneratorresponse_file& operator=(const codegeneratorresponse_file& from) {
    copyfrom(from);
    return *this;
  }

  inline const ::google::protobuf::unknownfieldset& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::unknownfieldset* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::descriptor* descriptor();
  static const codegeneratorresponse_file& default_instance();

  void swap(codegeneratorresponse_file* other);

  // implements message ----------------------------------------------

  codegeneratorresponse_file* new() const;
  void copyfrom(const ::google::protobuf::message& from);
  void mergefrom(const ::google::protobuf::message& from);
  void copyfrom(const codegeneratorresponse_file& from);
  void mergefrom(const codegeneratorresponse_file& from);
  void clear();
  bool isinitialized() const;

  int bytesize() const;
  bool mergepartialfromcodedstream(
      ::google::protobuf::io::codedinputstream* input);
  void serializewithcachedsizes(
      ::google::protobuf::io::codedoutputstream* output) const;
  ::google::protobuf::uint8* serializewithcachedsizestoarray(::google::protobuf::uint8* output) const;
  int getcachedsize() const { return _cached_size_; }
  private:
  void sharedctor();
  void shareddtor();
  void setcachedsize(int size) const;
  public:

  ::google::protobuf::metadata getmetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int knamefieldnumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string insertion_point = 2;
  inline bool has_insertion_point() const;
  inline void clear_insertion_point();
  static const int kinsertionpointfieldnumber = 2;
  inline const ::std::string& insertion_point() const;
  inline void set_insertion_point(const ::std::string& value);
  inline void set_insertion_point(const char* value);
  inline void set_insertion_point(const char* value, size_t size);
  inline ::std::string* mutable_insertion_point();
  inline ::std::string* release_insertion_point();
  inline void set_allocated_insertion_point(::std::string* insertion_point);

  // optional string content = 15;
  inline bool has_content() const;
  inline void clear_content();
  static const int kcontentfieldnumber = 15;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:google.protobuf.compiler.codegeneratorresponse.file)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_insertion_point();
  inline void clear_has_insertion_point();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::unknownfieldset _unknown_fields_;

  ::std::string* name_;
  ::std::string* insertion_point_;
  ::std::string* content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void libprotoc_export protobuf_adddesc_google_2fprotobuf_2fcompiler_2fplugin_2eproto();
  friend void protobuf_assigndesc_google_2fprotobuf_2fcompiler_2fplugin_2eproto();
  friend void protobuf_shutdownfile_google_2fprotobuf_2fcompiler_2fplugin_2eproto();

  void initasdefaultinstance();
  static codegeneratorresponse_file* default_instance_;
};
// -------------------------------------------------------------------

class libprotoc_export codegeneratorresponse : public ::google::protobuf::message {
 public:
  codegeneratorresponse();
  virtual ~codegeneratorresponse();

  codegeneratorresponse(const codegeneratorresponse& from);

  inline codegeneratorresponse& operator=(const codegeneratorresponse& from) {
    copyfrom(from);
    return *this;
  }

  inline const ::google::protobuf::unknownfieldset& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::unknownfieldset* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::descriptor* descriptor();
  static const codegeneratorresponse& default_instance();

  void swap(codegeneratorresponse* other);

  // implements message ----------------------------------------------

  codegeneratorresponse* new() const;
  void copyfrom(const ::google::protobuf::message& from);
  void mergefrom(const ::google::protobuf::message& from);
  void copyfrom(const codegeneratorresponse& from);
  void mergefrom(const codegeneratorresponse& from);
  void clear();
  bool isinitialized() const;

  int bytesize() const;
  bool mergepartialfromcodedstream(
      ::google::protobuf::io::codedinputstream* input);
  void serializewithcachedsizes(
      ::google::protobuf::io::codedoutputstream* output) const;
  ::google::protobuf::uint8* serializewithcachedsizestoarray(::google::protobuf::uint8* output) const;
  int getcachedsize() const { return _cached_size_; }
  private:
  void sharedctor();
  void shareddtor();
  void setcachedsize(int size) const;
  public:

  ::google::protobuf::metadata getmetadata() const;

  // nested types ----------------------------------------------------

  typedef codegeneratorresponse_file file;

  // accessors -------------------------------------------------------

  // optional string error = 1;
  inline bool has_error() const;
  inline void clear_error();
  static const int kerrorfieldnumber = 1;
  inline const ::std::string& error() const;
  inline void set_error(const ::std::string& value);
  inline void set_error(const char* value);
  inline void set_error(const char* value, size_t size);
  inline ::std::string* mutable_error();
  inline ::std::string* release_error();
  inline void set_allocated_error(::std::string* error);

  // repeated .google.protobuf.compiler.codegeneratorresponse.file file = 15;
  inline int file_size() const;
  inline void clear_file();
  static const int kfilefieldnumber = 15;
  inline const ::google::protobuf::compiler::codegeneratorresponse_file& file(int index) const;
  inline ::google::protobuf::compiler::codegeneratorresponse_file* mutable_file(int index);
  inline ::google::protobuf::compiler::codegeneratorresponse_file* add_file();
  inline const ::google::protobuf::repeatedptrfield< ::google::protobuf::compiler::codegeneratorresponse_file >&
      file() const;
  inline ::google::protobuf::repeatedptrfield< ::google::protobuf::compiler::codegeneratorresponse_file >*
      mutable_file();

  // @@protoc_insertion_point(class_scope:google.protobuf.compiler.codegeneratorresponse)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::unknownfieldset _unknown_fields_;

  ::std::string* error_;
  ::google::protobuf::repeatedptrfield< ::google::protobuf::compiler::codegeneratorresponse_file > file_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void libprotoc_export protobuf_adddesc_google_2fprotobuf_2fcompiler_2fplugin_2eproto();
  friend void protobuf_assigndesc_google_2fprotobuf_2fcompiler_2fplugin_2eproto();
  friend void protobuf_shutdownfile_google_2fprotobuf_2fcompiler_2fplugin_2eproto();

  void initasdefaultinstance();
  static codegeneratorresponse* default_instance_;
};
// ===================================================================


// ===================================================================

// codegeneratorrequest

// repeated string file_to_generate = 1;
inline int codegeneratorrequest::file_to_generate_size() const {
  return file_to_generate_.size();
}
inline void codegeneratorrequest::clear_file_to_generate() {
  file_to_generate_.clear();
}
inline const ::std::string& codegeneratorrequest::file_to_generate(int index) const {
  return file_to_generate_.get(index);
}
inline ::std::string* codegeneratorrequest::mutable_file_to_generate(int index) {
  return file_to_generate_.mutable(index);
}
inline void codegeneratorrequest::set_file_to_generate(int index, const ::std::string& value) {
  file_to_generate_.mutable(index)->assign(value);
}
inline void codegeneratorrequest::set_file_to_generate(int index, const char* value) {
  file_to_generate_.mutable(index)->assign(value);
}
inline void codegeneratorrequest::set_file_to_generate(int index, const char* value, size_t size) {
  file_to_generate_.mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* codegeneratorrequest::add_file_to_generate() {
  return file_to_generate_.add();
}
inline void codegeneratorrequest::add_file_to_generate(const ::std::string& value) {
  file_to_generate_.add()->assign(value);
}
inline void codegeneratorrequest::add_file_to_generate(const char* value) {
  file_to_generate_.add()->assign(value);
}
inline void codegeneratorrequest::add_file_to_generate(const char* value, size_t size) {
  file_to_generate_.add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::repeatedptrfield< ::std::string>&
codegeneratorrequest::file_to_generate() const {
  return file_to_generate_;
}
inline ::google::protobuf::repeatedptrfield< ::std::string>*
codegeneratorrequest::mutable_file_to_generate() {
  return &file_to_generate_;
}

// optional string parameter = 2;
inline bool codegeneratorrequest::has_parameter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void codegeneratorrequest::set_has_parameter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void codegeneratorrequest::clear_has_parameter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void codegeneratorrequest::clear_parameter() {
  if (parameter_ != &::google::protobuf::internal::kemptystring) {
    parameter_->clear();
  }
  clear_has_parameter();
}
inline const ::std::string& codegeneratorrequest::parameter() const {
  return *parameter_;
}
inline void codegeneratorrequest::set_parameter(const ::std::string& value) {
  set_has_parameter();
  if (parameter_ == &::google::protobuf::internal::kemptystring) {
    parameter_ = new ::std::string;
  }
  parameter_->assign(value);
}
inline void codegeneratorrequest::set_parameter(const char* value) {
  set_has_parameter();
  if (parameter_ == &::google::protobuf::internal::kemptystring) {
    parameter_ = new ::std::string;
  }
  parameter_->assign(value);
}
inline void codegeneratorrequest::set_parameter(const char* value, size_t size) {
  set_has_parameter();
  if (parameter_ == &::google::protobuf::internal::kemptystring) {
    parameter_ = new ::std::string;
  }
  parameter_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* codegeneratorrequest::mutable_parameter() {
  set_has_parameter();
  if (parameter_ == &::google::protobuf::internal::kemptystring) {
    parameter_ = new ::std::string;
  }
  return parameter_;
}
inline ::std::string* codegeneratorrequest::release_parameter() {
  clear_has_parameter();
  if (parameter_ == &::google::protobuf::internal::kemptystring) {
    return null;
  } else {
    ::std::string* temp = parameter_;
    parameter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kemptystring);
    return temp;
  }
}
inline void codegeneratorrequest::set_allocated_parameter(::std::string* parameter) {
  if (parameter_ != &::google::protobuf::internal::kemptystring) {
    delete parameter_;
  }
  if (parameter) {
    set_has_parameter();
    parameter_ = parameter;
  } else {
    clear_has_parameter();
    parameter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kemptystring);
  }
}

// repeated .google.protobuf.filedescriptorproto proto_file = 15;
inline int codegeneratorrequest::proto_file_size() const {
  return proto_file_.size();
}
inline void codegeneratorrequest::clear_proto_file() {
  proto_file_.clear();
}
inline const ::google::protobuf::filedescriptorproto& codegeneratorrequest::proto_file(int index) const {
  return proto_file_.get(index);
}
inline ::google::protobuf::filedescriptorproto* codegeneratorrequest::mutable_proto_file(int index) {
  return proto_file_.mutable(index);
}
inline ::google::protobuf::filedescriptorproto* codegeneratorrequest::add_proto_file() {
  return proto_file_.add();
}
inline const ::google::protobuf::repeatedptrfield< ::google::protobuf::filedescriptorproto >&
codegeneratorrequest::proto_file() const {
  return proto_file_;
}
inline ::google::protobuf::repeatedptrfield< ::google::protobuf::filedescriptorproto >*
codegeneratorrequest::mutable_proto_file() {
  return &proto_file_;
}

// -------------------------------------------------------------------

// codegeneratorresponse_file

// optional string name = 1;
inline bool codegeneratorresponse_file::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void codegeneratorresponse_file::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void codegeneratorresponse_file::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void codegeneratorresponse_file::clear_name() {
  if (name_ != &::google::protobuf::internal::kemptystring) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& codegeneratorresponse_file::name() const {
  return *name_;
}
inline void codegeneratorresponse_file::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kemptystring) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void codegeneratorresponse_file::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kemptystring) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void codegeneratorresponse_file::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kemptystring) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* codegeneratorresponse_file::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kemptystring) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* codegeneratorresponse_file::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kemptystring) {
    return null;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kemptystring);
    return temp;
  }
}
inline void codegeneratorresponse_file::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kemptystring) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kemptystring);
  }
}

// optional string insertion_point = 2;
inline bool codegeneratorresponse_file::has_insertion_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void codegeneratorresponse_file::set_has_insertion_point() {
  _has_bits_[0] |= 0x00000002u;
}
inline void codegeneratorresponse_file::clear_has_insertion_point() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void codegeneratorresponse_file::clear_insertion_point() {
  if (insertion_point_ != &::google::protobuf::internal::kemptystring) {
    insertion_point_->clear();
  }
  clear_has_insertion_point();
}
inline const ::std::string& codegeneratorresponse_file::insertion_point() const {
  return *insertion_point_;
}
inline void codegeneratorresponse_file::set_insertion_point(const ::std::string& value) {
  set_has_insertion_point();
  if (insertion_point_ == &::google::protobuf::internal::kemptystring) {
    insertion_point_ = new ::std::string;
  }
  insertion_point_->assign(value);
}
inline void codegeneratorresponse_file::set_insertion_point(const char* value) {
  set_has_insertion_point();
  if (insertion_point_ == &::google::protobuf::internal::kemptystring) {
    insertion_point_ = new ::std::string;
  }
  insertion_point_->assign(value);
}
inline void codegeneratorresponse_file::set_insertion_point(const char* value, size_t size) {
  set_has_insertion_point();
  if (insertion_point_ == &::google::protobuf::internal::kemptystring) {
    insertion_point_ = new ::std::string;
  }
  insertion_point_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* codegeneratorresponse_file::mutable_insertion_point() {
  set_has_insertion_point();
  if (insertion_point_ == &::google::protobuf::internal::kemptystring) {
    insertion_point_ = new ::std::string;
  }
  return insertion_point_;
}
inline ::std::string* codegeneratorresponse_file::release_insertion_point() {
  clear_has_insertion_point();
  if (insertion_point_ == &::google::protobuf::internal::kemptystring) {
    return null;
  } else {
    ::std::string* temp = insertion_point_;
    insertion_point_ = const_cast< ::std::string*>(&::google::protobuf::internal::kemptystring);
    return temp;
  }
}
inline void codegeneratorresponse_file::set_allocated_insertion_point(::std::string* insertion_point) {
  if (insertion_point_ != &::google::protobuf::internal::kemptystring) {
    delete insertion_point_;
  }
  if (insertion_point) {
    set_has_insertion_point();
    insertion_point_ = insertion_point;
  } else {
    clear_has_insertion_point();
    insertion_point_ = const_cast< ::std::string*>(&::google::protobuf::internal::kemptystring);
  }
}

// optional string content = 15;
inline bool codegeneratorresponse_file::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void codegeneratorresponse_file::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void codegeneratorresponse_file::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void codegeneratorresponse_file::clear_content() {
  if (content_ != &::google::protobuf::internal::kemptystring) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& codegeneratorresponse_file::content() const {
  return *content_;
}
inline void codegeneratorresponse_file::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kemptystring) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void codegeneratorresponse_file::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kemptystring) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void codegeneratorresponse_file::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kemptystring) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* codegeneratorresponse_file::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kemptystring) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* codegeneratorresponse_file::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kemptystring) {
    return null;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kemptystring);
    return temp;
  }
}
inline void codegeneratorresponse_file::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kemptystring) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kemptystring);
  }
}

// -------------------------------------------------------------------

// codegeneratorresponse

// optional string error = 1;
inline bool codegeneratorresponse::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void codegeneratorresponse::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void codegeneratorresponse::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void codegeneratorresponse::clear_error() {
  if (error_ != &::google::protobuf::internal::kemptystring) {
    error_->clear();
  }
  clear_has_error();
}
inline const ::std::string& codegeneratorresponse::error() const {
  return *error_;
}
inline void codegeneratorresponse::set_error(const ::std::string& value) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::kemptystring) {
    error_ = new ::std::string;
  }
  error_->assign(value);
}
inline void codegeneratorresponse::set_error(const char* value) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::kemptystring) {
    error_ = new ::std::string;
  }
  error_->assign(value);
}
inline void codegeneratorresponse::set_error(const char* value, size_t size) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::kemptystring) {
    error_ = new ::std::string;
  }
  error_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* codegeneratorresponse::mutable_error() {
  set_has_error();
  if (error_ == &::google::protobuf::internal::kemptystring) {
    error_ = new ::std::string;
  }
  return error_;
}
inline ::std::string* codegeneratorresponse::release_error() {
  clear_has_error();
  if (error_ == &::google::protobuf::internal::kemptystring) {
    return null;
  } else {
    ::std::string* temp = error_;
    error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kemptystring);
    return temp;
  }
}
inline void codegeneratorresponse::set_allocated_error(::std::string* error) {
  if (error_ != &::google::protobuf::internal::kemptystring) {
    delete error_;
  }
  if (error) {
    set_has_error();
    error_ = error;
  } else {
    clear_has_error();
    error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kemptystring);
  }
}

// repeated .google.protobuf.compiler.codegeneratorresponse.file file = 15;
inline int codegeneratorresponse::file_size() const {
  return file_.size();
}
inline void codegeneratorresponse::clear_file() {
  file_.clear();
}
inline const ::google::protobuf::compiler::codegeneratorresponse_file& codegeneratorresponse::file(int index) const {
  return file_.get(index);
}
inline ::google::protobuf::compiler::codegeneratorresponse_file* codegeneratorresponse::mutable_file(int index) {
  return file_.mutable(index);
}
inline ::google::protobuf::compiler::codegeneratorresponse_file* codegeneratorresponse::add_file() {
  return file_.add();
}
inline const ::google::protobuf::repeatedptrfield< ::google::protobuf::compiler::codegeneratorresponse_file >&
codegeneratorresponse::file() const {
  return file_;
}
inline ::google::protobuf::repeatedptrfield< ::google::protobuf::compiler::codegeneratorresponse_file >*
codegeneratorresponse::mutable_file() {
  return &file_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace compiler
}  // namespace protobuf
}  // namespace google

#ifndef swig
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // swig

// @@protoc_insertion_point(global_scope)

#endif  // protobuf_google_2fprotobuf_2fcompiler_2fplugin_2eproto__included
