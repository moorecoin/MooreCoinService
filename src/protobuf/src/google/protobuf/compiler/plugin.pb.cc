// generated by the protocol buffer compiler.  do not edit!
// source: google/protobuf/compiler/plugin.proto

#define internal_suppress_protobuf_field_deprecation
#include "google/protobuf/compiler/plugin.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace protobuf {
namespace compiler {

namespace {

const ::google::protobuf::descriptor* codegeneratorrequest_descriptor_ = null;
const ::google::protobuf::internal::generatedmessagereflection*
  codegeneratorrequest_reflection_ = null;
const ::google::protobuf::descriptor* codegeneratorresponse_descriptor_ = null;
const ::google::protobuf::internal::generatedmessagereflection*
  codegeneratorresponse_reflection_ = null;
const ::google::protobuf::descriptor* codegeneratorresponse_file_descriptor_ = null;
const ::google::protobuf::internal::generatedmessagereflection*
  codegeneratorresponse_file_reflection_ = null;

}  // namespace


void protobuf_assigndesc_google_2fprotobuf_2fcompiler_2fplugin_2eproto() {
  protobuf_adddesc_google_2fprotobuf_2fcompiler_2fplugin_2eproto();
  const ::google::protobuf::filedescriptor* file =
    ::google::protobuf::descriptorpool::generated_pool()->findfilebyname(
      "google/protobuf/compiler/plugin.proto");
  google_check(file != null);
  codegeneratorrequest_descriptor_ = file->message_type(0);
  static const int codegeneratorrequest_offsets_[3] = {
    google_protobuf_generated_message_field_offset(codegeneratorrequest, file_to_generate_),
    google_protobuf_generated_message_field_offset(codegeneratorrequest, parameter_),
    google_protobuf_generated_message_field_offset(codegeneratorrequest, proto_file_),
  };
  codegeneratorrequest_reflection_ =
    new ::google::protobuf::internal::generatedmessagereflection(
      codegeneratorrequest_descriptor_,
      codegeneratorrequest::default_instance_,
      codegeneratorrequest_offsets_,
      google_protobuf_generated_message_field_offset(codegeneratorrequest, _has_bits_[0]),
      google_protobuf_generated_message_field_offset(codegeneratorrequest, _unknown_fields_),
      -1,
      ::google::protobuf::descriptorpool::generated_pool(),
      ::google::protobuf::messagefactory::generated_factory(),
      sizeof(codegeneratorrequest));
  codegeneratorresponse_descriptor_ = file->message_type(1);
  static const int codegeneratorresponse_offsets_[2] = {
    google_protobuf_generated_message_field_offset(codegeneratorresponse, error_),
    google_protobuf_generated_message_field_offset(codegeneratorresponse, file_),
  };
  codegeneratorresponse_reflection_ =
    new ::google::protobuf::internal::generatedmessagereflection(
      codegeneratorresponse_descriptor_,
      codegeneratorresponse::default_instance_,
      codegeneratorresponse_offsets_,
      google_protobuf_generated_message_field_offset(codegeneratorresponse, _has_bits_[0]),
      google_protobuf_generated_message_field_offset(codegeneratorresponse, _unknown_fields_),
      -1,
      ::google::protobuf::descriptorpool::generated_pool(),
      ::google::protobuf::messagefactory::generated_factory(),
      sizeof(codegeneratorresponse));
  codegeneratorresponse_file_descriptor_ = codegeneratorresponse_descriptor_->nested_type(0);
  static const int codegeneratorresponse_file_offsets_[3] = {
    google_protobuf_generated_message_field_offset(codegeneratorresponse_file, name_),
    google_protobuf_generated_message_field_offset(codegeneratorresponse_file, insertion_point_),
    google_protobuf_generated_message_field_offset(codegeneratorresponse_file, content_),
  };
  codegeneratorresponse_file_reflection_ =
    new ::google::protobuf::internal::generatedmessagereflection(
      codegeneratorresponse_file_descriptor_,
      codegeneratorresponse_file::default_instance_,
      codegeneratorresponse_file_offsets_,
      google_protobuf_generated_message_field_offset(codegeneratorresponse_file, _has_bits_[0]),
      google_protobuf_generated_message_field_offset(codegeneratorresponse_file, _unknown_fields_),
      -1,
      ::google::protobuf::descriptorpool::generated_pool(),
      ::google::protobuf::messagefactory::generated_factory(),
      sizeof(codegeneratorresponse_file));
}

namespace {

google_protobuf_declare_once(protobuf_assigndescriptors_once_);
inline void protobuf_assigndescriptorsonce() {
  ::google::protobuf::googleonceinit(&protobuf_assigndescriptors_once_,
                 &protobuf_assigndesc_google_2fprotobuf_2fcompiler_2fplugin_2eproto);
}

void protobuf_registertypes(const ::std::string&) {
  protobuf_assigndescriptorsonce();
  ::google::protobuf::messagefactory::internalregistergeneratedmessage(
    codegeneratorrequest_descriptor_, &codegeneratorrequest::default_instance());
  ::google::protobuf::messagefactory::internalregistergeneratedmessage(
    codegeneratorresponse_descriptor_, &codegeneratorresponse::default_instance());
  ::google::protobuf::messagefactory::internalregistergeneratedmessage(
    codegeneratorresponse_file_descriptor_, &codegeneratorresponse_file::default_instance());
}

}  // namespace

void protobuf_shutdownfile_google_2fprotobuf_2fcompiler_2fplugin_2eproto() {
  delete codegeneratorrequest::default_instance_;
  delete codegeneratorrequest_reflection_;
  delete codegeneratorresponse::default_instance_;
  delete codegeneratorresponse_reflection_;
  delete codegeneratorresponse_file::default_instance_;
  delete codegeneratorresponse_file_reflection_;
}

void protobuf_adddesc_google_2fprotobuf_2fcompiler_2fplugin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  google_protobuf_verify_version;

  ::google::protobuf::protobuf_adddesc_google_2fprotobuf_2fdescriptor_2eproto();
  ::google::protobuf::descriptorpool::internaladdgeneratedfile(
    "\n%google/protobuf/compiler/plugin.proto\022"
    "\030google.protobuf.compiler\032 google/protob"
    "uf/descriptor.proto\"}\n\024codegeneratorrequ"
    "est\022\030\n\020file_to_generate\030\001 \003(\t\022\021\n\tparamet"
    "er\030\002 \001(\t\0228\n\nproto_file\030\017 \003(\0132$.google.pr"
    "otobuf.filedescriptorproto\"\252\001\n\025codegener"
    "atorresponse\022\r\n\005error\030\001 \001(\t\022b\n\004file\030\017 \003("
    "\01324.google.protobuf.compiler.codegenerat"
    "orresponse.file\032>\n\004file\022\014\n\004name\030\001 \001(\t\022\027\n"
    "\017insertion_point\030\002 \001(\t\022\017\n\007content\030\017 \001(\tb"
    ",\n\034com.google.protobuf.compilerb\014pluginp"
    "rotos", 445);
  ::google::protobuf::messagefactory::internalregistergeneratedfile(
    "google/protobuf/compiler/plugin.proto", &protobuf_registertypes);
  codegeneratorrequest::default_instance_ = new codegeneratorrequest();
  codegeneratorresponse::default_instance_ = new codegeneratorresponse();
  codegeneratorresponse_file::default_instance_ = new codegeneratorresponse_file();
  codegeneratorrequest::default_instance_->initasdefaultinstance();
  codegeneratorresponse::default_instance_->initasdefaultinstance();
  codegeneratorresponse_file::default_instance_->initasdefaultinstance();
  ::google::protobuf::internal::onshutdown(&protobuf_shutdownfile_google_2fprotobuf_2fcompiler_2fplugin_2eproto);
}

// force adddescriptors() to be called at static initialization time.
struct staticdescriptorinitializer_google_2fprotobuf_2fcompiler_2fplugin_2eproto {
  staticdescriptorinitializer_google_2fprotobuf_2fcompiler_2fplugin_2eproto() {
    protobuf_adddesc_google_2fprotobuf_2fcompiler_2fplugin_2eproto();
  }
} static_descriptor_initializer_google_2fprotobuf_2fcompiler_2fplugin_2eproto_;

// ===================================================================

#ifndef _msc_ver
const int codegeneratorrequest::kfiletogeneratefieldnumber;
const int codegeneratorrequest::kparameterfieldnumber;
const int codegeneratorrequest::kprotofilefieldnumber;
#endif  // !_msc_ver

codegeneratorrequest::codegeneratorrequest()
  : ::google::protobuf::message() {
  sharedctor();
}

void codegeneratorrequest::initasdefaultinstance() {
}

codegeneratorrequest::codegeneratorrequest(const codegeneratorrequest& from)
  : ::google::protobuf::message() {
  sharedctor();
  mergefrom(from);
}

void codegeneratorrequest::sharedctor() {
  _cached_size_ = 0;
  parameter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kemptystring);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

codegeneratorrequest::~codegeneratorrequest() {
  shareddtor();
}

void codegeneratorrequest::shareddtor() {
  if (parameter_ != &::google::protobuf::internal::kemptystring) {
    delete parameter_;
  }
  if (this != default_instance_) {
  }
}

void codegeneratorrequest::setcachedsize(int size) const {
  google_safe_concurrent_writes_begin();
  _cached_size_ = size;
  google_safe_concurrent_writes_end();
}
const ::google::protobuf::descriptor* codegeneratorrequest::descriptor() {
  protobuf_assigndescriptorsonce();
  return codegeneratorrequest_descriptor_;
}

const codegeneratorrequest& codegeneratorrequest::default_instance() {
  if (default_instance_ == null) protobuf_adddesc_google_2fprotobuf_2fcompiler_2fplugin_2eproto();
  return *default_instance_;
}

codegeneratorrequest* codegeneratorrequest::default_instance_ = null;

codegeneratorrequest* codegeneratorrequest::new() const {
  return new codegeneratorrequest;
}

void codegeneratorrequest::clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_parameter()) {
      if (parameter_ != &::google::protobuf::internal::kemptystring) {
        parameter_->clear();
      }
    }
  }
  file_to_generate_.clear();
  proto_file_.clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool codegeneratorrequest::mergepartialfromcodedstream(
    ::google::protobuf::io::codedinputstream* input) {
#define do_(expression) if (!(expression)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->readtag()) != 0) {
    switch (::google::protobuf::internal::wireformatlite::gettagfieldnumber(tag)) {
      // repeated string file_to_generate = 1;
      case 1: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_file_to_generate:
          do_(::google::protobuf::internal::wireformatlite::readstring(
                input, this->add_file_to_generate()));
          ::google::protobuf::internal::wireformat::verifyutf8string(
            this->file_to_generate(this->file_to_generate_size() - 1).data(),
            this->file_to_generate(this->file_to_generate_size() - 1).length(),
            ::google::protobuf::internal::wireformat::parse);
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(10)) goto parse_file_to_generate;
        if (input->expecttag(18)) goto parse_parameter;
        break;
      }

      // optional string parameter = 2;
      case 2: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_parameter:
          do_(::google::protobuf::internal::wireformatlite::readstring(
                input, this->mutable_parameter()));
          ::google::protobuf::internal::wireformat::verifyutf8string(
            this->parameter().data(), this->parameter().length(),
            ::google::protobuf::internal::wireformat::parse);
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(122)) goto parse_proto_file;
        break;
      }

      // repeated .google.protobuf.filedescriptorproto proto_file = 15;
      case 15: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_proto_file:
          do_(::google::protobuf::internal::wireformatlite::readmessagenovirtual(
                input, add_proto_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(122)) goto parse_proto_file;
        if (input->expectatend()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_end_group) {
          return true;
        }
        do_(::google::protobuf::internal::wireformat::skipfield(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef do_
}

void codegeneratorrequest::serializewithcachedsizes(
    ::google::protobuf::io::codedoutputstream* output) const {
  // repeated string file_to_generate = 1;
  for (int i = 0; i < this->file_to_generate_size(); i++) {
  ::google::protobuf::internal::wireformat::verifyutf8string(
    this->file_to_generate(i).data(), this->file_to_generate(i).length(),
    ::google::protobuf::internal::wireformat::serialize);
    ::google::protobuf::internal::wireformatlite::writestring(
      1, this->file_to_generate(i), output);
  }

  // optional string parameter = 2;
  if (has_parameter()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->parameter().data(), this->parameter().length(),
      ::google::protobuf::internal::wireformat::serialize);
    ::google::protobuf::internal::wireformatlite::writestring(
      2, this->parameter(), output);
  }

  // repeated .google.protobuf.filedescriptorproto proto_file = 15;
  for (int i = 0; i < this->proto_file_size(); i++) {
    ::google::protobuf::internal::wireformatlite::writemessagemaybetoarray(
      15, this->proto_file(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::wireformat::serializeunknownfields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* codegeneratorrequest::serializewithcachedsizestoarray(
    ::google::protobuf::uint8* target) const {
  // repeated string file_to_generate = 1;
  for (int i = 0; i < this->file_to_generate_size(); i++) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->file_to_generate(i).data(), this->file_to_generate(i).length(),
      ::google::protobuf::internal::wireformat::serialize);
    target = ::google::protobuf::internal::wireformatlite::
      writestringtoarray(1, this->file_to_generate(i), target);
  }

  // optional string parameter = 2;
  if (has_parameter()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->parameter().data(), this->parameter().length(),
      ::google::protobuf::internal::wireformat::serialize);
    target =
      ::google::protobuf::internal::wireformatlite::writestringtoarray(
        2, this->parameter(), target);
  }

  // repeated .google.protobuf.filedescriptorproto proto_file = 15;
  for (int i = 0; i < this->proto_file_size(); i++) {
    target = ::google::protobuf::internal::wireformatlite::
      writemessagenovirtualtoarray(
        15, this->proto_file(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::wireformat::serializeunknownfieldstoarray(
        unknown_fields(), target);
  }
  return target;
}

int codegeneratorrequest::bytesize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string parameter = 2;
    if (has_parameter()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::stringsize(
          this->parameter());
    }

  }
  // repeated string file_to_generate = 1;
  total_size += 1 * this->file_to_generate_size();
  for (int i = 0; i < this->file_to_generate_size(); i++) {
    total_size += ::google::protobuf::internal::wireformatlite::stringsize(
      this->file_to_generate(i));
  }

  // repeated .google.protobuf.filedescriptorproto proto_file = 15;
  total_size += 1 * this->proto_file_size();
  for (int i = 0; i < this->proto_file_size(); i++) {
    total_size +=
      ::google::protobuf::internal::wireformatlite::messagesizenovirtual(
        this->proto_file(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::wireformat::computeunknownfieldssize(
        unknown_fields());
  }
  google_safe_concurrent_writes_begin();
  _cached_size_ = total_size;
  google_safe_concurrent_writes_end();
  return total_size;
}

void codegeneratorrequest::mergefrom(const ::google::protobuf::message& from) {
  google_check_ne(&from, this);
  const codegeneratorrequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const codegeneratorrequest*>(
      &from);
  if (source == null) {
    ::google::protobuf::internal::reflectionops::merge(from, this);
  } else {
    mergefrom(*source);
  }
}

void codegeneratorrequest::mergefrom(const codegeneratorrequest& from) {
  google_check_ne(&from, this);
  file_to_generate_.mergefrom(from.file_to_generate_);
  proto_file_.mergefrom(from.proto_file_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_parameter()) {
      set_parameter(from.parameter());
    }
  }
  mutable_unknown_fields()->mergefrom(from.unknown_fields());
}

void codegeneratorrequest::copyfrom(const ::google::protobuf::message& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

void codegeneratorrequest::copyfrom(const codegeneratorrequest& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

bool codegeneratorrequest::isinitialized() const {

  for (int i = 0; i < proto_file_size(); i++) {
    if (!this->proto_file(i).isinitialized()) return false;
  }
  return true;
}

void codegeneratorrequest::swap(codegeneratorrequest* other) {
  if (other != this) {
    file_to_generate_.swap(&other->file_to_generate_);
    std::swap(parameter_, other->parameter_);
    proto_file_.swap(&other->proto_file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::metadata codegeneratorrequest::getmetadata() const {
  protobuf_assigndescriptorsonce();
  ::google::protobuf::metadata metadata;
  metadata.descriptor = codegeneratorrequest_descriptor_;
  metadata.reflection = codegeneratorrequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _msc_ver
const int codegeneratorresponse_file::knamefieldnumber;
const int codegeneratorresponse_file::kinsertionpointfieldnumber;
const int codegeneratorresponse_file::kcontentfieldnumber;
#endif  // !_msc_ver

codegeneratorresponse_file::codegeneratorresponse_file()
  : ::google::protobuf::message() {
  sharedctor();
}

void codegeneratorresponse_file::initasdefaultinstance() {
}

codegeneratorresponse_file::codegeneratorresponse_file(const codegeneratorresponse_file& from)
  : ::google::protobuf::message() {
  sharedctor();
  mergefrom(from);
}

void codegeneratorresponse_file::sharedctor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kemptystring);
  insertion_point_ = const_cast< ::std::string*>(&::google::protobuf::internal::kemptystring);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kemptystring);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

codegeneratorresponse_file::~codegeneratorresponse_file() {
  shareddtor();
}

void codegeneratorresponse_file::shareddtor() {
  if (name_ != &::google::protobuf::internal::kemptystring) {
    delete name_;
  }
  if (insertion_point_ != &::google::protobuf::internal::kemptystring) {
    delete insertion_point_;
  }
  if (content_ != &::google::protobuf::internal::kemptystring) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void codegeneratorresponse_file::setcachedsize(int size) const {
  google_safe_concurrent_writes_begin();
  _cached_size_ = size;
  google_safe_concurrent_writes_end();
}
const ::google::protobuf::descriptor* codegeneratorresponse_file::descriptor() {
  protobuf_assigndescriptorsonce();
  return codegeneratorresponse_file_descriptor_;
}

const codegeneratorresponse_file& codegeneratorresponse_file::default_instance() {
  if (default_instance_ == null) protobuf_adddesc_google_2fprotobuf_2fcompiler_2fplugin_2eproto();
  return *default_instance_;
}

codegeneratorresponse_file* codegeneratorresponse_file::default_instance_ = null;

codegeneratorresponse_file* codegeneratorresponse_file::new() const {
  return new codegeneratorresponse_file;
}

void codegeneratorresponse_file::clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kemptystring) {
        name_->clear();
      }
    }
    if (has_insertion_point()) {
      if (insertion_point_ != &::google::protobuf::internal::kemptystring) {
        insertion_point_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kemptystring) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool codegeneratorresponse_file::mergepartialfromcodedstream(
    ::google::protobuf::io::codedinputstream* input) {
#define do_(expression) if (!(expression)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->readtag()) != 0) {
    switch (::google::protobuf::internal::wireformatlite::gettagfieldnumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
          do_(::google::protobuf::internal::wireformatlite::readstring(
                input, this->mutable_name()));
          ::google::protobuf::internal::wireformat::verifyutf8string(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::wireformat::parse);
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(18)) goto parse_insertion_point;
        break;
      }

      // optional string insertion_point = 2;
      case 2: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_insertion_point:
          do_(::google::protobuf::internal::wireformatlite::readstring(
                input, this->mutable_insertion_point()));
          ::google::protobuf::internal::wireformat::verifyutf8string(
            this->insertion_point().data(), this->insertion_point().length(),
            ::google::protobuf::internal::wireformat::parse);
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(122)) goto parse_content;
        break;
      }

      // optional string content = 15;
      case 15: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_content:
          do_(::google::protobuf::internal::wireformatlite::readstring(
                input, this->mutable_content()));
          ::google::protobuf::internal::wireformat::verifyutf8string(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::wireformat::parse);
        } else {
          goto handle_uninterpreted;
        }
        if (input->expectatend()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_end_group) {
          return true;
        }
        do_(::google::protobuf::internal::wireformat::skipfield(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef do_
}

void codegeneratorresponse_file::serializewithcachedsizes(
    ::google::protobuf::io::codedoutputstream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::wireformat::serialize);
    ::google::protobuf::internal::wireformatlite::writestring(
      1, this->name(), output);
  }

  // optional string insertion_point = 2;
  if (has_insertion_point()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->insertion_point().data(), this->insertion_point().length(),
      ::google::protobuf::internal::wireformat::serialize);
    ::google::protobuf::internal::wireformatlite::writestring(
      2, this->insertion_point(), output);
  }

  // optional string content = 15;
  if (has_content()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::wireformat::serialize);
    ::google::protobuf::internal::wireformatlite::writestring(
      15, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::wireformat::serializeunknownfields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* codegeneratorresponse_file::serializewithcachedsizestoarray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::wireformat::serialize);
    target =
      ::google::protobuf::internal::wireformatlite::writestringtoarray(
        1, this->name(), target);
  }

  // optional string insertion_point = 2;
  if (has_insertion_point()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->insertion_point().data(), this->insertion_point().length(),
      ::google::protobuf::internal::wireformat::serialize);
    target =
      ::google::protobuf::internal::wireformatlite::writestringtoarray(
        2, this->insertion_point(), target);
  }

  // optional string content = 15;
  if (has_content()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::wireformat::serialize);
    target =
      ::google::protobuf::internal::wireformatlite::writestringtoarray(
        15, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::wireformat::serializeunknownfieldstoarray(
        unknown_fields(), target);
  }
  return target;
}

int codegeneratorresponse_file::bytesize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::stringsize(
          this->name());
    }

    // optional string insertion_point = 2;
    if (has_insertion_point()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::stringsize(
          this->insertion_point());
    }

    // optional string content = 15;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::stringsize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::wireformat::computeunknownfieldssize(
        unknown_fields());
  }
  google_safe_concurrent_writes_begin();
  _cached_size_ = total_size;
  google_safe_concurrent_writes_end();
  return total_size;
}

void codegeneratorresponse_file::mergefrom(const ::google::protobuf::message& from) {
  google_check_ne(&from, this);
  const codegeneratorresponse_file* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const codegeneratorresponse_file*>(
      &from);
  if (source == null) {
    ::google::protobuf::internal::reflectionops::merge(from, this);
  } else {
    mergefrom(*source);
  }
}

void codegeneratorresponse_file::mergefrom(const codegeneratorresponse_file& from) {
  google_check_ne(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_insertion_point()) {
      set_insertion_point(from.insertion_point());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->mergefrom(from.unknown_fields());
}

void codegeneratorresponse_file::copyfrom(const ::google::protobuf::message& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

void codegeneratorresponse_file::copyfrom(const codegeneratorresponse_file& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

bool codegeneratorresponse_file::isinitialized() const {

  return true;
}

void codegeneratorresponse_file::swap(codegeneratorresponse_file* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(insertion_point_, other->insertion_point_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::metadata codegeneratorresponse_file::getmetadata() const {
  protobuf_assigndescriptorsonce();
  ::google::protobuf::metadata metadata;
  metadata.descriptor = codegeneratorresponse_file_descriptor_;
  metadata.reflection = codegeneratorresponse_file_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _msc_ver
const int codegeneratorresponse::kerrorfieldnumber;
const int codegeneratorresponse::kfilefieldnumber;
#endif  // !_msc_ver

codegeneratorresponse::codegeneratorresponse()
  : ::google::protobuf::message() {
  sharedctor();
}

void codegeneratorresponse::initasdefaultinstance() {
}

codegeneratorresponse::codegeneratorresponse(const codegeneratorresponse& from)
  : ::google::protobuf::message() {
  sharedctor();
  mergefrom(from);
}

void codegeneratorresponse::sharedctor() {
  _cached_size_ = 0;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kemptystring);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

codegeneratorresponse::~codegeneratorresponse() {
  shareddtor();
}

void codegeneratorresponse::shareddtor() {
  if (error_ != &::google::protobuf::internal::kemptystring) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void codegeneratorresponse::setcachedsize(int size) const {
  google_safe_concurrent_writes_begin();
  _cached_size_ = size;
  google_safe_concurrent_writes_end();
}
const ::google::protobuf::descriptor* codegeneratorresponse::descriptor() {
  protobuf_assigndescriptorsonce();
  return codegeneratorresponse_descriptor_;
}

const codegeneratorresponse& codegeneratorresponse::default_instance() {
  if (default_instance_ == null) protobuf_adddesc_google_2fprotobuf_2fcompiler_2fplugin_2eproto();
  return *default_instance_;
}

codegeneratorresponse* codegeneratorresponse::default_instance_ = null;

codegeneratorresponse* codegeneratorresponse::new() const {
  return new codegeneratorresponse;
}

void codegeneratorresponse::clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::kemptystring) {
        error_->clear();
      }
    }
  }
  file_.clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool codegeneratorresponse::mergepartialfromcodedstream(
    ::google::protobuf::io::codedinputstream* input) {
#define do_(expression) if (!(expression)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->readtag()) != 0) {
    switch (::google::protobuf::internal::wireformatlite::gettagfieldnumber(tag)) {
      // optional string error = 1;
      case 1: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
          do_(::google::protobuf::internal::wireformatlite::readstring(
                input, this->mutable_error()));
          ::google::protobuf::internal::wireformat::verifyutf8string(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::wireformat::parse);
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(122)) goto parse_file;
        break;
      }

      // repeated .google.protobuf.compiler.codegeneratorresponse.file file = 15;
      case 15: {
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_length_delimited) {
         parse_file:
          do_(::google::protobuf::internal::wireformatlite::readmessagenovirtual(
                input, add_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->expecttag(122)) goto parse_file;
        if (input->expectatend()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::wireformatlite::gettagwiretype(tag) ==
            ::google::protobuf::internal::wireformatlite::wiretype_end_group) {
          return true;
        }
        do_(::google::protobuf::internal::wireformat::skipfield(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef do_
}

void codegeneratorresponse::serializewithcachedsizes(
    ::google::protobuf::io::codedoutputstream* output) const {
  // optional string error = 1;
  if (has_error()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::wireformat::serialize);
    ::google::protobuf::internal::wireformatlite::writestring(
      1, this->error(), output);
  }

  // repeated .google.protobuf.compiler.codegeneratorresponse.file file = 15;
  for (int i = 0; i < this->file_size(); i++) {
    ::google::protobuf::internal::wireformatlite::writemessagemaybetoarray(
      15, this->file(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::wireformat::serializeunknownfields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* codegeneratorresponse::serializewithcachedsizestoarray(
    ::google::protobuf::uint8* target) const {
  // optional string error = 1;
  if (has_error()) {
    ::google::protobuf::internal::wireformat::verifyutf8string(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::wireformat::serialize);
    target =
      ::google::protobuf::internal::wireformatlite::writestringtoarray(
        1, this->error(), target);
  }

  // repeated .google.protobuf.compiler.codegeneratorresponse.file file = 15;
  for (int i = 0; i < this->file_size(); i++) {
    target = ::google::protobuf::internal::wireformatlite::
      writemessagenovirtualtoarray(
        15, this->file(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::wireformat::serializeunknownfieldstoarray(
        unknown_fields(), target);
  }
  return target;
}

int codegeneratorresponse::bytesize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::wireformatlite::stringsize(
          this->error());
    }

  }
  // repeated .google.protobuf.compiler.codegeneratorresponse.file file = 15;
  total_size += 1 * this->file_size();
  for (int i = 0; i < this->file_size(); i++) {
    total_size +=
      ::google::protobuf::internal::wireformatlite::messagesizenovirtual(
        this->file(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::wireformat::computeunknownfieldssize(
        unknown_fields());
  }
  google_safe_concurrent_writes_begin();
  _cached_size_ = total_size;
  google_safe_concurrent_writes_end();
  return total_size;
}

void codegeneratorresponse::mergefrom(const ::google::protobuf::message& from) {
  google_check_ne(&from, this);
  const codegeneratorresponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const codegeneratorresponse*>(
      &from);
  if (source == null) {
    ::google::protobuf::internal::reflectionops::merge(from, this);
  } else {
    mergefrom(*source);
  }
}

void codegeneratorresponse::mergefrom(const codegeneratorresponse& from) {
  google_check_ne(&from, this);
  file_.mergefrom(from.file_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->mergefrom(from.unknown_fields());
}

void codegeneratorresponse::copyfrom(const ::google::protobuf::message& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

void codegeneratorresponse::copyfrom(const codegeneratorresponse& from) {
  if (&from == this) return;
  clear();
  mergefrom(from);
}

bool codegeneratorresponse::isinitialized() const {

  return true;
}

void codegeneratorresponse::swap(codegeneratorresponse* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    file_.swap(&other->file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::metadata codegeneratorresponse::getmetadata() const {
  protobuf_assigndescriptorsonce();
  ::google::protobuf::metadata metadata;
  metadata.descriptor = codegeneratorresponse_descriptor_;
  metadata.reflection = codegeneratorresponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace compiler
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
