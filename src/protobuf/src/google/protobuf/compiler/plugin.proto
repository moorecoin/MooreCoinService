// protocol buffers - google's data interchange format
// copyright 2008 google inc.  all rights reserved.
// http://code.google.com/p/protobuf/
//
// redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * neither the name of google inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// this software is provided by the copyright holders and contributors
// "as is" and any express or implied warranties, including, but not
// limited to, the implied warranties of merchantability and fitness for
// a particular purpose are disclaimed. in no event shall the copyright
// owner or contributors be liable for any direct, indirect, incidental,
// special, exemplary, or consequential damages (including, but not
// limited to, procurement of substitute goods or services; loss of use,
// data, or profits; or business interruption) however caused and on any
// theory of liability, whether in contract, strict liability, or tort
// (including negligence or otherwise) arising in any way out of the use
// of this software, even if advised of the possibility of such damage.

// author: kenton@google.com (kenton varda)
//
// warning:  the plugin interface is currently experimental and is subject to
//   change.
//
// protoc (aka the protocol compiler) can be extended via plugins.  a plugin is
// just a program that reads a codegeneratorrequest from stdin and writes a
// codegeneratorresponse to stdout.
//
// plugins written using c++ can use google/protobuf/compiler/plugin.h instead
// of dealing with the raw protocol defined here.
//
// a plugin executable needs only to be placed somewhere in the path.  the
// plugin should be named "protoc-gen-$name", and will then be used when the
// flag "--${name}_out" is passed to protoc.

package google.protobuf.compiler;
option java_package = "com.google.protobuf.compiler";
option java_outer_classname = "pluginprotos";

import "google/protobuf/descriptor.proto";

// an encoded codegeneratorrequest is written to the plugin's stdin.
message codegeneratorrequest {
  // the .proto files that were explicitly listed on the command-line.  the
  // code generator should generate code only for these files.  each file's
  // descriptor will be included in proto_file, below.
  repeated string file_to_generate = 1;

  // the generator parameter passed on the command-line.
  optional string parameter = 2;

  // filedescriptorprotos for all files in files_to_generate and everything
  // they import.  the files will appear in topological order, so each file
  // appears before any file that imports it.
  //
  // protoc guarantees that all proto_files will be written after
  // the fields above, even though this is not technically guaranteed by the
  // protobuf wire format.  this theoretically could allow a plugin to stream
  // in the filedescriptorprotos and handle them one by one rather than read
  // the entire set into memory at once.  however, as of this writing, this
  // is not similarly optimized on protoc's end -- it will store all fields in
  // memory at once before sending them to the plugin.
  repeated filedescriptorproto proto_file = 15;
}

// the plugin writes an encoded codegeneratorresponse to stdout.
message codegeneratorresponse {
  // error message.  if non-empty, code generation failed.  the plugin process
  // should exit with status code zero even if it reports an error in this way.
  //
  // this should be used to indicate errors in .proto files which prevent the
  // code generator from generating correct code.  errors which indicate a
  // problem in protoc itself -- such as the input codegeneratorrequest being
  // unparseable -- should be reported by writing a message to stderr and
  // exiting with a non-zero status code.
  optional string error = 1;

  // represents a single generated file.
  message file {
    // the file name, relative to the output directory.  the name must not
    // contain "." or ".." components and must be relative, not be absolute (so,
    // the file cannot lie outside the output directory).  "/" must be used as
    // the path separator, not "\".
    //
    // if the name is omitted, the content will be appended to the previous
    // file.  this allows the generator to break large files into small chunks,
    // and allows the generated text to be streamed back to protoc so that large
    // files need not reside completely in memory at one time.  note that as of
    // this writing protoc does not optimize for this -- it will read the entire
    // codegeneratorresponse before writing files to disk.
    optional string name = 1;

    // if non-empty, indicates that the named file should already exist, and the
    // content here is to be inserted into that file at a defined insertion
    // point.  this feature allows a code generator to extend the output
    // produced by another code generator.  the original generator may provide
    // insertion points by placing special annotations in the file that look
    // like:
    //   @@protoc_insertion_point(name)
    // the annotation can have arbitrary text before and after it on the line,
    // which allows it to be placed in a comment.  name should be replaced with
    // an identifier naming the point -- this is what other generators will use
    // as the insertion_point.  code inserted at this point will be placed
    // immediately above the line containing the insertion point (thus multiple
    // insertions to the same point will come out in the order they were added).
    // the double-@ is intended to make it unlikely that the generated code
    // could contain things that look like insertion points by accident.
    //
    // for example, the c++ code generator places the following line in the
    // .pb.h files that it generates:
    //   // @@protoc_insertion_point(namespace_scope)
    // this line appears within the scope of the file's package namespace, but
    // outside of any particular class.  another plugin can then specify the
    // insertion_point "namespace_scope" to generate additional classes or
    // other declarations that should be placed in this scope.
    //
    // note that if the line containing the insertion point begins with
    // whitespace, the same whitespace will be added to every line of the
    // inserted text.  this is useful for languages like python, where
    // indentation matters.  in these languages, the insertion point comment
    // should be indented the same amount as any inserted code will need to be
    // in order to work correctly in that context.
    //
    // the code generator that generates the initial file and the one which
    // inserts into it must both run as part of a single invocation of protoc.
    // code generators are executed in the order in which they appear on the
    // command line.
    //
    // if |insertion_point| is present, |name| must also be present.
    optional string insertion_point = 2;

    // the file contents.
    optional string content = 15;
  }
  repeated file file = 15;
}
