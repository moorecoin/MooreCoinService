// protocol buffers - google's data interchange format
// copyright 2008 google inc.  all rights reserved.
// http://code.google.com/p/protobuf/
//
// redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * neither the name of google inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// this software is provided by the copyright holders and contributors
// "as is" and any express or implied warranties, including, but not
// limited to, the implied warranties of merchantability and fitness for
// a particular purpose are disclaimed. in no event shall the copyright
// owner or contributors be liable for any direct, indirect, incidental,
// special, exemplary, or consequential damages (including, but not
// limited to, procurement of substitute goods or services; loss of use,
// data, or profits; or business interruption) however caused and on any
// theory of liability, whether in contract, strict liability, or tort
// (including negligence or otherwise) arising in any way out of the use
// of this software, even if advised of the possibility of such damage.

// author: kenton@google.com (kenton varda)
//  based on original protocol buffers design by
//  sanjay ghemawat, jeff dean, and others.
//
// a proto file we will use for unit testing.


// some generic_services option(s) added automatically.
// see:  http://go/proto2-generic-services-default
option cc_generic_services = true;     // auto-added
option java_generic_services = true;   // auto-added
option py_generic_services = true;     // auto-added

import "google/protobuf/unittest_import.proto";

// we don't put this in a package within proto2 because we need to make sure
// that the generated code doesn't depend on being in the proto2 namespace.
// in test_util.h we do "using namespace unittest = protobuf_unittest".
package protobuf_unittest;

// protos optimized for speed use a strict superset of the generated code
// of equivalent ones optimized for code_size, so we should optimize all our
// tests for speed unless explicitly testing code size optimization.
option optimize_for = speed;

option java_outer_classname = "unittestproto";

// this proto includes every type of field in both singular and repeated
// forms.
message testalltypes {
  message nestedmessage {
    // the field name "b" fails to compile in proto1 because it conflicts with
    // a local variable named "b" in one of the generated methods.  doh.
    // this file needs to compile in proto1 to test backwards-compatibility.
    optional int32 bb = 1;
  }

  enum nestedenum {
    foo = 1;
    bar = 2;
    baz = 3;
  }

  // singular
  optional    int32 optional_int32    =  1;
  optional    int64 optional_int64    =  2;
  optional   uint32 optional_uint32   =  3;
  optional   uint64 optional_uint64   =  4;
  optional   sint32 optional_sint32   =  5;
  optional   sint64 optional_sint64   =  6;
  optional  fixed32 optional_fixed32  =  7;
  optional  fixed64 optional_fixed64  =  8;
  optional sfixed32 optional_sfixed32 =  9;
  optional sfixed64 optional_sfixed64 = 10;
  optional    float optional_float    = 11;
  optional   double optional_double   = 12;
  optional     bool optional_bool     = 13;
  optional   string optional_string   = 14;
  optional    bytes optional_bytes    = 15;

  optional group optionalgroup = 16 {
    optional int32 a = 17;
  }

  optional nestedmessage                        optional_nested_message  = 18;
  optional foreignmessage                       optional_foreign_message = 19;
  optional protobuf_unittest_import.importmessage optional_import_message  = 20;

  optional nestedenum                           optional_nested_enum     = 21;
  optional foreignenum                          optional_foreign_enum    = 22;
  optional protobuf_unittest_import.importenum    optional_import_enum     = 23;

  optional string optional_string_piece = 24 [ctype=string_piece];
  optional string optional_cord = 25 [ctype=cord];

  // defined in unittest_import_public.proto
  optional protobuf_unittest_import.publicimportmessage
      optional_public_import_message = 26;

  optional nestedmessage optional_lazy_message = 27 [lazy=true];

  // repeated
  repeated    int32 repeated_int32    = 31;
  repeated    int64 repeated_int64    = 32;
  repeated   uint32 repeated_uint32   = 33;
  repeated   uint64 repeated_uint64   = 34;
  repeated   sint32 repeated_sint32   = 35;
  repeated   sint64 repeated_sint64   = 36;
  repeated  fixed32 repeated_fixed32  = 37;
  repeated  fixed64 repeated_fixed64  = 38;
  repeated sfixed32 repeated_sfixed32 = 39;
  repeated sfixed64 repeated_sfixed64 = 40;
  repeated    float repeated_float    = 41;
  repeated   double repeated_double   = 42;
  repeated     bool repeated_bool     = 43;
  repeated   string repeated_string   = 44;
  repeated    bytes repeated_bytes    = 45;

  repeated group repeatedgroup = 46 {
    optional int32 a = 47;
  }

  repeated nestedmessage                        repeated_nested_message  = 48;
  repeated foreignmessage                       repeated_foreign_message = 49;
  repeated protobuf_unittest_import.importmessage repeated_import_message  = 50;

  repeated nestedenum                           repeated_nested_enum     = 51;
  repeated foreignenum                          repeated_foreign_enum    = 52;
  repeated protobuf_unittest_import.importenum    repeated_import_enum     = 53;

  repeated string repeated_string_piece = 54 [ctype=string_piece];
  repeated string repeated_cord = 55 [ctype=cord];

  repeated nestedmessage repeated_lazy_message = 57 [lazy=true];

  // singular with defaults
  optional    int32 default_int32    = 61 [default =  41    ];
  optional    int64 default_int64    = 62 [default =  42    ];
  optional   uint32 default_uint32   = 63 [default =  43    ];
  optional   uint64 default_uint64   = 64 [default =  44    ];
  optional   sint32 default_sint32   = 65 [default = -45    ];
  optional   sint64 default_sint64   = 66 [default =  46    ];
  optional  fixed32 default_fixed32  = 67 [default =  47    ];
  optional  fixed64 default_fixed64  = 68 [default =  48    ];
  optional sfixed32 default_sfixed32 = 69 [default =  49    ];
  optional sfixed64 default_sfixed64 = 70 [default = -50    ];
  optional    float default_float    = 71 [default =  51.5  ];
  optional   double default_double   = 72 [default =  52e3  ];
  optional     bool default_bool     = 73 [default = true   ];
  optional   string default_string   = 74 [default = "hello"];
  optional    bytes default_bytes    = 75 [default = "world"];

  optional nestedenum  default_nested_enum  = 81 [default = bar        ];
  optional foreignenum default_foreign_enum = 82 [default = foreign_bar];
  optional protobuf_unittest_import.importenum
      default_import_enum = 83 [default = import_bar];

  optional string default_string_piece = 84 [ctype=string_piece,default="abc"];
  optional string default_cord = 85 [ctype=cord,default="123"];
}

message testdeprecatedfields {
  optional int32 deprecated_int32 = 1 [deprecated=true];
}

// define these after testalltypes to make sure the compiler can handle
// that.
message foreignmessage {
  optional int32 c = 1;
}

enum foreignenum {
  foreign_foo = 4;
  foreign_bar = 5;
  foreign_baz = 6;
}

message testallextensions {
  extensions 1 to max;
}

extend testallextensions {
  // singular
  optional    int32 optional_int32_extension    =  1;
  optional    int64 optional_int64_extension    =  2;
  optional   uint32 optional_uint32_extension   =  3;
  optional   uint64 optional_uint64_extension   =  4;
  optional   sint32 optional_sint32_extension   =  5;
  optional   sint64 optional_sint64_extension   =  6;
  optional  fixed32 optional_fixed32_extension  =  7;
  optional  fixed64 optional_fixed64_extension  =  8;
  optional sfixed32 optional_sfixed32_extension =  9;
  optional sfixed64 optional_sfixed64_extension = 10;
  optional    float optional_float_extension    = 11;
  optional   double optional_double_extension   = 12;
  optional     bool optional_bool_extension     = 13;
  optional   string optional_string_extension   = 14;
  optional    bytes optional_bytes_extension    = 15;

  optional group optionalgroup_extension = 16 {
    optional int32 a = 17;
  }

  optional testalltypes.nestedmessage optional_nested_message_extension = 18;
  optional foreignmessage optional_foreign_message_extension = 19;
  optional protobuf_unittest_import.importmessage
    optional_import_message_extension = 20;

  optional testalltypes.nestedenum optional_nested_enum_extension = 21;
  optional foreignenum optional_foreign_enum_extension = 22;
  optional protobuf_unittest_import.importenum
    optional_import_enum_extension = 23;

  optional string optional_string_piece_extension = 24 [ctype=string_piece];
  optional string optional_cord_extension = 25 [ctype=cord];

  optional protobuf_unittest_import.publicimportmessage
    optional_public_import_message_extension = 26;

  optional testalltypes.nestedmessage
    optional_lazy_message_extension = 27 [lazy=true];

  // repeated
  repeated    int32 repeated_int32_extension    = 31;
  repeated    int64 repeated_int64_extension    = 32;
  repeated   uint32 repeated_uint32_extension   = 33;
  repeated   uint64 repeated_uint64_extension   = 34;
  repeated   sint32 repeated_sint32_extension   = 35;
  repeated   sint64 repeated_sint64_extension   = 36;
  repeated  fixed32 repeated_fixed32_extension  = 37;
  repeated  fixed64 repeated_fixed64_extension  = 38;
  repeated sfixed32 repeated_sfixed32_extension = 39;
  repeated sfixed64 repeated_sfixed64_extension = 40;
  repeated    float repeated_float_extension    = 41;
  repeated   double repeated_double_extension   = 42;
  repeated     bool repeated_bool_extension     = 43;
  repeated   string repeated_string_extension   = 44;
  repeated    bytes repeated_bytes_extension    = 45;

  repeated group repeatedgroup_extension = 46 {
    optional int32 a = 47;
  }

  repeated testalltypes.nestedmessage repeated_nested_message_extension = 48;
  repeated foreignmessage repeated_foreign_message_extension = 49;
  repeated protobuf_unittest_import.importmessage
    repeated_import_message_extension = 50;

  repeated testalltypes.nestedenum repeated_nested_enum_extension = 51;
  repeated foreignenum repeated_foreign_enum_extension = 52;
  repeated protobuf_unittest_import.importenum
    repeated_import_enum_extension = 53;

  repeated string repeated_string_piece_extension = 54 [ctype=string_piece];
  repeated string repeated_cord_extension = 55 [ctype=cord];

  repeated testalltypes.nestedmessage
    repeated_lazy_message_extension = 57 [lazy=true];

  // singular with defaults
  optional    int32 default_int32_extension    = 61 [default =  41    ];
  optional    int64 default_int64_extension    = 62 [default =  42    ];
  optional   uint32 default_uint32_extension   = 63 [default =  43    ];
  optional   uint64 default_uint64_extension   = 64 [default =  44    ];
  optional   sint32 default_sint32_extension   = 65 [default = -45    ];
  optional   sint64 default_sint64_extension   = 66 [default =  46    ];
  optional  fixed32 default_fixed32_extension  = 67 [default =  47    ];
  optional  fixed64 default_fixed64_extension  = 68 [default =  48    ];
  optional sfixed32 default_sfixed32_extension = 69 [default =  49    ];
  optional sfixed64 default_sfixed64_extension = 70 [default = -50    ];
  optional    float default_float_extension    = 71 [default =  51.5  ];
  optional   double default_double_extension   = 72 [default =  52e3  ];
  optional     bool default_bool_extension     = 73 [default = true   ];
  optional   string default_string_extension   = 74 [default = "hello"];
  optional    bytes default_bytes_extension    = 75 [default = "world"];

  optional testalltypes.nestedenum
    default_nested_enum_extension = 81 [default = bar];
  optional foreignenum
    default_foreign_enum_extension = 82 [default = foreign_bar];
  optional protobuf_unittest_import.importenum
    default_import_enum_extension = 83 [default = import_bar];

  optional string default_string_piece_extension = 84 [ctype=string_piece,
                                                       default="abc"];
  optional string default_cord_extension = 85 [ctype=cord, default="123"];
}

message testnestedextension {
  extend testallextensions {
    // check for bug where string extensions declared in tested scope did not
    // compile.
    optional string test = 1002 [default="test"];
  }
}

// we have separate messages for testing required fields because it's
// annoying to have to fill in required fields in testproto in order to
// do anything with it.  note that we don't need to test every type of
// required filed because the code output is basically identical to
// optional fields for all types.
message testrequired {
  required int32 a = 1;
  optional int32 dummy2 = 2;
  required int32 b = 3;

  extend testallextensions {
    optional testrequired single = 1000;
    repeated testrequired multi  = 1001;
  }

  // pad the field count to 32 so that we can test that isinitialized()
  // properly checks multiple elements of has_bits_.
  optional int32 dummy4  =  4;
  optional int32 dummy5  =  5;
  optional int32 dummy6  =  6;
  optional int32 dummy7  =  7;
  optional int32 dummy8  =  8;
  optional int32 dummy9  =  9;
  optional int32 dummy10 = 10;
  optional int32 dummy11 = 11;
  optional int32 dummy12 = 12;
  optional int32 dummy13 = 13;
  optional int32 dummy14 = 14;
  optional int32 dummy15 = 15;
  optional int32 dummy16 = 16;
  optional int32 dummy17 = 17;
  optional int32 dummy18 = 18;
  optional int32 dummy19 = 19;
  optional int32 dummy20 = 20;
  optional int32 dummy21 = 21;
  optional int32 dummy22 = 22;
  optional int32 dummy23 = 23;
  optional int32 dummy24 = 24;
  optional int32 dummy25 = 25;
  optional int32 dummy26 = 26;
  optional int32 dummy27 = 27;
  optional int32 dummy28 = 28;
  optional int32 dummy29 = 29;
  optional int32 dummy30 = 30;
  optional int32 dummy31 = 31;
  optional int32 dummy32 = 32;

  required int32 c = 33;
}

message testrequiredforeign {
  optional testrequired optional_message = 1;
  repeated testrequired repeated_message = 2;
  optional int32 dummy = 3;
}

// test that we can use nestedmessage from outside testalltypes.
message testforeignnested {
  optional testalltypes.nestedmessage foreign_nested = 1;
}

// testemptymessage is used to test unknown field support.
message testemptymessage {
}

// like above, but declare all field numbers as potential extensions.  no
// actual extensions should ever be defined for this type.
message testemptymessagewithextensions {
  extensions 1 to max;
}

message testmultipleextensionranges {
  extensions 42;
  extensions 4143 to 4243;
  extensions 65536 to max;
}

// test that really large tag numbers don't break anything.
message testreallylargetagnumber {
  // the largest possible tag number is 2^28 - 1, since the wire format uses
  // three bits to communicate wire type.
  optional int32 a = 1;
  optional int32 bb = 268435455;
}

message testrecursivemessage {
  optional testrecursivemessage a = 1;
  optional int32 i = 2;
}

// test that mutual recursion works.
message testmutualrecursiona {
  optional testmutualrecursionb bb = 1;
}

message testmutualrecursionb {
  optional testmutualrecursiona a = 1;
  optional int32 optional_int32 = 2;
}

// test that groups have disjoint field numbers from their siblings and
// parents.  this is not possible in proto1; only proto2.  when attempting
// to compile with proto1, this will emit an error; so we only include it
// in protobuf_unittest_proto.
message testdupfieldnumber {                        // no_proto1
  optional int32 a = 1;                             // no_proto1
  optional group foo = 2 { optional int32 a = 1; }  // no_proto1
  optional group bar = 3 { optional int32 a = 1; }  // no_proto1
}                                                   // no_proto1

// additional messages for testing lazy fields.
message testeagermessage {
  optional testalltypes sub_message = 1 [lazy=false];
}
message testlazymessage {
  optional testalltypes sub_message = 1 [lazy=true];
}

// needed for a python test.
message testnestedmessagehasbits {
  message nestedmessage {
    repeated int32 nestedmessage_repeated_int32 = 1;
    repeated foreignmessage nestedmessage_repeated_foreignmessage = 2;
  }
  optional nestedmessage optional_nested_message = 1;
}


// test an enum that has multiple values with the same number.
enum testenumwithdupvalue {
  option allow_alias = true;
  foo1 = 1;
  bar1 = 2;
  baz = 3;
  foo2 = 1;
  bar2 = 2;
}

// test an enum with large, unordered values.
enum testsparseenum {
  sparse_a = 123;
  sparse_b = 62374;
  sparse_c = 12589234;
  sparse_d = -15;
  sparse_e = -53452;
  sparse_f = 0;
  sparse_g = 2;
}

// test message with camelcase field names.  this violates protocol buffer
// standard style.
message testcamelcasefieldnames {
  optional int32 primitivefield = 1;
  optional string stringfield = 2;
  optional foreignenum enumfield = 3;
  optional foreignmessage messagefield = 4;
  optional string stringpiecefield = 5 [ctype=string_piece];
  optional string cordfield = 6 [ctype=cord];

  repeated int32 repeatedprimitivefield = 7;
  repeated string repeatedstringfield = 8;
  repeated foreignenum repeatedenumfield = 9;
  repeated foreignmessage repeatedmessagefield = 10;
  repeated string repeatedstringpiecefield = 11 [ctype=string_piece];
  repeated string repeatedcordfield = 12 [ctype=cord];
}


// we list fields out of order, to ensure that we're using field number and not
// field index to determine serialization order.
message testfieldorderings {
  optional string my_string = 11;
  extensions 2 to 10;
  optional int64 my_int = 1;
  extensions 12 to 100;
  optional float my_float = 101;
}


extend testfieldorderings {
  optional string my_extension_string = 50;
  optional int32 my_extension_int = 5;
}


message testextremedefaultvalues {
  optional bytes escaped_bytes = 1 [default = "\0\001\a\b\f\n\r\t\v\\\'\"\xfe"];
  optional uint32 large_uint32 = 2 [default = 0xffffffff];
  optional uint64 large_uint64 = 3 [default = 0xffffffffffffffff];
  optional  int32 small_int32  = 4 [default = -0x7fffffff];
  optional  int64 small_int64  = 5 [default = -0x7fffffffffffffff];
  optional  int32 really_small_int32 = 21 [default = -0x80000000];
  optional  int64 really_small_int64 = 22 [default = -0x8000000000000000];

  // the default value here is utf-8 for "\u1234".  (we could also just type
  // the utf-8 text directly into this text file rather than escape it, but
  // lots of people use editors that would be confused by this.)
  optional string utf8_string = 6 [default = "\341\210\264"];

  // tests for single-precision floating-point values.
  optional float zero_float = 7 [default = 0];
  optional float one_float = 8 [default = 1];
  optional float small_float = 9 [default = 1.5];
  optional float negative_one_float = 10 [default = -1];
  optional float negative_float = 11 [default = -1.5];
  // using exponents
  optional float large_float = 12 [default = 2e8];
  optional float small_negative_float = 13 [default = -8e-28];

  // text for nonfinite floating-point values.
  optional double inf_double = 14 [default = inf];
  optional double neg_inf_double = 15 [default = -inf];
  optional double nan_double = 16 [default = nan];
  optional float inf_float = 17 [default = inf];
  optional float neg_inf_float = 18 [default = -inf];
  optional float nan_float = 19 [default = nan];

  // tests for c++ trigraphs.
  // trigraphs should be escaped in c++ generated files, but they should not be
  // escaped for other languages.
  // note that in .proto file, "\?" is a valid way to escape ? in string
  // literals.
  optional string cpp_trigraph = 20 [default = "? \? ?? \?? \??? ??/ ?\?-"];

  // string defaults containing the character '\000'
  optional string string_with_zero       = 23 [default = "hel\000lo"];
  optional  bytes bytes_with_zero        = 24 [default = "wor\000ld"];
  optional string string_piece_with_zero = 25 [ctype=string_piece,
                                               default="ab\000c"];
  optional string cord_with_zero         = 26 [ctype=cord,
                                               default="12\0003"];
}

message sparseenummessage {
  optional testsparseenum sparse_enum = 1;
}

// test string and bytes: string is for valid utf-8 strings
message onestring {
  optional string data = 1;
}

message morestring {
  repeated string data = 1;
}

message onebytes {
  optional bytes data = 1;
}

message morebytes {
  repeated bytes data = 1;
}


// test messages for packed fields

message testpackedtypes {
  repeated    int32 packed_int32    =  90 [packed = true];
  repeated    int64 packed_int64    =  91 [packed = true];
  repeated   uint32 packed_uint32   =  92 [packed = true];
  repeated   uint64 packed_uint64   =  93 [packed = true];
  repeated   sint32 packed_sint32   =  94 [packed = true];
  repeated   sint64 packed_sint64   =  95 [packed = true];
  repeated  fixed32 packed_fixed32  =  96 [packed = true];
  repeated  fixed64 packed_fixed64  =  97 [packed = true];
  repeated sfixed32 packed_sfixed32 =  98 [packed = true];
  repeated sfixed64 packed_sfixed64 =  99 [packed = true];
  repeated    float packed_float    = 100 [packed = true];
  repeated   double packed_double   = 101 [packed = true];
  repeated     bool packed_bool     = 102 [packed = true];
  repeated foreignenum packed_enum  = 103 [packed = true];
}

// a message with the same fields as testpackedtypes, but without packing. used
// to test packed <-> unpacked wire compatibility.
message testunpackedtypes {
  repeated    int32 unpacked_int32    =  90 [packed = false];
  repeated    int64 unpacked_int64    =  91 [packed = false];
  repeated   uint32 unpacked_uint32   =  92 [packed = false];
  repeated   uint64 unpacked_uint64   =  93 [packed = false];
  repeated   sint32 unpacked_sint32   =  94 [packed = false];
  repeated   sint64 unpacked_sint64   =  95 [packed = false];
  repeated  fixed32 unpacked_fixed32  =  96 [packed = false];
  repeated  fixed64 unpacked_fixed64  =  97 [packed = false];
  repeated sfixed32 unpacked_sfixed32 =  98 [packed = false];
  repeated sfixed64 unpacked_sfixed64 =  99 [packed = false];
  repeated    float unpacked_float    = 100 [packed = false];
  repeated   double unpacked_double   = 101 [packed = false];
  repeated     bool unpacked_bool     = 102 [packed = false];
  repeated foreignenum unpacked_enum  = 103 [packed = false];
}

message testpackedextensions {
  extensions 1 to max;
}

extend testpackedextensions {
  repeated    int32 packed_int32_extension    =  90 [packed = true];
  repeated    int64 packed_int64_extension    =  91 [packed = true];
  repeated   uint32 packed_uint32_extension   =  92 [packed = true];
  repeated   uint64 packed_uint64_extension   =  93 [packed = true];
  repeated   sint32 packed_sint32_extension   =  94 [packed = true];
  repeated   sint64 packed_sint64_extension   =  95 [packed = true];
  repeated  fixed32 packed_fixed32_extension  =  96 [packed = true];
  repeated  fixed64 packed_fixed64_extension  =  97 [packed = true];
  repeated sfixed32 packed_sfixed32_extension =  98 [packed = true];
  repeated sfixed64 packed_sfixed64_extension =  99 [packed = true];
  repeated    float packed_float_extension    = 100 [packed = true];
  repeated   double packed_double_extension   = 101 [packed = true];
  repeated     bool packed_bool_extension     = 102 [packed = true];
  repeated foreignenum packed_enum_extension  = 103 [packed = true];
}

// used by extensionsettest/dynamicextensions.  the test actually builds
// a set of extensions to testallextensions dynamically, based on the fields
// of this message type.
message testdynamicextensions {
  enum dynamicenumtype {
    dynamic_foo = 2200;
    dynamic_bar = 2201;
    dynamic_baz = 2202;
  }
  message dynamicmessagetype {
    optional int32 dynamic_field = 2100;
  }

  optional fixed32 scalar_extension = 2000;
  optional foreignenum enum_extension = 2001;
  optional dynamicenumtype dynamic_enum_extension = 2002;

  optional foreignmessage message_extension = 2003;
  optional dynamicmessagetype dynamic_message_extension = 2004;

  repeated string repeated_extension = 2005;
  repeated sint32 packed_extension = 2006 [packed = true];
}

message testrepeatedscalardifferenttagsizes {
  // parsing repeated fixed size values used to fail. this message needs to be
  // used in order to get a tag of the right size; all of the repeated fields
  // in testalltypes didn't trigger the check.
  repeated fixed32 repeated_fixed32 = 12;
  // check for a varint type, just for good measure.
  repeated int32   repeated_int32   = 13;

  // these have two-byte tags.
  repeated fixed64 repeated_fixed64 = 2046;
  repeated int64   repeated_int64   = 2047;

  // three byte tags.
  repeated float   repeated_float   = 262142;
  repeated uint64  repeated_uint64  = 262143;
}

// test that if an optional or required message/group field appears multiple
// times in the input, they need to be merged.
message testparsingmerge {
  // repeatedfieldsgenerator defines matching field types as testparsingmerge,
  // except that all fields are repeated. in the tests, we will serialize the
  // repeatedfieldsgenerator to bytes, and parse the bytes to testparsingmerge.
  // repeated fields in repeatedfieldsgenerator are expected to be merged into
  // the corresponding required/optional fields in testparsingmerge.
  message repeatedfieldsgenerator {
    repeated testalltypes field1 = 1;
    repeated testalltypes field2 = 2;
    repeated testalltypes field3 = 3;
    repeated group group1 = 10 {
      optional testalltypes field1 = 11;
    }
    repeated group group2 = 20 {
      optional testalltypes field1 = 21;
    }
    repeated testalltypes ext1 = 1000;
    repeated testalltypes ext2 = 1001;
  }
  required testalltypes required_all_types = 1;
  optional testalltypes optional_all_types = 2;
  repeated testalltypes repeated_all_types = 3;
  optional group optionalgroup = 10 {
    optional testalltypes optional_group_all_types = 11;
  }
  repeated group repeatedgroup = 20 {
    optional testalltypes repeated_group_all_types = 21;
  }
  extensions 1000 to max;
  extend testparsingmerge {
    optional testalltypes optional_ext = 1000;
    repeated testalltypes repeated_ext = 1001;
  }
}

message testcommentinjectionmessage {
  // */ <- this should not close the generated doc comment
  optional string a = 1 [default="*/ <- neither should this."];
}


// test that rpc services work.
message foorequest  {}
message fooresponse {}

message fooclientmessage {}
message fooservermessage{}

service testservice {
  rpc foo(foorequest) returns (fooresponse);
  rpc bar(barrequest) returns (barresponse);
}


message barrequest  {}
message barresponse {}
