# doxyfile 1.8.3.1

# this file describes the settings to be used by the documentation system
# doxygen (www.doxygen.org) for a project.
#
# all text after a hash (#) is considered a comment and will be ignored.
# the format is:
#       tag = value [value, ...]
# for lists items can also be appended using:
#       tag += value [value, ...]
# values that contain spaces should be placed between quotes (" ").

#---------------------------------------------------------------------------
# project related configuration options
#---------------------------------------------------------------------------

# this tag specifies the encoding used for all characters in the config file
# that follow. the default is utf-8 which is also the encoding used for all
# text before the first occurrence of this tag. doxygen uses libiconv (or the
# iconv built into libc) for the transcoding. see
# http://www.gnu.org/software/libiconv for the list of possible encodings.

doxyfile_encoding      = utf-8

# the project_name tag is a single word (or sequence of words) that should
# identify the project. note that if you do not use doxywizard you need
# to put quotes around the project name if it contains spaces.

project_name           = "websocketpp"

# the project_number tag can be used to enter a project or revision number.
# this could be handy for archiving the generated documentation or
# if some version control system is used.


project_number         = "0.4.0"


# using the project_brief tag one can provide an optional one line description
# for a project that appears at the top of each page and should give viewer
# a quick idea about the purpose of the project. keep the description short.

project_brief          = "c++/boost asio based websocket client/server library"

# with the project_logo tag one can specify an logo or icon that is
# included in the documentation. the maximum height of the logo should not
# exceed 55 pixels and the maximum width should not exceed 200 pixels.
# doxygen will copy the logo to the output directory.

project_logo           =

# the output_directory tag is used to specify the (relative or absolute)
# base path where the generated documentation will be put.
# if a relative path is entered, it will be relative to the location
# where doxygen was started. if left blank the current directory will be used.

output_directory       = "doxygen"

# if the create_subdirs tag is set to yes, then doxygen will create
# 4096 sub-directories (in 2 levels) under the output directory of each output
# format and will distribute the generated files over these directories.
# enabling this option can be useful when feeding doxygen a huge amount of
# source files, where putting all generated files in the same directory would
# otherwise cause performance problems for the file system.

create_subdirs         = no

# the output_language tag is used to specify the language in which all
# documentation generated by doxygen is written. doxygen will use this
# information to generate all constant output in the proper language.
# the default language is english, other supported languages are:
# afrikaans, arabic, brazilian, catalan, chinese, chinese-traditional,
# croatian, czech, danish, dutch, esperanto, farsi, finnish, french, german,
# greek, hungarian, italian, japanese, japanese-en (japanese with english
# messages), korean, korean-en, lithuanian, norwegian, macedonian, persian,
# polish, portuguese, romanian, russian, serbian, serbian-cyrillic, slovak,
# slovene, spanish, swedish, ukrainian, and vietnamese.

output_language        = english

# if the brief_member_desc tag is set to yes (the default) doxygen will
# include brief member descriptions after the members that are listed in
# the file and class documentation (similar to javadoc).
# set to no to disable this.

brief_member_desc      = yes

# if the repeat_brief tag is set to yes (the default) doxygen will prepend
# the brief description of a member or function before the detailed description.
# note: if both hide_undoc_members and brief_member_desc are set to no, the
# brief descriptions will be completely suppressed.

repeat_brief           = yes

# this tag implements a quasi-intelligent brief description abbreviator
# that is used to form the text in various listings. each string
# in this list, if found as the leading text of the brief description, will be
# stripped from the text and the result after processing the whole list, is
# used as the annotated text. otherwise, the brief description is used as-is.
# if left blank, the following values are used ("$name" is automatically
# replaced with the name of the entity): "the $name class" "the $name widget"
# "the $name file" "is" "provides" "specifies" "contains"
# "represents" "a" "an" "the"

abbreviate_brief       =

# if the always_detailed_sec and repeat_brief tags are both set to yes then
# doxygen will generate a detailed section even if there is only a brief
# description.

always_detailed_sec    = no

# if the inline_inherited_memb tag is set to yes, doxygen will show all
# inherited members of a class in the documentation of that class as if those
# members were ordinary class members. constructors, destructors and assignment
# operators of the base classes will not be shown.

inline_inherited_memb  = no

# if the full_path_names tag is set to yes then doxygen will prepend the full
# path before files name in the file list and in the header files. if set
# to no the shortest path that makes the file name unique will be used.

full_path_names        = yes

# if the full_path_names tag is set to yes then the strip_from_path tag
# can be used to strip a user-defined part of the path. stripping is
# only done if one of the specified strings matches the left-hand part of
# the path. the tag can be used to show relative paths in the file list.
# if left blank the directory from which doxygen is run is used as the
# path to strip. note that you specify absolute paths here, but also
# relative paths, which will be relative from the directory where doxygen is
# started.

strip_from_path        =

# the strip_from_inc_path tag can be used to strip a user-defined part of
# the path mentioned in the documentation of a class, which tells
# the reader which header file to include in order to use a class.
# if left blank only the name of the header file containing the class
# definition is used. otherwise one should specify the include paths that
# are normally passed to the compiler using the -i flag.

strip_from_inc_path    =

# if the short_names tag is set to yes, doxygen will generate much shorter
# (but less readable) file names. this can be useful if your file system
# doesn't support long names like on dos, mac, or cd-rom.

short_names            = no

# if the javadoc_autobrief tag is set to yes then doxygen
# will interpret the first line (until the first dot) of a javadoc-style
# comment as the brief description. if set to no, the javadoc
# comments will behave just like regular qt-style comments
# (thus requiring an explicit @brief command for a brief description.)

javadoc_autobrief      = no

# if the qt_autobrief tag is set to yes then doxygen will
# interpret the first line (until the first dot) of a qt-style
# comment as the brief description. if set to no, the comments
# will behave just like regular qt-style comments (thus requiring
# an explicit \brief command for a brief description.)

qt_autobrief           = no

# the multiline_cpp_is_brief tag can be set to yes to make doxygen
# treat a multi-line c++ special comment block (i.e. a block of //! or ///
# comments) as a brief description. this used to be the default behaviour.
# the new default is to treat a multi-line c++ comment block as a detailed
# description. set this tag to yes if you prefer the old behaviour instead.

multiline_cpp_is_brief = no

# if the inherit_docs tag is set to yes (the default) then an undocumented
# member inherits the documentation from any documented member that it
# re-implements.

inherit_docs           = yes

# if the separate_member_pages tag is set to yes, then doxygen will produce
# a new page for each member. if set to no, the documentation of a member will
# be part of the file/class/namespace that contains it.

separate_member_pages  = no

# the tab_size tag can be used to set the number of spaces in a tab.
# doxygen uses this value to replace tabs by spaces in code fragments.

tab_size               = 4

# this tag can be used to specify a number of aliases that acts
# as commands in the documentation. an alias has the form "name=value".
# for example adding "sideeffect=\par side effects:\n" will allow you to
# put the command \sideeffect (or @sideeffect) in the documentation, which
# will result in a user-defined paragraph with heading "side effects:".
# you can put \n's in the value part of an alias to insert newlines.

aliases                =

# this tag can be used to specify a number of word-keyword mappings (tcl only).
# a mapping has the form "name=value". for example adding
# "class=itcl::class" will allow you to use the command class in the
# itcl::class meaning.

tcl_subst              =

# set the optimize_output_for_c tag to yes if your project consists of c
# sources only. doxygen will then generate output that is more tailored for c.
# for instance, some of the names that are used will be different. the list
# of all members will be omitted, etc.

optimize_output_for_c  = no

# set the optimize_output_java tag to yes if your project consists of java
# sources only. doxygen will then generate output that is more tailored for
# java. for instance, namespaces will be presented as packages, qualified
# scopes will look different, etc.

optimize_output_java   = no

# set the optimize_for_fortran tag to yes if your project consists of fortran
# sources only. doxygen will then generate output that is more tailored for
# fortran.

optimize_for_fortran   = no

# set the optimize_output_vhdl tag to yes if your project consists of vhdl
# sources. doxygen will then generate output that is tailored for
# vhdl.

optimize_output_vhdl   = no

# doxygen selects the parser to use depending on the extension of the files it
# parses. with this tag you can assign which parser to use for a given
# extension. doxygen has a built-in mapping, but you can override or extend it
# using this tag. the format is ext=language, where ext is a file extension,
# and language is one of the parsers supported by doxygen: idl, java,
# javascript, csharp, c, c++, d, php, objective-c, python, fortran, vhdl, c,
# c++. for instance to make doxygen treat .inc files as fortran files (default
# is php), and .f files as c (default is fortran), use: inc=fortran f=c. note
# that for custom extensions you also need to set file_patterns otherwise the
# files are not read by doxygen.

extension_mapping      =

# if markdown_support is enabled (the default) then doxygen pre-processes all
# comments according to the markdown format, which allows for more readable
# documentation. see http://daringfireball.net/projects/markdown/ for details.
# the output of markdown processing is further processed by doxygen, so you
# can mix doxygen, html, and xml commands with markdown formatting.
# disable only in case of backward compatibilities issues.

markdown_support       = yes

# when enabled doxygen tries to link words that correspond to documented classes,
# or namespaces to their corresponding documentation. such a link can be
# prevented in individual cases by by putting a % sign in front of the word or
# globally by setting autolink_support to no.

autolink_support       = yes

# if you use stl classes (i.e. std::string, std::vector, etc.) but do not want
# to include (a tag file for) the stl sources as input, then you should
# set this tag to yes in order to let doxygen match functions declarations and
# definitions whose arguments contain stl classes (e.g. func(std::string); v.s.
# func(std::string) {}). this also makes the inheritance and collaboration
# diagrams that involve stl classes more complete and accurate.

builtin_stl_support    = yes

# if you use microsoft's c++/cli language, you should set this option to yes to
# enable parsing support.

cpp_cli_support        = no

# set the sip_support tag to yes if your project consists of sip sources only.
# doxygen will parse them like normal c++ but will assume all classes use public
# instead of private inheritance when no explicit protection keyword is present.

sip_support            = no

# for microsoft's idl there are propget and propput attributes to indicate
# getter and setter methods for a property. setting this option to yes (the
# default) will make doxygen replace the get and set methods by a property in
# the documentation. this will only work if the methods are indeed getting or
# setting a simple type. if this is not the case, or you want to show the
# methods anyway, you should set this option to no.

idl_property_support   = yes

# if member grouping is used in the documentation and the distribute_group_doc
# tag is set to yes, then doxygen will reuse the documentation of the first
# member in the group (if any) for the other members of the group. by default
# all members of a group must be documented explicitly.

distribute_group_doc   = no

# set the subgrouping tag to yes (the default) to allow class member groups of
# the same type (for instance a group of public functions) to be put as a
# subgroup of that type (e.g. under the public functions section). set it to
# no to prevent subgrouping. alternatively, this can be done per class using
# the \nosubgrouping command.

subgrouping            = yes

# when the inline_grouped_classes tag is set to yes, classes, structs and
# unions are shown inside the group in which they are included (e.g. using
# @ingroup) instead of on a separate page (for html and man pages) or
# section (for latex and rtf).

inline_grouped_classes = no

# when the inline_simple_structs tag is set to yes, structs, classes, and
# unions with only public data fields will be shown inline in the documentation
# of the scope in which they are defined (i.e. file, namespace, or group
# documentation), provided this scope is documented. if set to no (the default),
# structs, classes, and unions are shown on a separate page (for html and man
# pages) or section (for latex and rtf).

inline_simple_structs  = no

# when typedef_hides_struct is enabled, a typedef of a struct, union, or enum
# is documented as struct, union, or enum with the name of the typedef. so
# typedef struct types {} typet, will appear in the documentation as a struct
# with name typet. when disabled the typedef will appear as a member of a file,
# namespace, or class. and the struct will be named types. this can typically
# be useful for c code in case the coding convention dictates that all compound
# types are typedef'ed and only the typedef is referenced, never the tag name.

typedef_hides_struct   = no

# the symbol_cache_size determines the size of the internal cache use to
# determine which symbols to keep in memory and which to flush to disk.
# when the cache is full, less often used symbols will be written to disk.
# for small to medium size projects (<1000 input files) the default value is
# probably good enough. for larger projects a too small cache size can cause
# doxygen to be busy swapping symbols to and from disk most of the time
# causing a significant performance penalty.
# if the system has enough physical memory increasing the cache will improve the
# performance by keeping more symbols in memory. note that the value works on
# a logarithmic scale so increasing the size by one will roughly double the
# memory usage. the cache size is given by this formula:
# 2^(16+symbol_cache_size). the valid range is 0..9, the default is 0,
# corresponding to a cache size of 2^16 = 65536 symbols.

symbol_cache_size      = 0

# similar to the symbol_cache_size the size of the symbol lookup cache can be
# set using lookup_cache_size. this cache is used to resolve symbols given
# their name and scope. since this can be an expensive process and often the
# same symbol appear multiple times in the code, doxygen keeps a cache of
# pre-resolved symbols. if the cache is too small doxygen will become slower.
# if the cache is too large, memory is wasted. the cache size is given by this
# formula: 2^(16+lookup_cache_size). the valid range is 0..9, the default is 0,
# corresponding to a cache size of 2^16 = 65536 symbols.

lookup_cache_size      = 0

#---------------------------------------------------------------------------
# build related configuration options
#---------------------------------------------------------------------------

# if the extract_all tag is set to yes doxygen will assume all entities in
# documentation are documented, even if no documentation was available.
# private class members and static file members will be hidden unless
# the extract_private and extract_static tags are set to yes

extract_all            = no

# if the extract_private tag is set to yes all private members of a class
# will be included in the documentation.

extract_private        = no

# if the extract_package tag is set to yes all members with package or internal
# scope will be included in the documentation.

extract_package        = no

# if the extract_static tag is set to yes all static members of a file
# will be included in the documentation.

extract_static         = yes

# if the extract_local_classes tag is set to yes classes (and structs)
# defined locally in source files will be included in the documentation.
# if set to no only classes defined in header files are included.

extract_local_classes  = yes

# this flag is only useful for objective-c code. when set to yes local
# methods, which are defined in the implementation section but not in
# the interface are included in the documentation.
# if set to no (the default) only methods in the interface are included.

extract_local_methods  = no

# if this flag is set to yes, the members of anonymous namespaces will be
# extracted and appear in the documentation as a namespace called
# 'anonymous_namespace{file}', where file will be replaced with the base
# name of the file that contains the anonymous namespace. by default
# anonymous namespaces are hidden.

extract_anon_nspaces   = no

# if the hide_undoc_members tag is set to yes, doxygen will hide all
# undocumented members of documented classes, files or namespaces.
# if set to no (the default) these members will be included in the
# various overviews, but no documentation section is generated.
# this option has no effect if extract_all is enabled.

hide_undoc_members     = no

# if the hide_undoc_classes tag is set to yes, doxygen will hide all
# undocumented classes that are normally visible in the class hierarchy.
# if set to no (the default) these classes will be included in the various
# overviews. this option has no effect if extract_all is enabled.

hide_undoc_classes     = no

# if the hide_friend_compounds tag is set to yes, doxygen will hide all
# friend (class|struct|union) declarations.
# if set to no (the default) these declarations will be included in the
# documentation.

hide_friend_compounds  = no

# if the hide_in_body_docs tag is set to yes, doxygen will hide any
# documentation blocks found inside the body of a function.
# if set to no (the default) these blocks will be appended to the
# function's detailed documentation block.

hide_in_body_docs      = no

# the internal_docs tag determines if documentation
# that is typed after a \internal command is included. if the tag is set
# to no (the default) then the documentation will be excluded.
# set it to yes to include the internal documentation.

internal_docs          = no

# if the case_sense_names tag is set to no then doxygen will only generate
# file names in lower-case letters. if set to yes upper-case letters are also
# allowed. this is useful if you have classes or files whose names only differ
# in case and if your file system supports case sensitive file names. windows
# and mac users are advised to set this option to no.

case_sense_names       = no

# if the hide_scope_names tag is set to no (the default) then doxygen
# will show members with their full class and namespace scopes in the
# documentation. if set to yes the scope will be hidden.

hide_scope_names       = no

# if the show_include_files tag is set to yes (the default) then doxygen
# will put a list of the files that are included by a file in the documentation
# of that file.

show_include_files     = yes

# if the force_local_includes tag is set to yes then doxygen
# will list include files with double quotes in the documentation
# rather than with sharp brackets.

force_local_includes   = no

# if the inline_info tag is set to yes (the default) then a tag [inline]
# is inserted in the documentation for inline members.

inline_info            = yes

# if the sort_member_docs tag is set to yes (the default) then doxygen
# will sort the (detailed) documentation of file and class members
# alphabetically by member name. if set to no the members will appear in
# declaration order.

sort_member_docs       = yes

# if the sort_brief_docs tag is set to yes then doxygen will sort the
# brief documentation of file, namespace and class members alphabetically
# by member name. if set to no (the default) the members will appear in
# declaration order.

sort_brief_docs        = no

# if the sort_members_ctors_1st tag is set to yes then doxygen
# will sort the (brief and detailed) documentation of class members so that
# constructors and destructors are listed first. if set to no (the default)
# the constructors will appear in the respective orders defined by
# sort_member_docs and sort_brief_docs.
# this tag will be ignored for brief docs if sort_brief_docs is set to no
# and ignored for detailed docs if sort_member_docs is set to no.

sort_members_ctors_1st = no

# if the sort_group_names tag is set to yes then doxygen will sort the
# hierarchy of group names into alphabetical order. if set to no (the default)
# the group names will appear in their defined order.

sort_group_names       = no

# if the sort_by_scope_name tag is set to yes, the class list will be
# sorted by fully-qualified names, including namespaces. if set to
# no (the default), the class list will be sorted only by class name,
# not including the namespace part.
# note: this option is not very useful if hide_scope_names is set to yes.
# note: this option applies only to the class list, not to the
# alphabetical list.

sort_by_scope_name     = no

# if the strict_proto_matching option is enabled and doxygen fails to
# do proper type resolution of all parameters of a function it will reject a
# match between the prototype and the implementation of a member function even
# if there is only one candidate or it is obvious which candidate to choose
# by doing a simple string match. by disabling strict_proto_matching doxygen
# will still accept a match between prototype and implementation in such cases.

strict_proto_matching  = no

# the generate_todolist tag can be used to enable (yes) or
# disable (no) the todo list. this list is created by putting \todo
# commands in the documentation.

generate_todolist      = yes

# the generate_testlist tag can be used to enable (yes) or
# disable (no) the test list. this list is created by putting \test
# commands in the documentation.

generate_testlist      = yes

# the generate_buglist tag can be used to enable (yes) or
# disable (no) the bug list. this list is created by putting \bug
# commands in the documentation.

generate_buglist       = yes

# the generate_deprecatedlist tag can be used to enable (yes) or
# disable (no) the deprecated list. this list is created by putting
# \deprecated commands in the documentation.

generate_deprecatedlist= yes

# the enabled_sections tag can be used to enable conditional
# documentation sections, marked by \if section-label ... \endif
# and \cond section-label ... \endcond blocks.

enabled_sections       =

# the max_initializer_lines tag determines the maximum number of lines
# the initial value of a variable or macro consists of for it to appear in
# the documentation. if the initializer consists of more lines than specified
# here it will be hidden. use a value of 0 to hide initializers completely.
# the appearance of the initializer of individual variables and macros in the
# documentation can be controlled using \showinitializer or \hideinitializer
# command in the documentation regardless of this setting.

max_initializer_lines  = 30

# set the show_used_files tag to no to disable the list of files generated
# at the bottom of the documentation of classes and structs. if set to yes the
# list will mention the files that were used to generate the documentation.

show_used_files        = yes

# set the show_files tag to no to disable the generation of the files page.
# this will remove the files entry from the quick index and from the
# folder tree view (if specified). the default is yes.

show_files             = yes

# set the show_namespaces tag to no to disable the generation of the
# namespaces page.
# this will remove the namespaces entry from the quick index
# and from the folder tree view (if specified). the default is yes.

show_namespaces        = yes

# the file_version_filter tag can be used to specify a program or script that
# doxygen should invoke to get the current version for each file (typically from
# the version control system). doxygen will invoke the program by executing (via
# popen()) the command <command> <input-file>, where <command> is the value of
# the file_version_filter tag, and <input-file> is the name of an input file
# provided by doxygen. whatever the program writes to standard output
# is used as the file version. see the manual for examples.

file_version_filter    =

# the layout_file tag can be used to specify a layout file which will be parsed
# by doxygen. the layout file controls the global structure of the generated
# output files in an output format independent way. to create the layout file
# that represents doxygen's defaults, run doxygen with the -l option.
# you can optionally specify a file name after the option, if omitted
# doxygenlayout.xml will be used as the name of the layout file.

layout_file            =

# the cite_bib_files tag can be used to specify one or more bib files
# containing the references data. this must be a list of .bib files. the
# .bib extension is automatically appended if omitted. using this command
# requires the bibtex tool to be installed. see also
# http://en.wikipedia.org/wiki/bibtex for more info. for latex the style
# of the bibliography can be controlled using latex_bib_style. to use this
# feature you need bibtex and perl available in the search path. do not use
# file names with spaces, bibtex cannot handle them.

cite_bib_files         =

#---------------------------------------------------------------------------
# configuration options related to warning and progress messages
#---------------------------------------------------------------------------

# the quiet tag can be used to turn on/off the messages that are generated
# by doxygen. possible values are yes and no. if left blank no is used.

quiet                  = no

# the warnings tag can be used to turn on/off the warning messages that are
# generated by doxygen. possible values are yes and no. if left blank
# no is used.

warnings               = yes

# if warn_if_undocumented is set to yes, then doxygen will generate warnings
# for undocumented members. if extract_all is set to yes then this flag will
# automatically be disabled.

warn_if_undocumented   = yes

# if warn_if_doc_error is set to yes, doxygen will generate warnings for
# potential errors in the documentation, such as not documenting some
# parameters in a documented function, or documenting parameters that
# don't exist or using markup commands wrongly.

warn_if_doc_error      = yes

# the warn_no_paramdoc option can be enabled to get warnings for
# functions that are documented, but have no documentation for their parameters
# or return value. if set to no (the default) doxygen will only warn about
# wrong or incomplete parameter documentation, but not about the absence of
# documentation.

warn_no_paramdoc       = no

# the warn_format tag determines the format of the warning messages that
# doxygen can produce. the string should contain the $file, $line, and $text
# tags, which will be replaced by the file and line number from which the
# warning originated and the warning text. optionally the format may contain
# $version, which will be replaced by the version of the file (if it could
# be obtained via file_version_filter)

warn_format            = "$file:$line: $text"

# the warn_logfile tag can be used to specify a file to which warning
# and error messages should be written. if left blank the output is written
# to stderr.

warn_logfile           =

#---------------------------------------------------------------------------
# configuration options related to the input files
#---------------------------------------------------------------------------

# the input tag can be used to specify the files and/or directories that contain
# documented source files. you may enter file names like "myfile.cpp" or
# directories like "/usr/src/myproject". separate the files or directories
# with spaces.

input                  = websocketpp \
                         readme.md \
                         changelog.md \
                         roadmap.md

# this tag can be used to specify the character encoding of the source files
# that doxygen parses. internally doxygen uses the utf-8 encoding, which is
# also the default input encoding. doxygen uses libiconv (or the iconv built
# into libc) for the transcoding. see http://www.gnu.org/software/libiconv for
# the list of possible encodings.

input_encoding         = utf-8

# if the value of the input tag contains directories, you can use the
# file_patterns tag to specify one or more wildcard pattern (like *.cpp
# and *.h) to filter out the source-files in the directories. if left
# blank the following patterns are tested:
# *.c *.cc *.cxx *.cpp *.c++ *.d *.java *.ii *.ixx *.ipp *.i++ *.inl *.h *.hh
# *.hxx *.hpp *.h++ *.idl *.odl *.cs *.php *.php3 *.inc *.m *.mm *.dox *.py
# *.f90 *.f *.for *.vhd *.vhdl

file_patterns          =

# the recursive tag can be used to turn specify whether or not subdirectories
# should be searched for input files as well. possible values are yes and no.
# if left blank no is used.

recursive              = yes

# the exclude tag can be used to specify files and/or directories that should be
# excluded from the input source files. this way you can easily exclude a
# subdirectory from a directory tree whose root is specified with the input tag.
# note that relative paths are relative to the directory from which doxygen is
# run.

exclude                = build

# the exclude_symlinks tag can be used to select whether or not files or
# directories that are symbolic links (a unix file system feature) are excluded
# from the input.

exclude_symlinks       = no

# if the value of the input tag contains directories, you can use the
# exclude_patterns tag to specify one or more wildcard patterns to exclude
# certain files from those directories. note that the wildcards are matched
# against the file with absolute path, so to exclude all test directories
# for example use the pattern */test/*

exclude_patterns       =

# the exclude_symbols tag can be used to specify one or more symbol names
# (namespaces, classes, functions, etc.) that should be excluded from the
# output. the symbol name can be a fully qualified name, a word, or if the
# wildcard * is used, a substring. examples: anamespace, aclass,
# aclass::anamespace, anamespace::*test

exclude_symbols        =

# the example_path tag can be used to specify one or more files or
# directories that contain example code fragments that are included (see
# the \include command).

example_path           =

# if the value of the example_path tag contains directories, you can use the
# example_patterns tag to specify one or more wildcard pattern (like *.cpp
# and *.h) to filter out the source-files in the directories. if left
# blank all files are included.

example_patterns       =

# if the example_recursive tag is set to yes then subdirectories will be
# searched for input files to be used with the \include or \dontinclude
# commands irrespective of the value of the recursive tag.
# possible values are yes and no. if left blank no is used.

example_recursive      = no

# the image_path tag can be used to specify one or more files or
# directories that contain image that are included in the documentation (see
# the \image command).

image_path             =

# the input_filter tag can be used to specify a program that doxygen should
# invoke to filter for each input file. doxygen will invoke the filter program
# by executing (via popen()) the command <filter> <input-file>, where <filter>
# is the value of the input_filter tag, and <input-file> is the name of an
# input file. doxygen will then use the output that the filter program writes
# to standard output.
# if filter_patterns is specified, this tag will be
# ignored.

input_filter           =

# the filter_patterns tag can be used to specify filters on a per file pattern
# basis.
# doxygen will compare the file name with each pattern and apply the
# filter if there is a match.
# the filters are a list of the form:
# pattern=filter (like *.cpp=my_cpp_filter). see input_filter for further
# info on how filters are used. if filter_patterns is empty or if
# non of the patterns match the file name, input_filter is applied.

filter_patterns        =

# if the filter_source_files tag is set to yes, the input filter (if set using
# input_filter) will be used to filter the input files when producing source
# files to browse (i.e. when source_browser is set to yes).

filter_source_files    = no

# the filter_source_patterns tag can be used to specify source filters per file
# pattern. a pattern will override the setting for filter_pattern (if any)
# and it is also possible to disable source filtering for a specific pattern
# using *.ext= (so without naming a filter). this option only has effect when
# filter_source_files is enabled.

filter_source_patterns =

# if the use_md_file_as_mainpage tag refers to the name of a markdown file that
# is part of the input, its contents will be placed on the main page (index.html).
# this can be useful if you have a project on for instance github and want reuse
# the introduction page also for the doxygen output.

use_mdfile_as_mainpage =

#---------------------------------------------------------------------------
# configuration options related to source browsing
#---------------------------------------------------------------------------

# if the source_browser tag is set to yes then a list of source files will
# be generated. documented entities will be cross-referenced with these sources.
# note: to get rid of all source code in the generated output, make sure also
# verbatim_headers is set to no.

source_browser         = yes

# setting the inline_sources tag to yes will include the body
# of functions and classes directly in the documentation.

inline_sources         = no

# setting the strip_code_comments tag to yes (the default) will instruct
# doxygen to hide any special comment blocks from generated source code
# fragments. normal c, c++ and fortran comments will always remain visible.

strip_code_comments    = yes

# if the referenced_by_relation tag is set to yes
# then for each documented function all documented
# functions referencing it will be listed.

referenced_by_relation = no

# if the references_relation tag is set to yes
# then for each documented function all documented entities
# called/used by that function will be listed.

references_relation    = no

# if the references_link_source tag is set to yes (the default)
# and source_browser tag is set to yes, then the hyperlinks from
# functions in references_relation and referenced_by_relation lists will
# link to the source code.
# otherwise they will link to the documentation.

references_link_source = yes

# if the use_htags tag is set to yes then the references to source code
# will point to the html generated by the htags(1) tool instead of doxygen
# built-in source browser. the htags tool is part of gnu's global source
# tagging system (see http://www.gnu.org/software/global/global.html). you
# will need version 4.8.6 or higher.

use_htags              = no

# if the verbatim_headers tag is set to yes (the default) then doxygen
# will generate a verbatim copy of the header file for each class for
# which an include is specified. set to no to disable this.

verbatim_headers       = yes

#---------------------------------------------------------------------------
# configuration options related to the alphabetical class index
#---------------------------------------------------------------------------

# if the alphabetical_index tag is set to yes, an alphabetical index
# of all compounds will be generated. enable this if the project
# contains a lot of classes, structs, unions or interfaces.

alphabetical_index     = yes

# if the alphabetical index is enabled (see alphabetical_index) then
# the cols_in_alpha_index tag can be used to specify the number of columns
# in which this list will be split (can be a number in the range [1..20])

cols_in_alpha_index    = 5

# in case all classes in a project start with a common prefix, all
# classes will be put under the same header in the alphabetical index.
# the ignore_prefix tag can be used to specify one or more prefixes that
# should be ignored while generating the index headers.

ignore_prefix          =

#---------------------------------------------------------------------------
# configuration options related to the html output
#---------------------------------------------------------------------------

# if the generate_html tag is set to yes (the default) doxygen will
# generate html output.

generate_html          = yes

# the html_output tag is used to specify where the html docs will be put.
# if a relative path is entered the value of output_directory will be
# put in front of it. if left blank `html' will be used as the default path.

html_output            = html

# the html_file_extension tag can be used to specify the file extension for
# each generated html page (for example: .htm,.php,.asp). if it is left blank
# doxygen will generate files with .html extension.

html_file_extension    = .html

# the html_header tag can be used to specify a personal html header for
# each generated html page. if it is left blank doxygen will generate a
# standard header. note that when using a custom header you are responsible
#  for the proper inclusion of any scripts and style sheets that doxygen
# needs, which is dependent on the configuration options used.
# it is advised to generate a default header using "doxygen -w html
# header.html footer.html stylesheet.css yourconfigfile" and then modify
# that header. note that the header is subject to change so you typically
# have to redo this when upgrading to a newer version of doxygen or when
# changing the value of configuration settings such as generate_treeview!

html_header            =

# the html_footer tag can be used to specify a personal html footer for
# each generated html page. if it is left blank doxygen will generate a
# standard footer.

html_footer            =

# the html_stylesheet tag can be used to specify a user-defined cascading
# style sheet that is used by each html page. it can be used to
# fine-tune the look of the html output. if left blank doxygen will
# generate a default style sheet. note that it is recommended to use
# html_extra_stylesheet instead of this one, as it is more robust and this
# tag will in the future become obsolete.

html_stylesheet        =

# the html_extra_stylesheet tag can be used to specify an additional
# user-defined cascading style sheet that is included after the standard
# style sheets created by doxygen. using this option one can overrule
# certain style aspects. this is preferred over using html_stylesheet
# since it does not replace the standard style sheet and is therefor more
# robust against future updates. doxygen will copy the style sheet file to
# the output directory.

html_extra_stylesheet  =

# the html_extra_files tag can be used to specify one or more extra images or
# other source files which should be copied to the html output directory. note
# that these files will be copied to the base html output directory. use the
# $relpath$ marker in the html_header and/or html_footer files to load these
# files. in the html_stylesheet file, use the file name only. also note that
# the files will be copied as-is; there are no commands or markers available.

html_extra_files       =

# the html_colorstyle_hue tag controls the color of the html output.
# doxygen will adjust the colors in the style sheet and background images
# according to this color. hue is specified as an angle on a colorwheel,
# see http://en.wikipedia.org/wiki/hue for more information.
# for instance the value 0 represents red, 60 is yellow, 120 is green,
# 180 is cyan, 240 is blue, 300 purple, and 360 is red again.
# the allowed range is 0 to 359.

html_colorstyle_hue    = 236

# the html_colorstyle_sat tag controls the purity (or saturation) of
# the colors in the html output. for a value of 0 the output will use
# grayscales only. a value of 255 will produce the most vivid colors.

html_colorstyle_sat    = 0

# the html_colorstyle_gamma tag controls the gamma correction applied to
# the luminance component of the colors in the html output. values below
# 100 gradually make the output lighter, whereas values above 100 make
# the output darker. the value divided by 100 is the actual gamma applied,
# so 80 represents a gamma of 0.8, the value 220 represents a gamma of 2.2,
# and 100 does not change the gamma.

html_colorstyle_gamma  = 148

# if the html_timestamp tag is set to yes then the footer of each generated html
# page will contain the date and time when the page was generated. setting
# this to no can help when comparing the output of multiple runs.

html_timestamp         = yes

# if the html_dynamic_sections tag is set to yes then the generated html
# documentation will contain sections that can be hidden and shown after the
# page has loaded.

html_dynamic_sections  = no

# with html_index_num_entries one can control the preferred number of
# entries shown in the various tree structured indices initially; the user
# can expand and collapse entries dynamically later on. doxygen will expand
# the tree to such a level that at most the specified number of entries are
# visible (unless a fully collapsed tree already exceeds this amount).
# so setting the number of entries 1 will produce a full collapsed tree by
# default. 0 is a special value representing an infinite number of entries
# and will result in a full expanded tree by default.

html_index_num_entries = 100

# if the generate_docset tag is set to yes, additional index files
# will be generated that can be used as input for apple's xcode 3
# integrated development environment, introduced with osx 10.5 (leopard).
# to create a documentation set, doxygen will generate a makefile in the
# html output directory. running make will produce the docset in that
# directory and running "make install" will install the docset in
# ~/library/developer/shared/documentation/docsets so that xcode will find
# it at startup.
# see http://developer.apple.com/tools/creatingdocsetswithdoxygen.html
# for more information.

generate_docset        = no

# when generate_docset tag is set to yes, this tag determines the name of the
# feed. a documentation feed provides an umbrella under which multiple
# documentation sets from a single provider (such as a company or product suite)
# can be grouped.

docset_feedname        = "doxygen generated docs"

# when generate_docset tag is set to yes, this tag specifies a string that
# should uniquely identify the documentation set bundle. this should be a
# reverse domain-name style string, e.g. com.mycompany.mydocset. doxygen
# will append .docset to the name.

docset_bundle_id       = org.doxygen.project

# when generate_publisher_id tag specifies a string that should uniquely
# identify the documentation publisher. this should be a reverse domain-name
# style string, e.g. com.mycompany.mydocset.documentation.

docset_publisher_id    = org.doxygen.publisher

# the generate_publisher_name tag identifies the documentation publisher.

docset_publisher_name  = publisher

# if the generate_htmlhelp tag is set to yes, additional index files
# will be generated that can be used as input for tools like the
# microsoft html help workshop to generate a compiled html help file (.chm)
# of the generated html documentation.

generate_htmlhelp      = no

# if the generate_htmlhelp tag is set to yes, the chm_file tag can
# be used to specify the file name of the resulting .chm file. you
# can add a path in front of the file if the result should not be
# written to the html output directory.

chm_file               =

# if the generate_htmlhelp tag is set to yes, the hhc_location tag can
# be used to specify the location (absolute path including file name) of
# the html help compiler (hhc.exe). if non-empty doxygen will try to run
# the html help compiler on the generated index.hhp.

hhc_location           =

# if the generate_htmlhelp tag is set to yes, the generate_chi flag
# controls if a separate .chi index file is generated (yes) or that
# it should be included in the master .chm file (no).

generate_chi           = no

# if the generate_htmlhelp tag is set to yes, the chm_index_encoding
# is used to encode htmlhelp index (hhk), content (hhc) and project file
# content.

chm_index_encoding     =

# if the generate_htmlhelp tag is set to yes, the binary_toc flag
# controls whether a binary table of contents is generated (yes) or a
# normal table of contents (no) in the .chm file.

binary_toc             = no

# the toc_expand flag can be set to yes to add extra items for group members
# to the contents of the html help documentation and to the tree view.

toc_expand             = no

# if the generate_qhp tag is set to yes and both qhp_namespace and
# qhp_virtual_folder are set, an additional index file will be generated
# that can be used as input for qt's qhelpgenerator to generate a
# qt compressed help (.qch) of the generated html documentation.

generate_qhp           = no

# if the qhg_location tag is specified, the qch_file tag can
# be used to specify the file name of the resulting .qch file.
# the path specified is relative to the html output folder.

qch_file               =

# the qhp_namespace tag specifies the namespace to use when generating
# qt help project output. for more information please see
# http://doc.trolltech.com/qthelpproject.html#namespace

qhp_namespace          = org.doxygen.project

# the qhp_virtual_folder tag specifies the namespace to use when generating
# qt help project output. for more information please see
# http://doc.trolltech.com/qthelpproject.html#virtual-folders

qhp_virtual_folder     = doc

# if qhp_cust_filter_name is set, it specifies the name of a custom filter to
# add. for more information please see
# http://doc.trolltech.com/qthelpproject.html#custom-filters

qhp_cust_filter_name   =

# the qhp_cust_filt_attrs tag specifies the list of the attributes of the
# custom filter to add. for more information please see
# <a href="http://doc.trolltech.com/qthelpproject.html#custom-filters">
# qt help project / custom filters</a>.

qhp_cust_filter_attrs  =

# the qhp_sect_filter_attrs tag specifies the list of the attributes this
# project's
# filter section matches.
# <a href="http://doc.trolltech.com/qthelpproject.html#filter-attributes">
# qt help project / filter attributes</a>.

qhp_sect_filter_attrs  =

# if the generate_qhp tag is set to yes, the qhg_location tag can
# be used to specify the location of qt's qhelpgenerator.
# if non-empty doxygen will try to run qhelpgenerator on the generated
# .qhp file.

qhg_location           =

# if the generate_eclipsehelp tag is set to yes, additional index files
#  will be generated, which together with the html files, form an eclipse help
# plugin. to install this plugin and make it available under the help contents
# menu in eclipse, the contents of the directory containing the html and xml
# files needs to be copied into the plugins directory of eclipse. the name of
# the directory within the plugins directory should be the same as
# the eclipse_doc_id value. after copying eclipse needs to be restarted before
# the help appears.

generate_eclipsehelp   = no

# a unique identifier for the eclipse help plugin. when installing the plugin
# the directory name containing the html and xml files should also have
# this name.

eclipse_doc_id         = org.doxygen.project

# the disable_index tag can be used to turn on/off the condensed index (tabs)
# at top of each html page. the value no (the default) enables the index and
# the value yes disables it. since the tabs have the same information as the
# navigation tree you can set this option to no if you already set
# generate_treeview to yes.

disable_index          = no

# the generate_treeview tag is used to specify whether a tree-like index
# structure should be generated to display hierarchical information.
# if the tag value is set to yes, a side panel will be generated
# containing a tree-like index structure (just like the one that
# is generated for html help). for this to work a browser that supports
# javascript, dhtml, css and frames is required (i.e. any modern browser).
# windows users are probably better off using the html help feature.
# since the tree basically has the same information as the tab index you
# could consider to set disable_index to no when enabling this option.

generate_treeview      = no

# the enum_values_per_line tag can be used to set the number of enum values
# (range [0,1..20]) that doxygen will group on one line in the generated html
# documentation. note that a value of 0 will completely suppress the enum
# values from appearing in the overview section.

enum_values_per_line   = 4

# if the treeview is enabled (see generate_treeview) then this tag can be
# used to set the initial width (in pixels) of the frame in which the tree
# is shown.

treeview_width         = 250

# when the ext_links_in_window option is set to yes doxygen will open
# links to external symbols imported via tag files in a separate window.

ext_links_in_window    = no

# use this tag to change the font size of latex formulas included
# as images in the html documentation. the default is 10. note that
# when you change the font size after a successful doxygen run you need
# to manually remove any form_*.png images from the html output directory
# to force them to be regenerated.

formula_fontsize       = 10

# use the formula_tranparent tag to determine whether or not the images
# generated for formulas are transparent pngs. transparent pngs are
# not supported properly for ie 6.0, but are supported on all modern browsers.
# note that when changing this option you need to delete any form_*.png files
# in the html output before the changes have effect.

formula_transparent    = yes

# enable the use_mathjax option to render latex formulas using mathjax
# (see http://www.mathjax.org) which uses client side javascript for the
# rendering instead of using prerendered bitmaps. use this if you do not
# have latex installed or if you want to formulas look prettier in the html
# output. when enabled you may also need to install mathjax separately and
# configure the path to it using the mathjax_relpath option.

use_mathjax            = no

# when mathjax is enabled you can set the default output format to be used for
# tha mathjax output. supported types are html-css, nativemml (i.e. mathml) and
# svg. the default value is html-css, which is slower, but has the best
# compatibility.

mathjax_format         = html-css

# when mathjax is enabled you need to specify the location relative to the
# html output directory using the mathjax_relpath option. the destination
# directory should contain the mathjax.js script. for instance, if the mathjax
# directory is located at the same level as the html output directory, then
# mathjax_relpath should be ../mathjax. the default value points to
# the mathjax content delivery network so you can quickly see the result without
# installing mathjax.
# however, it is strongly recommended to install a local
# copy of mathjax from http://www.mathjax.org before deployment.

mathjax_relpath        = http://cdn.mathjax.org/mathjax/latest

# the mathjax_extensions tag can be used to specify one or mathjax extension
# names that should be enabled during mathjax rendering.

mathjax_extensions     =

# when the searchengine tag is enabled doxygen will generate a search box
# for the html output. the underlying search engine uses javascript
# and dhtml and should work on any modern browser. note that when using
# html help (generate_htmlhelp), qt help (generate_qhp), or docsets
# (generate_docset) there is already a search function so this one should
# typically be disabled. for large projects the javascript based search engine
# can be slow, then enabling server_based_search may provide a better solution.

searchengine           = yes

# when the server_based_search tag is enabled the search engine will be
# implemented using a web server instead of a web client using javascript.
# there are two flavours of web server based search depending on the
# external_search setting. when disabled, doxygen will generate a php script for
# searching and an index file used by the script. when external_search is
# enabled the indexing and searching needs to be provided by external tools.
# see the manual for details.

server_based_search    = no

# when external_search is enabled doxygen will no longer generate the php
# script for searching. instead the search results are written to an xml file
# which needs to be processed by an external indexer. doxygen will invoke an
# external search engine pointed to by the searchengine_url option to obtain
# the search results. doxygen ships with an example indexer (doxyindexer) and
# search engine (doxysearch.cgi) which are based on the open source search engine
# library xapian. see the manual for configuration details.

external_search        = no

# the searchengine_url should point to a search engine hosted by a web server
# which will returned the search results when external_search is enabled.
# doxygen ships with an example search engine (doxysearch) which is based on
# the open source search engine library xapian. see the manual for configuration
# details.

searchengine_url       =

# when server_based_search and external_search are both enabled the unindexed
# search data is written to a file for indexing by an external tool. with the
# searchdata_file tag the name of this file can be specified.

searchdata_file        = searchdata.xml

# when server_based_search and external_search are both enabled the
# external_search_id tag can be used as an identifier for the project. this is
# useful in combination with extra_search_mappings to search through multiple
# projects and redirect the results back to the right project.

external_search_id     =

# the extra_search_mappings tag can be used to enable searching through doxygen
# projects other than the one defined by this configuration file, but that are
# all added to the same external search index. each project needs to have a
# unique id set via external_search_id. the search mapping then maps the id
# of to a relative location where the documentation can be found.
# the format is: extra_search_mappings = id1=loc1 id2=loc2 ...

extra_search_mappings  =

#---------------------------------------------------------------------------
# configuration options related to the latex output
#---------------------------------------------------------------------------

# if the generate_latex tag is set to yes (the default) doxygen will
# generate latex output.

generate_latex         = yes

# the latex_output tag is used to specify where the latex docs will be put.
# if a relative path is entered the value of output_directory will be
# put in front of it. if left blank `latex' will be used as the default path.

latex_output           = latex

# the latex_cmd_name tag can be used to specify the latex command name to be
# invoked. if left blank `latex' will be used as the default command name.
# note that when enabling use_pdflatex this option is only used for
# generating bitmaps for formulas in the html output, but not in the
# makefile that is written to the output directory.

latex_cmd_name         = latex

# the makeindex_cmd_name tag can be used to specify the command name to
# generate index for latex. if left blank `makeindex' will be used as the
# default command name.

makeindex_cmd_name     = makeindex

# if the compact_latex tag is set to yes doxygen generates more compact
# latex documents. this may be useful for small projects and may help to
# save some trees in general.

compact_latex          = no

# the paper_type tag can be used to set the paper type that is used
# by the printer. possible values are: a4, letter, legal and
# executive. if left blank a4wide will be used.

paper_type             = a4

# the extra_packages tag can be to specify one or more names of latex
# packages that should be included in the latex output.

extra_packages         =

# the latex_header tag can be used to specify a personal latex header for
# the generated latex document. the header should contain everything until
# the first chapter. if it is left blank doxygen will generate a
# standard header. notice: only use this tag if you know what you are doing!

latex_header           =

# the latex_footer tag can be used to specify a personal latex footer for
# the generated latex document. the footer should contain everything after
# the last chapter. if it is left blank doxygen will generate a
# standard footer. notice: only use this tag if you know what you are doing!

latex_footer           =

# if the pdf_hyperlinks tag is set to yes, the latex that is generated
# is prepared for conversion to pdf (using ps2pdf). the pdf file will
# contain links (just like the html output) instead of page references
# this makes the output suitable for online browsing using a pdf viewer.

pdf_hyperlinks         = yes

# if the use_pdflatex tag is set to yes, pdflatex will be used instead of
# plain latex in the generated makefile. set this option to yes to get a
# higher quality pdf documentation.

use_pdflatex           = yes

# if the latex_batchmode tag is set to yes, doxygen will add the \\batchmode.
# command to the generated latex files. this will instruct latex to keep
# running if errors occur, instead of asking the user for help.
# this option is also used when generating formulas in html.

latex_batchmode        = no

# if latex_hide_indices is set to yes then doxygen will not
# include the index chapters (such as file index, compound index, etc.)
# in the output.

latex_hide_indices     = no

# if latex_source_code is set to yes then doxygen will include
# source code with syntax highlighting in the latex output.
# note that which sources are shown also depends on other settings
# such as source_browser.

latex_source_code      = no

# the latex_bib_style tag can be used to specify the style to use for the
# bibliography, e.g. plainnat, or ieeetr. the default style is "plain". see
# http://en.wikipedia.org/wiki/bibtex for more info.

latex_bib_style        = plain

#---------------------------------------------------------------------------
# configuration options related to the rtf output
#---------------------------------------------------------------------------

# if the generate_rtf tag is set to yes doxygen will generate rtf output
# the rtf output is optimized for word 97 and may not look very pretty with
# other rtf readers or editors.

generate_rtf           = no

# the rtf_output tag is used to specify where the rtf docs will be put.
# if a relative path is entered the value of output_directory will be
# put in front of it. if left blank `rtf' will be used as the default path.

rtf_output             = rtf

# if the compact_rtf tag is set to yes doxygen generates more compact
# rtf documents. this may be useful for small projects and may help to
# save some trees in general.

compact_rtf            = no

# if the rtf_hyperlinks tag is set to yes, the rtf that is generated
# will contain hyperlink fields. the rtf file will
# contain links (just like the html output) instead of page references.
# this makes the output suitable for online browsing using word or other
# programs which support those fields.
# note: wordpad (write) and others do not support links.

rtf_hyperlinks         = no

# load style sheet definitions from file. syntax is similar to doxygen's
# config file, i.e. a series of assignments. you only have to provide
# replacements, missing definitions are set to their default value.

rtf_stylesheet_file    =

# set optional variables used in the generation of an rtf document.
# syntax is similar to doxygen's config file.

rtf_extensions_file    =

#---------------------------------------------------------------------------
# configuration options related to the man page output
#---------------------------------------------------------------------------

# if the generate_man tag is set to yes (the default) doxygen will
# generate man pages

generate_man           = no

# the man_output tag is used to specify where the man pages will be put.
# if a relative path is entered the value of output_directory will be
# put in front of it. if left blank `man' will be used as the default path.

man_output             = man

# the man_extension tag determines the extension that is added to
# the generated man pages (default is the subroutine's section .3)

man_extension          = .3

# if the man_links tag is set to yes and doxygen generates man output,
# then it will generate one additional man file for each entity
# documented in the real man page(s). these additional files
# only source the real man page, but without them the man command
# would be unable to find the correct page. the default is no.

man_links              = no

#---------------------------------------------------------------------------
# configuration options related to the xml output
#---------------------------------------------------------------------------

# if the generate_xml tag is set to yes doxygen will
# generate an xml file that captures the structure of
# the code including all documentation.

generate_xml           = no

# the xml_output tag is used to specify where the xml pages will be put.
# if a relative path is entered the value of output_directory will be
# put in front of it. if left blank `xml' will be used as the default path.

xml_output             = xml

# the xml_schema tag can be used to specify an xml schema,
# which can be used by a validating xml parser to check the
# syntax of the xml files.

xml_schema             =

# the xml_dtd tag can be used to specify an xml dtd,
# which can be used by a validating xml parser to check the
# syntax of the xml files.

xml_dtd                =

# if the xml_programlisting tag is set to yes doxygen will
# dump the program listings (including syntax highlighting
# and cross-referencing information) to the xml output. note that
# enabling this will significantly increase the size of the xml output.

xml_programlisting     = yes

#---------------------------------------------------------------------------
# configuration options for the autogen definitions output
#---------------------------------------------------------------------------

# if the generate_autogen_def tag is set to yes doxygen will
# generate an autogen definitions (see autogen.sf.net) file
# that captures the structure of the code including all
# documentation. note that this feature is still experimental
# and incomplete at the moment.

generate_autogen_def   = no

#---------------------------------------------------------------------------
# configuration options related to the perl module output
#---------------------------------------------------------------------------

# if the generate_perlmod tag is set to yes doxygen will
# generate a perl module file that captures the structure of
# the code including all documentation. note that this
# feature is still experimental and incomplete at the
# moment.

generate_perlmod       = no

# if the perlmod_latex tag is set to yes doxygen will generate
# the necessary makefile rules, perl scripts and latex code to be able
# to generate pdf and dvi output from the perl module output.

perlmod_latex          = no

# if the perlmod_pretty tag is set to yes the perl module output will be
# nicely formatted so it can be parsed by a human reader.
# this is useful
# if you want to understand what is going on.
# on the other hand, if this
# tag is set to no the size of the perl module output will be much smaller
# and perl will parse it just the same.

perlmod_pretty         = yes

# the names of the make variables in the generated doxyrules.make file
# are prefixed with the string contained in perlmod_makevar_prefix.
# this is useful so different doxyrules.make files included by the same
# makefile don't overwrite each other's variables.

perlmod_makevar_prefix =

#---------------------------------------------------------------------------
# configuration options related to the preprocessor
#---------------------------------------------------------------------------

# if the enable_preprocessing tag is set to yes (the default) doxygen will
# evaluate all c-preprocessor directives found in the sources and include
# files.

enable_preprocessing   = yes

# if the macro_expansion tag is set to yes doxygen will expand all macro
# names in the source code. if set to no (the default) only conditional
# compilation will be performed. macro expansion can be done in a controlled
# way by setting expand_only_predef to yes.

macro_expansion        = no

# if the expand_only_predef and macro_expansion tags are both set to yes
# then the macro expansion is limited to the macros specified with the
# predefined and expand_as_defined tags.

expand_only_predef     = no

# if the search_includes tag is set to yes (the default) the includes files
# pointed to by include_path will be searched when a #include is found.

search_includes        = yes

# the include_path tag can be used to specify one or more directories that
# contain include files that are not input files but should be processed by
# the preprocessor.

include_path           =

# you can use the include_file_patterns tag to specify one or more wildcard
# patterns (like *.h and *.hpp) to filter out the header-files in the
# directories. if left blank, the patterns specified with file_patterns will
# be used.

include_file_patterns  =

# the predefined tag can be used to specify one or more macro names that
# are defined before the preprocessor is started (similar to the -d option of
# gcc). the argument of the tag is a list of macros of the form: name
# or name=definition (no spaces). if the definition and the = are
# omitted =1 is assumed. to prevent a macro definition from being
# undefined via #undef or recursively expanded use the := operator
# instead of the = operator.

predefined             =

# if the macro_expansion and expand_only_predef tags are set to yes then
# this tag can be used to specify a list of macro names that should be expanded.
# the macro definition that is found in the sources will be used.
# use the predefined tag if you want to use a different macro definition that
# overrules the definition found in the source code.

expand_as_defined      =

# if the skip_function_macros tag is set to yes (the default) then
# doxygen's preprocessor will remove all references to function-like macros
# that are alone on a line, have an all uppercase name, and do not end with a
# semicolon, because these will confuse the parser if not removed.

skip_function_macros   = yes

#---------------------------------------------------------------------------
# configuration::additions related to external references
#---------------------------------------------------------------------------

# the tagfiles option can be used to specify one or more tagfiles. for each
# tag file the location of the external documentation should be added. the
# format of a tag file without this location is as follows:
#
# tagfiles = file1 file2 ...
# adding location for the tag files is done as follows:
#
# tagfiles = file1=loc1 "file2 = loc2" ...
# where "loc1" and "loc2" can be relative or absolute paths
# or urls. note that each tag file must have a unique name (where the name does
# not include the path). if a tag file is not located in the directory in which
# doxygen is run, you must also specify the path to the tagfile here.

tagfiles               =

# when a file name is specified after generate_tagfile, doxygen will create
# a tag file that is based on the input files it reads.

generate_tagfile       =

# if the allexternals tag is set to yes all external classes will be listed
# in the class index. if set to no only the inherited external classes
# will be listed.

allexternals           = no

# if the external_groups tag is set to yes all external groups will be listed
# in the modules index. if set to no, only the current project's groups will
# be listed.

external_groups        = yes

# the perl_path should be the absolute path and name of the perl script
# interpreter (i.e. the result of `which perl').

perl_path              = /usr/bin/perl

#---------------------------------------------------------------------------
# configuration options related to the dot tool
#---------------------------------------------------------------------------

# if the class_diagrams tag is set to yes (the default) doxygen will
# generate a inheritance diagram (in html, rtf and latex) for classes with base
# or super classes. setting the tag to no turns the diagrams off. note that
# this option also works with have_dot disabled, but it is recommended to
# install and use dot, since it yields more powerful graphs.

class_diagrams         = yes

# you can define message sequence charts within doxygen comments using the \msc
# command. doxygen will then run the mscgen tool (see
# http://www.mcternan.me.uk/mscgen/) to produce the chart and insert it in the
# documentation. the mscgen_path tag allows you to specify the directory where
# the mscgen tool resides. if left empty the tool is assumed to be found in the
# default search path.

mscgen_path            =

# if set to yes, the inheritance and collaboration graphs will hide
# inheritance and usage relations if the target is undocumented
# or is not a class.

hide_undoc_relations   = yes

# if you set the have_dot tag to yes then doxygen will assume the dot tool is
# available from the path. this tool is part of graphviz, a graph visualization
# toolkit from at&t and lucent bell labs. the other options in this section
# have no effect if this option is set to no (the default)

have_dot               = no

# the dot_num_threads specifies the number of dot invocations doxygen is
# allowed to run in parallel. when set to 0 (the default) doxygen will
# base this on the number of processors available in the system. you can set it
# explicitly to a value larger than 0 to get control over the balance
# between cpu load and processing speed.

dot_num_threads        = 0

# by default doxygen will use the helvetica font for all dot files that
# doxygen generates. when you want a differently looking font you can specify
# the font name using dot_fontname. you need to make sure dot is able to find
# the font, which can be done by putting it in a standard location or by setting
# the dotfontpath environment variable or by setting dot_fontpath to the
# directory containing the font.

dot_fontname           = helvetica

# the dot_fontsize tag can be used to set the size of the font of dot graphs.
# the default size is 10pt.

dot_fontsize           = 10

# by default doxygen will tell dot to use the helvetica font.
# if you specify a different font using dot_fontname you can use dot_fontpath to
# set the path where dot can find it.

dot_fontpath           =

# if the class_graph and have_dot tags are set to yes then doxygen
# will generate a graph for each documented class showing the direct and
# indirect inheritance relations. setting this tag to yes will force the
# class_diagrams tag to no.

class_graph            = yes

# if the collaboration_graph and have_dot tags are set to yes then doxygen
# will generate a graph for each documented class showing the direct and
# indirect implementation dependencies (inheritance, containment, and
# class references variables) of the class with other documented classes.

collaboration_graph    = yes

# if the group_graphs and have_dot tags are set to yes then doxygen
# will generate a graph for groups, showing the direct groups dependencies

group_graphs           = yes

# if the uml_look tag is set to yes doxygen will generate inheritance and
# collaboration diagrams in a style similar to the omg's unified modeling
# language.

uml_look               = no

# if the uml_look tag is enabled, the fields and methods are shown inside
# the class node. if there are many fields or methods and many nodes the
# graph may become too big to be useful. the uml_limit_num_fields
# threshold limits the number of items for each type to make the size more
# managable. set this to 0 for no limit. note that the threshold may be
# exceeded by 50% before the limit is enforced.

uml_limit_num_fields   = 10

# if set to yes, the inheritance and collaboration graphs will show the
# relations between templates and their instances.

template_relations     = no

# if the enable_preprocessing, search_includes, include_graph, and have_dot
# tags are set to yes then doxygen will generate a graph for each documented
# file showing the direct and indirect include dependencies of the file with
# other documented files.

include_graph          = yes

# if the enable_preprocessing, search_includes, included_by_graph, and
# have_dot tags are set to yes then doxygen will generate a graph for each
# documented header file showing the documented files that directly or
# indirectly include this file.

included_by_graph      = yes

# if the call_graph and have_dot options are set to yes then
# doxygen will generate a call dependency graph for every global function
# or class method. note that enabling this option will significantly increase
# the time of a run. so in most cases it will be better to enable call graphs
# for selected functions only using the \callgraph command.

call_graph             = no

# if the caller_graph and have_dot tags are set to yes then
# doxygen will generate a caller dependency graph for every global function
# or class method. note that enabling this option will significantly increase
# the time of a run. so in most cases it will be better to enable caller
# graphs for selected functions only using the \callergraph command.

caller_graph           = no

# if the graphical_hierarchy and have_dot tags are set to yes then doxygen
# will generate a graphical hierarchy of all classes instead of a textual one.

graphical_hierarchy    = yes

# if the directory_graph and have_dot tags are set to yes
# then doxygen will show the dependencies a directory has on other directories
# in a graphical way. the dependency relations are determined by the #include
# relations between the files in the directories.

directory_graph        = yes

# the dot_image_format tag can be used to set the image format of the images
# generated by dot. possible values are svg, png, jpg, or gif.
# if left blank png will be used. if you choose svg you need to set
# html_file_extension to xhtml in order to make the svg files
# visible in ie 9+ (other browsers do not have this requirement).

dot_image_format       = png

# if dot_image_format is set to svg, then this option can be set to yes to
# enable generation of interactive svg images that allow zooming and panning.
# note that this requires a modern browser other than internet explorer.
# tested and working are firefox, chrome, safari, and opera. for ie 9+ you
# need to set html_file_extension to xhtml in order to make the svg files
# visible. older versions of ie do not have svg support.

interactive_svg        = no

# the tag dot_path can be used to specify the path where the dot tool can be
# found. if left blank, it is assumed the dot tool can be found in the path.

dot_path               =

# the dotfile_dirs tag can be used to specify one or more directories that
# contain dot files that are included in the documentation (see the
# \dotfile command).

dotfile_dirs           =

# the mscfile_dirs tag can be used to specify one or more directories that
# contain msc files that are included in the documentation (see the
# \mscfile command).

mscfile_dirs           =

# the dot_graph_max_nodes tag can be used to set the maximum number of
# nodes that will be shown in the graph. if the number of nodes in a graph
# becomes larger than this value, doxygen will truncate the graph, which is
# visualized by representing a node as a red box. note that doxygen if the
# number of direct children of the root node in a graph is already larger than
# dot_graph_max_nodes then the graph will not be shown at all. also note
# that the size of a graph can be further restricted by max_dot_graph_depth.

dot_graph_max_nodes    = 50

# the max_dot_graph_depth tag can be used to set the maximum depth of the
# graphs generated by dot. a depth value of 3 means that only nodes reachable
# from the root by following a path via at most 3 edges will be shown. nodes
# that lay further from the root node will be omitted. note that setting this
# option to 1 or 2 may greatly reduce the computation time needed for large
# code bases. also note that the size of a graph can be further restricted by
# dot_graph_max_nodes. using a depth of 0 means no depth restriction.

max_dot_graph_depth    = 0

# set the dot_transparent tag to yes to generate images with a transparent
# background. this is disabled by default, because dot on windows does not
# seem to support this out of the box. warning: depending on the platform used,
# enabling this option may lead to badly anti-aliased labels on the edges of
# a graph (i.e. they become hard to read).

dot_transparent        = no

# set the dot_multi_targets tag to yes allow dot to generate multiple output
# files in one run (i.e. multiple -o and -t options on the command line). this
# makes dot run faster, but since only newer versions of dot (>1.8.10)
# support this, this feature is disabled by default.

dot_multi_targets      = no

# if the generate_legend tag is set to yes (the default) doxygen will
# generate a legend page explaining the meaning of the various boxes and
# arrows in the dot generated graphs.

generate_legend        = yes

# if the dot_cleanup tag is set to yes (the default) doxygen will
# remove the intermediate dot files that are used to generate
# the various graphs.

dot_cleanup            = yes
